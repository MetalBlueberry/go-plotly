package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeScattersmith types.TraceType = "scattersmith"

func (t *Scattersmith) GetType() types.TraceType {
	return TraceTypeScattersmith
}

func (t *Scattersmith) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Scattersmith
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Scattersmith The scattersmith trace type encompasses line charts, scatter charts, text charts, and bubble charts in smith coordinates. The data visualized as scatter point or lines is set in `real` and `imag` (imaginary) coordinates Text (appearing either on the chart or on hover only) is via `text`. Bubble charts are achieved by setting `marker.size` and/or `marker.color` to numerical arrays.
type Scattersmith struct {

	// Cliponaxis
	// arrayOK: false
	// type: boolean
	// Determines whether or not markers and text nodes are clipped about the subplot axes. To show markers and text nodes above axis lines and tick labels, make sure to set `xaxis.layer` and `yaxis.layer` to *below traces*.
	Cliponaxis types.Bool `json:"cliponaxis,omitempty"`

	// Connectgaps
	// arrayOK: false
	// type: boolean
	// Determines whether or not gaps (i.e. {nan} or missing values) in the provided data arrays are connected.
	Connectgaps types.Bool `json:"connectgaps,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	Customdata interface{} `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	Customdatasrc types.String `json:"customdatasrc,omitempty"`

	// Fill
	// arrayOK: false
	// default: none
	// type: enumerated
	// Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scattersmith has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
	Fill ScattersmithFill `json:"fill,omitempty"`

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the fill color. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
	Fillcolor types.Color `json:"fillcolor,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo *types.ArrayOK[*ScattersmithHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	Hoverinfosrc types.String `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	Hoverlabel *ScattersmithHoverlabel `json:"hoverlabel,omitempty"`

	// Hoveron
	// arrayOK: false
	// default: %!s(<nil>)
	// type: flaglist
	// Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
	Hoveron ScattersmithHoveron `json:"hoveron,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate *types.ArrayOK[*types.String] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	Hovertemplatesrc types.String `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: true
	// type: string
	// Sets hover text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. To be seen, trace `hoverinfo` must contain a *text* flag.
	Hovertext *types.ArrayOK[*types.String] `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	Hovertextsrc types.String `json:"hovertextsrc,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	Ids interface{} `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	Idssrc types.String `json:"idssrc,omitempty"`

	// Imag
	// arrayOK: false
	// type: data_array
	// Sets the imaginary component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.
	Imag interface{} `json:"imag,omitempty"`

	// Imagsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `imag`.
	Imagsrc types.String `json:"imagsrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend types.String `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	Legendgroup types.String `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	Legendgrouptitle *ScattersmithLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	Legendrank float64 `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	Legendwidth float64 `json:"legendwidth,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	Line *ScattersmithLine `json:"line,omitempty"`

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ScattersmithMarker `json:"marker,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc types.String `json:"metasrc,omitempty"`

	// Mode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: flaglist
	// Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
	Mode ScattersmithMode `json:"mode,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	Name types.String `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the trace.
	Opacity float64 `json:"opacity,omitempty"`

	// Real
	// arrayOK: false
	// type: data_array
	// Sets the real component of the data, in units of normalized impedance such that real=1, imag=0 is the center of the chart.
	Real interface{} `json:"real,omitempty"`

	// Realsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `real`.
	Realsrc types.String `json:"realsrc,omitempty"`

	// Selected
	// arrayOK: false
	// role: Object
	Selected *ScattersmithSelected `json:"selected,omitempty"`

	// Selectedpoints
	// arrayOK: false
	// type: any
	// Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
	Selectedpoints interface{} `json:"selectedpoints,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	Showlegend types.Bool `json:"showlegend,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	Stream *ScattersmithStream `json:"stream,omitempty"`

	// Subplot
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's data coordinates and a smith subplot. If *smith* (the default value), the data refer to `layout.smith`. If *smith2*, the data refer to `layout.smith2`, and so on.
	Subplot types.String `json:"subplot,omitempty"`

	// Text
	// arrayOK: true
	// type: string
	// Sets text elements associated with each (x,y) pair. If a single string, the same string appears over all the data points. If an array of string, the items are mapped in order to the this trace's (x,y) coordinates. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
	Text *types.ArrayOK[*types.String] `json:"text,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	Textfont *ScattersmithTextfont `json:"textfont,omitempty"`

	// Textposition
	// arrayOK: true
	// default: middle center
	// type: enumerated
	// Sets the positions of the `text` elements with respects to the (x,y) coordinates.
	Textposition *types.ArrayOK[*ScattersmithTextposition] `json:"textposition,omitempty"`

	// Textpositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textposition`.
	Textpositionsrc types.String `json:"textpositionsrc,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	Textsrc types.String `json:"textsrc,omitempty"`

	// Texttemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `real`, `imag` and `text`.
	Texttemplate *types.ArrayOK[*types.String] `json:"texttemplate,omitempty"`

	// Texttemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `texttemplate`.
	Texttemplatesrc types.String `json:"texttemplatesrc,omitempty"`

	// Transforms
	// role: Object
	// items: ScattersmithTransform
	Transforms []ScattersmithTransform `json:"transforms,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	Uid types.String `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Unselected
	// arrayOK: false
	// role: Object
	Unselected *ScattersmithUnselected `json:"unselected,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible ScattersmithVisible `json:"visible,omitempty"`
}

// ScattersmithHoverlabelFont Sets the font used in hover labels.
type ScattersmithHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*ScattersmithHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*ScattersmithHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*ScattersmithHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*ScattersmithHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// ScattersmithHoverlabel
type ScattersmithHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align *types.ArrayOK[*ScattersmithHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.String `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.String `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	Bordercolorsrc types.String `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *ScattersmithHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength *types.ArrayOK[*int64] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	Namelengthsrc types.String `json:"namelengthsrc,omitempty"`
}

// ScattersmithLegendgrouptitleFont Sets this legend group's title font.
type ScattersmithLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.String `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ScattersmithLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.String `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ScattersmithLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ScattersmithLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ScattersmithLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight int64 `json:"weight,omitempty"`
}

// ScattersmithLegendgrouptitle
type ScattersmithLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *ScattersmithLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text types.String `json:"text,omitempty"`
}

// ScattersmithLine
type ScattersmithLine struct {

	// Backoff
	// arrayOK: true
	// type: number
	// Sets the line back off from the end point of the nth line segment (in px). This option is useful e.g. to avoid overlap with arrowhead markers. With *auto* the lines would trim before markers if `marker.angleref` is set to *previous*.
	Backoff *types.ArrayOK[*float64] `json:"backoff,omitempty"`

	// Backoffsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `backoff`.
	Backoffsrc types.String `json:"backoffsrc,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets the line color.
	Color types.Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash types.String `json:"dash,omitempty"`

	// Shape
	// arrayOK: false
	// default: linear
	// type: enumerated
	// Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
	Shape ScattersmithLineShape `json:"shape,omitempty"`

	// Smoothing
	// arrayOK: false
	// type: number
	// Has an effect only if `shape` is set to *spline* Sets the amount of smoothing. *0* corresponds to no smoothing (equivalent to a *linear* shape).
	Smoothing float64 `json:"smoothing,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

// ScattersmithMarkerColorbarTickfont Sets the color bar's tick label font
type ScattersmithMarkerColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.String `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ScattersmithMarkerColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.String `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ScattersmithMarkerColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ScattersmithMarkerColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ScattersmithMarkerColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight int64 `json:"weight,omitempty"`
}

// ScattersmithMarkerColorbarTickformatstop
type ScattersmithMarkerColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	Enabled types.Bool `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	Name types.String `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	Templateitemname types.String `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	Value types.String `json:"value,omitempty"`
}

// ScattersmithMarkerColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type ScattersmithMarkerColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.String `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ScattersmithMarkerColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.String `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ScattersmithMarkerColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ScattersmithMarkerColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ScattersmithMarkerColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight int64 `json:"weight,omitempty"`
}

// ScattersmithMarkerColorbarTitle
type ScattersmithMarkerColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *ScattersmithMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ScattersmithMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text types.String `json:"text,omitempty"`
}

// ScattersmithMarkerColorbar
type ScattersmithMarkerColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ScattersmithMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ScattersmithMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	Orientation ScattersmithMarkerColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands types.Bool `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ScattersmithMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels types.Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ScattersmithMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ScattersmithMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ScattersmithMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	Tickfont *ScattersmithMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat types.String `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: ScattersmithMarkerColorbarTickformatstop
	Tickformatstops []ScattersmithMarkerColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	Ticklabeloverflow ScattersmithMarkerColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	Ticklabelposition ScattersmithMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ScattersmithMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix types.String `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ScattersmithMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix types.String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc types.String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc types.String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	Title *ScattersmithMarkerColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	X float64 `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	Xanchor ScattersmithMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref ScattersmithMarkerColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	Y float64 `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	Yanchor ScattersmithMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref ScattersmithMarkerColorbarYref `json:"yref,omitempty"`
}

// ScattersmithMarkerGradient
type ScattersmithMarkerGradient struct {

	// Color
	// arrayOK: true
	// type: color
	// Sets the final color of the gradient fill: the center color for radial, the right for horizontal, or the bottom for vertical.
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Type
	// arrayOK: true
	// default: none
	// type: enumerated
	// Sets the type of gradient used to fill the markers
	Type *types.ArrayOK[*ScattersmithMarkerGradientType] `json:"type,omitempty"`

	// Typesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `type`.
	Typesrc types.String `json:"typesrc,omitempty"`
}

// ScattersmithMarkerLine
type ScattersmithMarkerLine struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale types.Bool `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	Cauto types.Bool `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color
	// arrayOK: true
	// type: color
	// Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color *types.ArrayOK[*types.ColorWithColorScale] `json:"color,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis types.String `json:"coloraxis,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	Colorscale types.ColorScale `json:"colorscale,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	Reversescale types.Bool `json:"reversescale,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	// Sets the width (in px) of the lines bounding the marker points.
	Width *types.ArrayOK[*float64] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	Widthsrc types.String `json:"widthsrc,omitempty"`
}

// ScattersmithMarker
type ScattersmithMarker struct {

	// Angle
	// arrayOK: true
	// type: angle
	// Sets the marker angle in respect to `angleref`.
	Angle *types.ArrayOK[*float64] `json:"angle,omitempty"`

	// Angleref
	// arrayOK: false
	// default: up
	// type: enumerated
	// Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.
	Angleref ScattersmithMarkerAngleref `json:"angleref,omitempty"`

	// Anglesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `angle`.
	Anglesrc types.String `json:"anglesrc,omitempty"`

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale types.Bool `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto types.Bool `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Color
	// arrayOK: true
	// type: color
	// Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	Color *types.ArrayOK[*types.ColorWithColorScale] `json:"color,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis types.String `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	Colorbar *ScattersmithMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	Colorscale types.ColorScale `json:"colorscale,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Gradient
	// arrayOK: false
	// role: Object
	Gradient *ScattersmithMarkerGradient `json:"gradient,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	Line *ScattersmithMarkerLine `json:"line,omitempty"`

	// Maxdisplayed
	// arrayOK: false
	// type: number
	// Sets a maximum number of points to be drawn on the graph. *0* corresponds to no limit.
	Maxdisplayed float64 `json:"maxdisplayed,omitempty"`

	// Opacity
	// arrayOK: true
	// type: number
	// Sets the marker opacity.
	Opacity *types.ArrayOK[*float64] `json:"opacity,omitempty"`

	// Opacitysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `opacity`.
	Opacitysrc types.String `json:"opacitysrc,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale types.Bool `json:"reversescale,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.
	Showscale types.Bool `json:"showscale,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	// Sets the marker size (in px).
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizemin
	// arrayOK: false
	// type: number
	// Has an effect only if `marker.size` is set to a numerical array. Sets the minimum size (in px) of the rendered marker points.
	Sizemin float64 `json:"sizemin,omitempty"`

	// Sizemode
	// arrayOK: false
	// default: diameter
	// type: enumerated
	// Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
	Sizemode ScattersmithMarkerSizemode `json:"sizemode,omitempty"`

	// Sizeref
	// arrayOK: false
	// type: number
	// Has an effect only if `marker.size` is set to a numerical array. Sets the scale factor used to determine the rendered size of marker points. Use with `sizemin` and `sizemode`.
	Sizeref float64 `json:"sizeref,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Standoff
	// arrayOK: true
	// type: number
	// Moves the marker away from the data point in the direction of `angle` (in px). This can be useful for example if you have another marker at this location and you want to point an arrowhead marker at it.
	Standoff *types.ArrayOK[*float64] `json:"standoff,omitempty"`

	// Standoffsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `standoff`.
	Standoffsrc types.String `json:"standoffsrc,omitempty"`

	// Symbol
	// arrayOK: true
	// default: circle
	// type: enumerated
	// Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
	Symbol *types.ArrayOK[*ScattersmithMarkerSymbol] `json:"symbol,omitempty"`

	// Symbolsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `symbol`.
	Symbolsrc types.String `json:"symbolsrc,omitempty"`
}

// ScattersmithSelectedMarker
type ScattersmithSelectedMarker struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the marker color of selected points.
	Color types.Color `json:"color,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of selected points.
	Opacity float64 `json:"opacity,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	// Sets the marker size of selected points.
	Size float64 `json:"size,omitempty"`
}

// ScattersmithSelectedTextfont
type ScattersmithSelectedTextfont struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the text font color of selected points.
	Color types.Color `json:"color,omitempty"`
}

// ScattersmithSelected
type ScattersmithSelected struct {

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ScattersmithSelectedMarker `json:"marker,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	Textfont *ScattersmithSelectedTextfont `json:"textfont,omitempty"`
}

// ScattersmithStream
type ScattersmithStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token types.String `json:"token,omitempty"`
}

// ScattersmithTextfont Sets the text font.
type ScattersmithTextfont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*ScattersmithTextfontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*ScattersmithTextfontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*ScattersmithTextfontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*ScattersmithTextfontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// ScattersmithTransform WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.
type ScattersmithTransform struct {
}

// ScattersmithUnselectedMarker
type ScattersmithUnselectedMarker struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the marker color of unselected points, applied only when a selection exists.
	Color types.Color `json:"color,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity float64 `json:"opacity,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	// Sets the marker size of unselected points, applied only when a selection exists.
	Size float64 `json:"size,omitempty"`
}

// ScattersmithUnselectedTextfont
type ScattersmithUnselectedTextfont struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the text font color of unselected points, applied only when a selection exists.
	Color types.Color `json:"color,omitempty"`
}

// ScattersmithUnselected
type ScattersmithUnselected struct {

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ScattersmithUnselectedMarker `json:"marker,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	Textfont *ScattersmithUnselectedTextfont `json:"textfont,omitempty"`
}

// ScattersmithFill Sets the area to fill with a solid color. Use with `fillcolor` if not *none*. scattersmith has a subset of the options available to scatter. *toself* connects the endpoints of the trace (or each segment of the trace if it has gaps) into a closed shape. *tonext* fills the space between two traces if one completely encloses the other (eg consecutive contour lines), and behaves like *toself* if there is no trace before it. *tonext* should not be used if one trace does not enclose the other.
type ScattersmithFill string

const (
	ScattersmithFillNone   ScattersmithFill = "none"
	ScattersmithFillToself ScattersmithFill = "toself"
	ScattersmithFillTonext ScattersmithFill = "tonext"
)

// ScattersmithHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type ScattersmithHoverlabelAlign string

const (
	ScattersmithHoverlabelAlignLeft  ScattersmithHoverlabelAlign = "left"
	ScattersmithHoverlabelAlignRight ScattersmithHoverlabelAlign = "right"
	ScattersmithHoverlabelAlignAuto  ScattersmithHoverlabelAlign = "auto"
)

// ScattersmithHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ScattersmithHoverlabelFontStyle string

const (
	ScattersmithHoverlabelFontStyleNormal ScattersmithHoverlabelFontStyle = "normal"
	ScattersmithHoverlabelFontStyleItalic ScattersmithHoverlabelFontStyle = "italic"
)

// ScattersmithHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ScattersmithHoverlabelFontTextcase string

const (
	ScattersmithHoverlabelFontTextcaseNormal   ScattersmithHoverlabelFontTextcase = "normal"
	ScattersmithHoverlabelFontTextcaseWordCaps ScattersmithHoverlabelFontTextcase = "word caps"
	ScattersmithHoverlabelFontTextcaseUpper    ScattersmithHoverlabelFontTextcase = "upper"
	ScattersmithHoverlabelFontTextcaseLower    ScattersmithHoverlabelFontTextcase = "lower"
)

// ScattersmithHoverlabelFontVariant Sets the variant of the font.
type ScattersmithHoverlabelFontVariant string

const (
	ScattersmithHoverlabelFontVariantNormal        ScattersmithHoverlabelFontVariant = "normal"
	ScattersmithHoverlabelFontVariantSmallCaps     ScattersmithHoverlabelFontVariant = "small-caps"
	ScattersmithHoverlabelFontVariantAllSmallCaps  ScattersmithHoverlabelFontVariant = "all-small-caps"
	ScattersmithHoverlabelFontVariantAllPetiteCaps ScattersmithHoverlabelFontVariant = "all-petite-caps"
	ScattersmithHoverlabelFontVariantPetiteCaps    ScattersmithHoverlabelFontVariant = "petite-caps"
	ScattersmithHoverlabelFontVariantUnicase       ScattersmithHoverlabelFontVariant = "unicase"
)

// ScattersmithLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ScattersmithLegendgrouptitleFontStyle string

const (
	ScattersmithLegendgrouptitleFontStyleNormal ScattersmithLegendgrouptitleFontStyle = "normal"
	ScattersmithLegendgrouptitleFontStyleItalic ScattersmithLegendgrouptitleFontStyle = "italic"
)

// ScattersmithLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ScattersmithLegendgrouptitleFontTextcase string

const (
	ScattersmithLegendgrouptitleFontTextcaseNormal   ScattersmithLegendgrouptitleFontTextcase = "normal"
	ScattersmithLegendgrouptitleFontTextcaseWordCaps ScattersmithLegendgrouptitleFontTextcase = "word caps"
	ScattersmithLegendgrouptitleFontTextcaseUpper    ScattersmithLegendgrouptitleFontTextcase = "upper"
	ScattersmithLegendgrouptitleFontTextcaseLower    ScattersmithLegendgrouptitleFontTextcase = "lower"
)

// ScattersmithLegendgrouptitleFontVariant Sets the variant of the font.
type ScattersmithLegendgrouptitleFontVariant string

const (
	ScattersmithLegendgrouptitleFontVariantNormal        ScattersmithLegendgrouptitleFontVariant = "normal"
	ScattersmithLegendgrouptitleFontVariantSmallCaps     ScattersmithLegendgrouptitleFontVariant = "small-caps"
	ScattersmithLegendgrouptitleFontVariantAllSmallCaps  ScattersmithLegendgrouptitleFontVariant = "all-small-caps"
	ScattersmithLegendgrouptitleFontVariantAllPetiteCaps ScattersmithLegendgrouptitleFontVariant = "all-petite-caps"
	ScattersmithLegendgrouptitleFontVariantPetiteCaps    ScattersmithLegendgrouptitleFontVariant = "petite-caps"
	ScattersmithLegendgrouptitleFontVariantUnicase       ScattersmithLegendgrouptitleFontVariant = "unicase"
)

// ScattersmithLineShape Determines the line shape. With *spline* the lines are drawn using spline interpolation. The other available values correspond to step-wise line shapes.
type ScattersmithLineShape string

const (
	ScattersmithLineShapeLinear ScattersmithLineShape = "linear"
	ScattersmithLineShapeSpline ScattersmithLineShape = "spline"
)

// ScattersmithMarkerAngleref Sets the reference for marker angle. With *previous*, angle 0 points along the line from the previous point to this one. With *up*, angle 0 points toward the top of the screen.
type ScattersmithMarkerAngleref string

const (
	ScattersmithMarkerAnglerefPrevious ScattersmithMarkerAngleref = "previous"
	ScattersmithMarkerAnglerefUp       ScattersmithMarkerAngleref = "up"
)

// ScattersmithMarkerColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type ScattersmithMarkerColorbarExponentformat string

const (
	ScattersmithMarkerColorbarExponentformatNone  ScattersmithMarkerColorbarExponentformat = "none"
	ScattersmithMarkerColorbarExponentformatE1    ScattersmithMarkerColorbarExponentformat = "e"
	ScattersmithMarkerColorbarExponentformatE2    ScattersmithMarkerColorbarExponentformat = "E"
	ScattersmithMarkerColorbarExponentformatPower ScattersmithMarkerColorbarExponentformat = "power"
	ScattersmithMarkerColorbarExponentformatSI    ScattersmithMarkerColorbarExponentformat = "SI"
	ScattersmithMarkerColorbarExponentformatB     ScattersmithMarkerColorbarExponentformat = "B"
)

// ScattersmithMarkerColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
type ScattersmithMarkerColorbarLenmode string

const (
	ScattersmithMarkerColorbarLenmodeFraction ScattersmithMarkerColorbarLenmode = "fraction"
	ScattersmithMarkerColorbarLenmodePixels   ScattersmithMarkerColorbarLenmode = "pixels"
)

// ScattersmithMarkerColorbarOrientation Sets the orientation of the colorbar.
type ScattersmithMarkerColorbarOrientation string

const (
	ScattersmithMarkerColorbarOrientationH ScattersmithMarkerColorbarOrientation = "h"
	ScattersmithMarkerColorbarOrientationV ScattersmithMarkerColorbarOrientation = "v"
)

// ScattersmithMarkerColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type ScattersmithMarkerColorbarShowexponent string

const (
	ScattersmithMarkerColorbarShowexponentAll   ScattersmithMarkerColorbarShowexponent = "all"
	ScattersmithMarkerColorbarShowexponentFirst ScattersmithMarkerColorbarShowexponent = "first"
	ScattersmithMarkerColorbarShowexponentLast  ScattersmithMarkerColorbarShowexponent = "last"
	ScattersmithMarkerColorbarShowexponentNone  ScattersmithMarkerColorbarShowexponent = "none"
)

// ScattersmithMarkerColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type ScattersmithMarkerColorbarShowtickprefix string

const (
	ScattersmithMarkerColorbarShowtickprefixAll   ScattersmithMarkerColorbarShowtickprefix = "all"
	ScattersmithMarkerColorbarShowtickprefixFirst ScattersmithMarkerColorbarShowtickprefix = "first"
	ScattersmithMarkerColorbarShowtickprefixLast  ScattersmithMarkerColorbarShowtickprefix = "last"
	ScattersmithMarkerColorbarShowtickprefixNone  ScattersmithMarkerColorbarShowtickprefix = "none"
)

// ScattersmithMarkerColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
type ScattersmithMarkerColorbarShowticksuffix string

const (
	ScattersmithMarkerColorbarShowticksuffixAll   ScattersmithMarkerColorbarShowticksuffix = "all"
	ScattersmithMarkerColorbarShowticksuffixFirst ScattersmithMarkerColorbarShowticksuffix = "first"
	ScattersmithMarkerColorbarShowticksuffixLast  ScattersmithMarkerColorbarShowticksuffix = "last"
	ScattersmithMarkerColorbarShowticksuffixNone  ScattersmithMarkerColorbarShowticksuffix = "none"
)

// ScattersmithMarkerColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
type ScattersmithMarkerColorbarThicknessmode string

const (
	ScattersmithMarkerColorbarThicknessmodeFraction ScattersmithMarkerColorbarThicknessmode = "fraction"
	ScattersmithMarkerColorbarThicknessmodePixels   ScattersmithMarkerColorbarThicknessmode = "pixels"
)

// ScattersmithMarkerColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ScattersmithMarkerColorbarTickfontStyle string

const (
	ScattersmithMarkerColorbarTickfontStyleNormal ScattersmithMarkerColorbarTickfontStyle = "normal"
	ScattersmithMarkerColorbarTickfontStyleItalic ScattersmithMarkerColorbarTickfontStyle = "italic"
)

// ScattersmithMarkerColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ScattersmithMarkerColorbarTickfontTextcase string

const (
	ScattersmithMarkerColorbarTickfontTextcaseNormal   ScattersmithMarkerColorbarTickfontTextcase = "normal"
	ScattersmithMarkerColorbarTickfontTextcaseWordCaps ScattersmithMarkerColorbarTickfontTextcase = "word caps"
	ScattersmithMarkerColorbarTickfontTextcaseUpper    ScattersmithMarkerColorbarTickfontTextcase = "upper"
	ScattersmithMarkerColorbarTickfontTextcaseLower    ScattersmithMarkerColorbarTickfontTextcase = "lower"
)

// ScattersmithMarkerColorbarTickfontVariant Sets the variant of the font.
type ScattersmithMarkerColorbarTickfontVariant string

const (
	ScattersmithMarkerColorbarTickfontVariantNormal        ScattersmithMarkerColorbarTickfontVariant = "normal"
	ScattersmithMarkerColorbarTickfontVariantSmallCaps     ScattersmithMarkerColorbarTickfontVariant = "small-caps"
	ScattersmithMarkerColorbarTickfontVariantAllSmallCaps  ScattersmithMarkerColorbarTickfontVariant = "all-small-caps"
	ScattersmithMarkerColorbarTickfontVariantAllPetiteCaps ScattersmithMarkerColorbarTickfontVariant = "all-petite-caps"
	ScattersmithMarkerColorbarTickfontVariantPetiteCaps    ScattersmithMarkerColorbarTickfontVariant = "petite-caps"
	ScattersmithMarkerColorbarTickfontVariantUnicase       ScattersmithMarkerColorbarTickfontVariant = "unicase"
)

// ScattersmithMarkerColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
type ScattersmithMarkerColorbarTicklabeloverflow string

const (
	ScattersmithMarkerColorbarTicklabeloverflowAllow          ScattersmithMarkerColorbarTicklabeloverflow = "allow"
	ScattersmithMarkerColorbarTicklabeloverflowHidePastDiv    ScattersmithMarkerColorbarTicklabeloverflow = "hide past div"
	ScattersmithMarkerColorbarTicklabeloverflowHidePastDomain ScattersmithMarkerColorbarTicklabeloverflow = "hide past domain"
)

// ScattersmithMarkerColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
type ScattersmithMarkerColorbarTicklabelposition string

const (
	ScattersmithMarkerColorbarTicklabelpositionOutside       ScattersmithMarkerColorbarTicklabelposition = "outside"
	ScattersmithMarkerColorbarTicklabelpositionInside        ScattersmithMarkerColorbarTicklabelposition = "inside"
	ScattersmithMarkerColorbarTicklabelpositionOutsideTop    ScattersmithMarkerColorbarTicklabelposition = "outside top"
	ScattersmithMarkerColorbarTicklabelpositionInsideTop     ScattersmithMarkerColorbarTicklabelposition = "inside top"
	ScattersmithMarkerColorbarTicklabelpositionOutsideLeft   ScattersmithMarkerColorbarTicklabelposition = "outside left"
	ScattersmithMarkerColorbarTicklabelpositionInsideLeft    ScattersmithMarkerColorbarTicklabelposition = "inside left"
	ScattersmithMarkerColorbarTicklabelpositionOutsideRight  ScattersmithMarkerColorbarTicklabelposition = "outside right"
	ScattersmithMarkerColorbarTicklabelpositionInsideRight   ScattersmithMarkerColorbarTicklabelposition = "inside right"
	ScattersmithMarkerColorbarTicklabelpositionOutsideBottom ScattersmithMarkerColorbarTicklabelposition = "outside bottom"
	ScattersmithMarkerColorbarTicklabelpositionInsideBottom  ScattersmithMarkerColorbarTicklabelposition = "inside bottom"
)

// ScattersmithMarkerColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type ScattersmithMarkerColorbarTickmode string

const (
	ScattersmithMarkerColorbarTickmodeAuto   ScattersmithMarkerColorbarTickmode = "auto"
	ScattersmithMarkerColorbarTickmodeLinear ScattersmithMarkerColorbarTickmode = "linear"
	ScattersmithMarkerColorbarTickmodeArray  ScattersmithMarkerColorbarTickmode = "array"
)

// ScattersmithMarkerColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type ScattersmithMarkerColorbarTicks string

const (
	ScattersmithMarkerColorbarTicksOutside ScattersmithMarkerColorbarTicks = "outside"
	ScattersmithMarkerColorbarTicksInside  ScattersmithMarkerColorbarTicks = "inside"
	ScattersmithMarkerColorbarTicksEmpty   ScattersmithMarkerColorbarTicks = ""
)

// ScattersmithMarkerColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ScattersmithMarkerColorbarTitleFontStyle string

const (
	ScattersmithMarkerColorbarTitleFontStyleNormal ScattersmithMarkerColorbarTitleFontStyle = "normal"
	ScattersmithMarkerColorbarTitleFontStyleItalic ScattersmithMarkerColorbarTitleFontStyle = "italic"
)

// ScattersmithMarkerColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ScattersmithMarkerColorbarTitleFontTextcase string

const (
	ScattersmithMarkerColorbarTitleFontTextcaseNormal   ScattersmithMarkerColorbarTitleFontTextcase = "normal"
	ScattersmithMarkerColorbarTitleFontTextcaseWordCaps ScattersmithMarkerColorbarTitleFontTextcase = "word caps"
	ScattersmithMarkerColorbarTitleFontTextcaseUpper    ScattersmithMarkerColorbarTitleFontTextcase = "upper"
	ScattersmithMarkerColorbarTitleFontTextcaseLower    ScattersmithMarkerColorbarTitleFontTextcase = "lower"
)

// ScattersmithMarkerColorbarTitleFontVariant Sets the variant of the font.
type ScattersmithMarkerColorbarTitleFontVariant string

const (
	ScattersmithMarkerColorbarTitleFontVariantNormal        ScattersmithMarkerColorbarTitleFontVariant = "normal"
	ScattersmithMarkerColorbarTitleFontVariantSmallCaps     ScattersmithMarkerColorbarTitleFontVariant = "small-caps"
	ScattersmithMarkerColorbarTitleFontVariantAllSmallCaps  ScattersmithMarkerColorbarTitleFontVariant = "all-small-caps"
	ScattersmithMarkerColorbarTitleFontVariantAllPetiteCaps ScattersmithMarkerColorbarTitleFontVariant = "all-petite-caps"
	ScattersmithMarkerColorbarTitleFontVariantPetiteCaps    ScattersmithMarkerColorbarTitleFontVariant = "petite-caps"
	ScattersmithMarkerColorbarTitleFontVariantUnicase       ScattersmithMarkerColorbarTitleFontVariant = "unicase"
)

// ScattersmithMarkerColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
type ScattersmithMarkerColorbarTitleSide string

const (
	ScattersmithMarkerColorbarTitleSideRight  ScattersmithMarkerColorbarTitleSide = "right"
	ScattersmithMarkerColorbarTitleSideTop    ScattersmithMarkerColorbarTitleSide = "top"
	ScattersmithMarkerColorbarTitleSideBottom ScattersmithMarkerColorbarTitleSide = "bottom"
)

// ScattersmithMarkerColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
type ScattersmithMarkerColorbarXanchor string

const (
	ScattersmithMarkerColorbarXanchorLeft   ScattersmithMarkerColorbarXanchor = "left"
	ScattersmithMarkerColorbarXanchorCenter ScattersmithMarkerColorbarXanchor = "center"
	ScattersmithMarkerColorbarXanchorRight  ScattersmithMarkerColorbarXanchor = "right"
)

// ScattersmithMarkerColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type ScattersmithMarkerColorbarXref string

const (
	ScattersmithMarkerColorbarXrefContainer ScattersmithMarkerColorbarXref = "container"
	ScattersmithMarkerColorbarXrefPaper     ScattersmithMarkerColorbarXref = "paper"
)

// ScattersmithMarkerColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
type ScattersmithMarkerColorbarYanchor string

const (
	ScattersmithMarkerColorbarYanchorTop    ScattersmithMarkerColorbarYanchor = "top"
	ScattersmithMarkerColorbarYanchorMiddle ScattersmithMarkerColorbarYanchor = "middle"
	ScattersmithMarkerColorbarYanchorBottom ScattersmithMarkerColorbarYanchor = "bottom"
)

// ScattersmithMarkerColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type ScattersmithMarkerColorbarYref string

const (
	ScattersmithMarkerColorbarYrefContainer ScattersmithMarkerColorbarYref = "container"
	ScattersmithMarkerColorbarYrefPaper     ScattersmithMarkerColorbarYref = "paper"
)

// ScattersmithMarkerGradientType Sets the type of gradient used to fill the markers
type ScattersmithMarkerGradientType string

const (
	ScattersmithMarkerGradientTypeRadial     ScattersmithMarkerGradientType = "radial"
	ScattersmithMarkerGradientTypeHorizontal ScattersmithMarkerGradientType = "horizontal"
	ScattersmithMarkerGradientTypeVertical   ScattersmithMarkerGradientType = "vertical"
	ScattersmithMarkerGradientTypeNone       ScattersmithMarkerGradientType = "none"
)

// ScattersmithMarkerSizemode Has an effect only if `marker.size` is set to a numerical array. Sets the rule for which the data in `size` is converted to pixels.
type ScattersmithMarkerSizemode string

const (
	ScattersmithMarkerSizemodeDiameter ScattersmithMarkerSizemode = "diameter"
	ScattersmithMarkerSizemodeArea     ScattersmithMarkerSizemode = "area"
)

// ScattersmithMarkerSymbol Sets the marker symbol type. Adding 100 is equivalent to appending *-open* to a symbol name. Adding 200 is equivalent to appending *-dot* to a symbol name. Adding 300 is equivalent to appending *-open-dot* or *dot-open* to a symbol name.
type ScattersmithMarkerSymbol interface{}

var (
	ScattersmithMarkerSymbolNumber0                 ScattersmithMarkerSymbol = 0
	ScattersmithMarkerSymbol0                       ScattersmithMarkerSymbol = "0"
	ScattersmithMarkerSymbolCircle                  ScattersmithMarkerSymbol = "circle"
	ScattersmithMarkerSymbolNumber100               ScattersmithMarkerSymbol = 100
	ScattersmithMarkerSymbol100                     ScattersmithMarkerSymbol = "100"
	ScattersmithMarkerSymbolCircleOpen              ScattersmithMarkerSymbol = "circle-open"
	ScattersmithMarkerSymbolNumber200               ScattersmithMarkerSymbol = 200
	ScattersmithMarkerSymbol200                     ScattersmithMarkerSymbol = "200"
	ScattersmithMarkerSymbolCircleDot               ScattersmithMarkerSymbol = "circle-dot"
	ScattersmithMarkerSymbolNumber300               ScattersmithMarkerSymbol = 300
	ScattersmithMarkerSymbol300                     ScattersmithMarkerSymbol = "300"
	ScattersmithMarkerSymbolCircleOpenDot           ScattersmithMarkerSymbol = "circle-open-dot"
	ScattersmithMarkerSymbolNumber1                 ScattersmithMarkerSymbol = 1
	ScattersmithMarkerSymbol1                       ScattersmithMarkerSymbol = "1"
	ScattersmithMarkerSymbolSquare                  ScattersmithMarkerSymbol = "square"
	ScattersmithMarkerSymbolNumber101               ScattersmithMarkerSymbol = 101
	ScattersmithMarkerSymbol101                     ScattersmithMarkerSymbol = "101"
	ScattersmithMarkerSymbolSquareOpen              ScattersmithMarkerSymbol = "square-open"
	ScattersmithMarkerSymbolNumber201               ScattersmithMarkerSymbol = 201
	ScattersmithMarkerSymbol201                     ScattersmithMarkerSymbol = "201"
	ScattersmithMarkerSymbolSquareDot               ScattersmithMarkerSymbol = "square-dot"
	ScattersmithMarkerSymbolNumber301               ScattersmithMarkerSymbol = 301
	ScattersmithMarkerSymbol301                     ScattersmithMarkerSymbol = "301"
	ScattersmithMarkerSymbolSquareOpenDot           ScattersmithMarkerSymbol = "square-open-dot"
	ScattersmithMarkerSymbolNumber2                 ScattersmithMarkerSymbol = 2
	ScattersmithMarkerSymbol2                       ScattersmithMarkerSymbol = "2"
	ScattersmithMarkerSymbolDiamond                 ScattersmithMarkerSymbol = "diamond"
	ScattersmithMarkerSymbolNumber102               ScattersmithMarkerSymbol = 102
	ScattersmithMarkerSymbol102                     ScattersmithMarkerSymbol = "102"
	ScattersmithMarkerSymbolDiamondOpen             ScattersmithMarkerSymbol = "diamond-open"
	ScattersmithMarkerSymbolNumber202               ScattersmithMarkerSymbol = 202
	ScattersmithMarkerSymbol202                     ScattersmithMarkerSymbol = "202"
	ScattersmithMarkerSymbolDiamondDot              ScattersmithMarkerSymbol = "diamond-dot"
	ScattersmithMarkerSymbolNumber302               ScattersmithMarkerSymbol = 302
	ScattersmithMarkerSymbol302                     ScattersmithMarkerSymbol = "302"
	ScattersmithMarkerSymbolDiamondOpenDot          ScattersmithMarkerSymbol = "diamond-open-dot"
	ScattersmithMarkerSymbolNumber3                 ScattersmithMarkerSymbol = 3
	ScattersmithMarkerSymbol3                       ScattersmithMarkerSymbol = "3"
	ScattersmithMarkerSymbolCross                   ScattersmithMarkerSymbol = "cross"
	ScattersmithMarkerSymbolNumber103               ScattersmithMarkerSymbol = 103
	ScattersmithMarkerSymbol103                     ScattersmithMarkerSymbol = "103"
	ScattersmithMarkerSymbolCrossOpen               ScattersmithMarkerSymbol = "cross-open"
	ScattersmithMarkerSymbolNumber203               ScattersmithMarkerSymbol = 203
	ScattersmithMarkerSymbol203                     ScattersmithMarkerSymbol = "203"
	ScattersmithMarkerSymbolCrossDot                ScattersmithMarkerSymbol = "cross-dot"
	ScattersmithMarkerSymbolNumber303               ScattersmithMarkerSymbol = 303
	ScattersmithMarkerSymbol303                     ScattersmithMarkerSymbol = "303"
	ScattersmithMarkerSymbolCrossOpenDot            ScattersmithMarkerSymbol = "cross-open-dot"
	ScattersmithMarkerSymbolNumber4                 ScattersmithMarkerSymbol = 4
	ScattersmithMarkerSymbol4                       ScattersmithMarkerSymbol = "4"
	ScattersmithMarkerSymbolX                       ScattersmithMarkerSymbol = "x"
	ScattersmithMarkerSymbolNumber104               ScattersmithMarkerSymbol = 104
	ScattersmithMarkerSymbol104                     ScattersmithMarkerSymbol = "104"
	ScattersmithMarkerSymbolXOpen                   ScattersmithMarkerSymbol = "x-open"
	ScattersmithMarkerSymbolNumber204               ScattersmithMarkerSymbol = 204
	ScattersmithMarkerSymbol204                     ScattersmithMarkerSymbol = "204"
	ScattersmithMarkerSymbolXDot                    ScattersmithMarkerSymbol = "x-dot"
	ScattersmithMarkerSymbolNumber304               ScattersmithMarkerSymbol = 304
	ScattersmithMarkerSymbol304                     ScattersmithMarkerSymbol = "304"
	ScattersmithMarkerSymbolXOpenDot                ScattersmithMarkerSymbol = "x-open-dot"
	ScattersmithMarkerSymbolNumber5                 ScattersmithMarkerSymbol = 5
	ScattersmithMarkerSymbol5                       ScattersmithMarkerSymbol = "5"
	ScattersmithMarkerSymbolTriangleUp              ScattersmithMarkerSymbol = "triangle-up"
	ScattersmithMarkerSymbolNumber105               ScattersmithMarkerSymbol = 105
	ScattersmithMarkerSymbol105                     ScattersmithMarkerSymbol = "105"
	ScattersmithMarkerSymbolTriangleUpOpen          ScattersmithMarkerSymbol = "triangle-up-open"
	ScattersmithMarkerSymbolNumber205               ScattersmithMarkerSymbol = 205
	ScattersmithMarkerSymbol205                     ScattersmithMarkerSymbol = "205"
	ScattersmithMarkerSymbolTriangleUpDot           ScattersmithMarkerSymbol = "triangle-up-dot"
	ScattersmithMarkerSymbolNumber305               ScattersmithMarkerSymbol = 305
	ScattersmithMarkerSymbol305                     ScattersmithMarkerSymbol = "305"
	ScattersmithMarkerSymbolTriangleUpOpenDot       ScattersmithMarkerSymbol = "triangle-up-open-dot"
	ScattersmithMarkerSymbolNumber6                 ScattersmithMarkerSymbol = 6
	ScattersmithMarkerSymbol6                       ScattersmithMarkerSymbol = "6"
	ScattersmithMarkerSymbolTriangleDown            ScattersmithMarkerSymbol = "triangle-down"
	ScattersmithMarkerSymbolNumber106               ScattersmithMarkerSymbol = 106
	ScattersmithMarkerSymbol106                     ScattersmithMarkerSymbol = "106"
	ScattersmithMarkerSymbolTriangleDownOpen        ScattersmithMarkerSymbol = "triangle-down-open"
	ScattersmithMarkerSymbolNumber206               ScattersmithMarkerSymbol = 206
	ScattersmithMarkerSymbol206                     ScattersmithMarkerSymbol = "206"
	ScattersmithMarkerSymbolTriangleDownDot         ScattersmithMarkerSymbol = "triangle-down-dot"
	ScattersmithMarkerSymbolNumber306               ScattersmithMarkerSymbol = 306
	ScattersmithMarkerSymbol306                     ScattersmithMarkerSymbol = "306"
	ScattersmithMarkerSymbolTriangleDownOpenDot     ScattersmithMarkerSymbol = "triangle-down-open-dot"
	ScattersmithMarkerSymbolNumber7                 ScattersmithMarkerSymbol = 7
	ScattersmithMarkerSymbol7                       ScattersmithMarkerSymbol = "7"
	ScattersmithMarkerSymbolTriangleLeft            ScattersmithMarkerSymbol = "triangle-left"
	ScattersmithMarkerSymbolNumber107               ScattersmithMarkerSymbol = 107
	ScattersmithMarkerSymbol107                     ScattersmithMarkerSymbol = "107"
	ScattersmithMarkerSymbolTriangleLeftOpen        ScattersmithMarkerSymbol = "triangle-left-open"
	ScattersmithMarkerSymbolNumber207               ScattersmithMarkerSymbol = 207
	ScattersmithMarkerSymbol207                     ScattersmithMarkerSymbol = "207"
	ScattersmithMarkerSymbolTriangleLeftDot         ScattersmithMarkerSymbol = "triangle-left-dot"
	ScattersmithMarkerSymbolNumber307               ScattersmithMarkerSymbol = 307
	ScattersmithMarkerSymbol307                     ScattersmithMarkerSymbol = "307"
	ScattersmithMarkerSymbolTriangleLeftOpenDot     ScattersmithMarkerSymbol = "triangle-left-open-dot"
	ScattersmithMarkerSymbolNumber8                 ScattersmithMarkerSymbol = 8
	ScattersmithMarkerSymbol8                       ScattersmithMarkerSymbol = "8"
	ScattersmithMarkerSymbolTriangleRight           ScattersmithMarkerSymbol = "triangle-right"
	ScattersmithMarkerSymbolNumber108               ScattersmithMarkerSymbol = 108
	ScattersmithMarkerSymbol108                     ScattersmithMarkerSymbol = "108"
	ScattersmithMarkerSymbolTriangleRightOpen       ScattersmithMarkerSymbol = "triangle-right-open"
	ScattersmithMarkerSymbolNumber208               ScattersmithMarkerSymbol = 208
	ScattersmithMarkerSymbol208                     ScattersmithMarkerSymbol = "208"
	ScattersmithMarkerSymbolTriangleRightDot        ScattersmithMarkerSymbol = "triangle-right-dot"
	ScattersmithMarkerSymbolNumber308               ScattersmithMarkerSymbol = 308
	ScattersmithMarkerSymbol308                     ScattersmithMarkerSymbol = "308"
	ScattersmithMarkerSymbolTriangleRightOpenDot    ScattersmithMarkerSymbol = "triangle-right-open-dot"
	ScattersmithMarkerSymbolNumber9                 ScattersmithMarkerSymbol = 9
	ScattersmithMarkerSymbol9                       ScattersmithMarkerSymbol = "9"
	ScattersmithMarkerSymbolTriangleNe              ScattersmithMarkerSymbol = "triangle-ne"
	ScattersmithMarkerSymbolNumber109               ScattersmithMarkerSymbol = 109
	ScattersmithMarkerSymbol109                     ScattersmithMarkerSymbol = "109"
	ScattersmithMarkerSymbolTriangleNeOpen          ScattersmithMarkerSymbol = "triangle-ne-open"
	ScattersmithMarkerSymbolNumber209               ScattersmithMarkerSymbol = 209
	ScattersmithMarkerSymbol209                     ScattersmithMarkerSymbol = "209"
	ScattersmithMarkerSymbolTriangleNeDot           ScattersmithMarkerSymbol = "triangle-ne-dot"
	ScattersmithMarkerSymbolNumber309               ScattersmithMarkerSymbol = 309
	ScattersmithMarkerSymbol309                     ScattersmithMarkerSymbol = "309"
	ScattersmithMarkerSymbolTriangleNeOpenDot       ScattersmithMarkerSymbol = "triangle-ne-open-dot"
	ScattersmithMarkerSymbolNumber10                ScattersmithMarkerSymbol = 10
	ScattersmithMarkerSymbol10                      ScattersmithMarkerSymbol = "10"
	ScattersmithMarkerSymbolTriangleSe              ScattersmithMarkerSymbol = "triangle-se"
	ScattersmithMarkerSymbolNumber110               ScattersmithMarkerSymbol = 110
	ScattersmithMarkerSymbol110                     ScattersmithMarkerSymbol = "110"
	ScattersmithMarkerSymbolTriangleSeOpen          ScattersmithMarkerSymbol = "triangle-se-open"
	ScattersmithMarkerSymbolNumber210               ScattersmithMarkerSymbol = 210
	ScattersmithMarkerSymbol210                     ScattersmithMarkerSymbol = "210"
	ScattersmithMarkerSymbolTriangleSeDot           ScattersmithMarkerSymbol = "triangle-se-dot"
	ScattersmithMarkerSymbolNumber310               ScattersmithMarkerSymbol = 310
	ScattersmithMarkerSymbol310                     ScattersmithMarkerSymbol = "310"
	ScattersmithMarkerSymbolTriangleSeOpenDot       ScattersmithMarkerSymbol = "triangle-se-open-dot"
	ScattersmithMarkerSymbolNumber11                ScattersmithMarkerSymbol = 11
	ScattersmithMarkerSymbol11                      ScattersmithMarkerSymbol = "11"
	ScattersmithMarkerSymbolTriangleSw              ScattersmithMarkerSymbol = "triangle-sw"
	ScattersmithMarkerSymbolNumber111               ScattersmithMarkerSymbol = 111
	ScattersmithMarkerSymbol111                     ScattersmithMarkerSymbol = "111"
	ScattersmithMarkerSymbolTriangleSwOpen          ScattersmithMarkerSymbol = "triangle-sw-open"
	ScattersmithMarkerSymbolNumber211               ScattersmithMarkerSymbol = 211
	ScattersmithMarkerSymbol211                     ScattersmithMarkerSymbol = "211"
	ScattersmithMarkerSymbolTriangleSwDot           ScattersmithMarkerSymbol = "triangle-sw-dot"
	ScattersmithMarkerSymbolNumber311               ScattersmithMarkerSymbol = 311
	ScattersmithMarkerSymbol311                     ScattersmithMarkerSymbol = "311"
	ScattersmithMarkerSymbolTriangleSwOpenDot       ScattersmithMarkerSymbol = "triangle-sw-open-dot"
	ScattersmithMarkerSymbolNumber12                ScattersmithMarkerSymbol = 12
	ScattersmithMarkerSymbol12                      ScattersmithMarkerSymbol = "12"
	ScattersmithMarkerSymbolTriangleNw              ScattersmithMarkerSymbol = "triangle-nw"
	ScattersmithMarkerSymbolNumber112               ScattersmithMarkerSymbol = 112
	ScattersmithMarkerSymbol112                     ScattersmithMarkerSymbol = "112"
	ScattersmithMarkerSymbolTriangleNwOpen          ScattersmithMarkerSymbol = "triangle-nw-open"
	ScattersmithMarkerSymbolNumber212               ScattersmithMarkerSymbol = 212
	ScattersmithMarkerSymbol212                     ScattersmithMarkerSymbol = "212"
	ScattersmithMarkerSymbolTriangleNwDot           ScattersmithMarkerSymbol = "triangle-nw-dot"
	ScattersmithMarkerSymbolNumber312               ScattersmithMarkerSymbol = 312
	ScattersmithMarkerSymbol312                     ScattersmithMarkerSymbol = "312"
	ScattersmithMarkerSymbolTriangleNwOpenDot       ScattersmithMarkerSymbol = "triangle-nw-open-dot"
	ScattersmithMarkerSymbolNumber13                ScattersmithMarkerSymbol = 13
	ScattersmithMarkerSymbol13                      ScattersmithMarkerSymbol = "13"
	ScattersmithMarkerSymbolPentagon                ScattersmithMarkerSymbol = "pentagon"
	ScattersmithMarkerSymbolNumber113               ScattersmithMarkerSymbol = 113
	ScattersmithMarkerSymbol113                     ScattersmithMarkerSymbol = "113"
	ScattersmithMarkerSymbolPentagonOpen            ScattersmithMarkerSymbol = "pentagon-open"
	ScattersmithMarkerSymbolNumber213               ScattersmithMarkerSymbol = 213
	ScattersmithMarkerSymbol213                     ScattersmithMarkerSymbol = "213"
	ScattersmithMarkerSymbolPentagonDot             ScattersmithMarkerSymbol = "pentagon-dot"
	ScattersmithMarkerSymbolNumber313               ScattersmithMarkerSymbol = 313
	ScattersmithMarkerSymbol313                     ScattersmithMarkerSymbol = "313"
	ScattersmithMarkerSymbolPentagonOpenDot         ScattersmithMarkerSymbol = "pentagon-open-dot"
	ScattersmithMarkerSymbolNumber14                ScattersmithMarkerSymbol = 14
	ScattersmithMarkerSymbol14                      ScattersmithMarkerSymbol = "14"
	ScattersmithMarkerSymbolHexagon                 ScattersmithMarkerSymbol = "hexagon"
	ScattersmithMarkerSymbolNumber114               ScattersmithMarkerSymbol = 114
	ScattersmithMarkerSymbol114                     ScattersmithMarkerSymbol = "114"
	ScattersmithMarkerSymbolHexagonOpen             ScattersmithMarkerSymbol = "hexagon-open"
	ScattersmithMarkerSymbolNumber214               ScattersmithMarkerSymbol = 214
	ScattersmithMarkerSymbol214                     ScattersmithMarkerSymbol = "214"
	ScattersmithMarkerSymbolHexagonDot              ScattersmithMarkerSymbol = "hexagon-dot"
	ScattersmithMarkerSymbolNumber314               ScattersmithMarkerSymbol = 314
	ScattersmithMarkerSymbol314                     ScattersmithMarkerSymbol = "314"
	ScattersmithMarkerSymbolHexagonOpenDot          ScattersmithMarkerSymbol = "hexagon-open-dot"
	ScattersmithMarkerSymbolNumber15                ScattersmithMarkerSymbol = 15
	ScattersmithMarkerSymbol15                      ScattersmithMarkerSymbol = "15"
	ScattersmithMarkerSymbolHexagon2                ScattersmithMarkerSymbol = "hexagon2"
	ScattersmithMarkerSymbolNumber115               ScattersmithMarkerSymbol = 115
	ScattersmithMarkerSymbol115                     ScattersmithMarkerSymbol = "115"
	ScattersmithMarkerSymbolHexagon2Open            ScattersmithMarkerSymbol = "hexagon2-open"
	ScattersmithMarkerSymbolNumber215               ScattersmithMarkerSymbol = 215
	ScattersmithMarkerSymbol215                     ScattersmithMarkerSymbol = "215"
	ScattersmithMarkerSymbolHexagon2Dot             ScattersmithMarkerSymbol = "hexagon2-dot"
	ScattersmithMarkerSymbolNumber315               ScattersmithMarkerSymbol = 315
	ScattersmithMarkerSymbol315                     ScattersmithMarkerSymbol = "315"
	ScattersmithMarkerSymbolHexagon2OpenDot         ScattersmithMarkerSymbol = "hexagon2-open-dot"
	ScattersmithMarkerSymbolNumber16                ScattersmithMarkerSymbol = 16
	ScattersmithMarkerSymbol16                      ScattersmithMarkerSymbol = "16"
	ScattersmithMarkerSymbolOctagon                 ScattersmithMarkerSymbol = "octagon"
	ScattersmithMarkerSymbolNumber116               ScattersmithMarkerSymbol = 116
	ScattersmithMarkerSymbol116                     ScattersmithMarkerSymbol = "116"
	ScattersmithMarkerSymbolOctagonOpen             ScattersmithMarkerSymbol = "octagon-open"
	ScattersmithMarkerSymbolNumber216               ScattersmithMarkerSymbol = 216
	ScattersmithMarkerSymbol216                     ScattersmithMarkerSymbol = "216"
	ScattersmithMarkerSymbolOctagonDot              ScattersmithMarkerSymbol = "octagon-dot"
	ScattersmithMarkerSymbolNumber316               ScattersmithMarkerSymbol = 316
	ScattersmithMarkerSymbol316                     ScattersmithMarkerSymbol = "316"
	ScattersmithMarkerSymbolOctagonOpenDot          ScattersmithMarkerSymbol = "octagon-open-dot"
	ScattersmithMarkerSymbolNumber17                ScattersmithMarkerSymbol = 17
	ScattersmithMarkerSymbol17                      ScattersmithMarkerSymbol = "17"
	ScattersmithMarkerSymbolStar                    ScattersmithMarkerSymbol = "star"
	ScattersmithMarkerSymbolNumber117               ScattersmithMarkerSymbol = 117
	ScattersmithMarkerSymbol117                     ScattersmithMarkerSymbol = "117"
	ScattersmithMarkerSymbolStarOpen                ScattersmithMarkerSymbol = "star-open"
	ScattersmithMarkerSymbolNumber217               ScattersmithMarkerSymbol = 217
	ScattersmithMarkerSymbol217                     ScattersmithMarkerSymbol = "217"
	ScattersmithMarkerSymbolStarDot                 ScattersmithMarkerSymbol = "star-dot"
	ScattersmithMarkerSymbolNumber317               ScattersmithMarkerSymbol = 317
	ScattersmithMarkerSymbol317                     ScattersmithMarkerSymbol = "317"
	ScattersmithMarkerSymbolStarOpenDot             ScattersmithMarkerSymbol = "star-open-dot"
	ScattersmithMarkerSymbolNumber18                ScattersmithMarkerSymbol = 18
	ScattersmithMarkerSymbol18                      ScattersmithMarkerSymbol = "18"
	ScattersmithMarkerSymbolHexagram                ScattersmithMarkerSymbol = "hexagram"
	ScattersmithMarkerSymbolNumber118               ScattersmithMarkerSymbol = 118
	ScattersmithMarkerSymbol118                     ScattersmithMarkerSymbol = "118"
	ScattersmithMarkerSymbolHexagramOpen            ScattersmithMarkerSymbol = "hexagram-open"
	ScattersmithMarkerSymbolNumber218               ScattersmithMarkerSymbol = 218
	ScattersmithMarkerSymbol218                     ScattersmithMarkerSymbol = "218"
	ScattersmithMarkerSymbolHexagramDot             ScattersmithMarkerSymbol = "hexagram-dot"
	ScattersmithMarkerSymbolNumber318               ScattersmithMarkerSymbol = 318
	ScattersmithMarkerSymbol318                     ScattersmithMarkerSymbol = "318"
	ScattersmithMarkerSymbolHexagramOpenDot         ScattersmithMarkerSymbol = "hexagram-open-dot"
	ScattersmithMarkerSymbolNumber19                ScattersmithMarkerSymbol = 19
	ScattersmithMarkerSymbol19                      ScattersmithMarkerSymbol = "19"
	ScattersmithMarkerSymbolStarTriangleUp          ScattersmithMarkerSymbol = "star-triangle-up"
	ScattersmithMarkerSymbolNumber119               ScattersmithMarkerSymbol = 119
	ScattersmithMarkerSymbol119                     ScattersmithMarkerSymbol = "119"
	ScattersmithMarkerSymbolStarTriangleUpOpen      ScattersmithMarkerSymbol = "star-triangle-up-open"
	ScattersmithMarkerSymbolNumber219               ScattersmithMarkerSymbol = 219
	ScattersmithMarkerSymbol219                     ScattersmithMarkerSymbol = "219"
	ScattersmithMarkerSymbolStarTriangleUpDot       ScattersmithMarkerSymbol = "star-triangle-up-dot"
	ScattersmithMarkerSymbolNumber319               ScattersmithMarkerSymbol = 319
	ScattersmithMarkerSymbol319                     ScattersmithMarkerSymbol = "319"
	ScattersmithMarkerSymbolStarTriangleUpOpenDot   ScattersmithMarkerSymbol = "star-triangle-up-open-dot"
	ScattersmithMarkerSymbolNumber20                ScattersmithMarkerSymbol = 20
	ScattersmithMarkerSymbol20                      ScattersmithMarkerSymbol = "20"
	ScattersmithMarkerSymbolStarTriangleDown        ScattersmithMarkerSymbol = "star-triangle-down"
	ScattersmithMarkerSymbolNumber120               ScattersmithMarkerSymbol = 120
	ScattersmithMarkerSymbol120                     ScattersmithMarkerSymbol = "120"
	ScattersmithMarkerSymbolStarTriangleDownOpen    ScattersmithMarkerSymbol = "star-triangle-down-open"
	ScattersmithMarkerSymbolNumber220               ScattersmithMarkerSymbol = 220
	ScattersmithMarkerSymbol220                     ScattersmithMarkerSymbol = "220"
	ScattersmithMarkerSymbolStarTriangleDownDot     ScattersmithMarkerSymbol = "star-triangle-down-dot"
	ScattersmithMarkerSymbolNumber320               ScattersmithMarkerSymbol = 320
	ScattersmithMarkerSymbol320                     ScattersmithMarkerSymbol = "320"
	ScattersmithMarkerSymbolStarTriangleDownOpenDot ScattersmithMarkerSymbol = "star-triangle-down-open-dot"
	ScattersmithMarkerSymbolNumber21                ScattersmithMarkerSymbol = 21
	ScattersmithMarkerSymbol21                      ScattersmithMarkerSymbol = "21"
	ScattersmithMarkerSymbolStarSquare              ScattersmithMarkerSymbol = "star-square"
	ScattersmithMarkerSymbolNumber121               ScattersmithMarkerSymbol = 121
	ScattersmithMarkerSymbol121                     ScattersmithMarkerSymbol = "121"
	ScattersmithMarkerSymbolStarSquareOpen          ScattersmithMarkerSymbol = "star-square-open"
	ScattersmithMarkerSymbolNumber221               ScattersmithMarkerSymbol = 221
	ScattersmithMarkerSymbol221                     ScattersmithMarkerSymbol = "221"
	ScattersmithMarkerSymbolStarSquareDot           ScattersmithMarkerSymbol = "star-square-dot"
	ScattersmithMarkerSymbolNumber321               ScattersmithMarkerSymbol = 321
	ScattersmithMarkerSymbol321                     ScattersmithMarkerSymbol = "321"
	ScattersmithMarkerSymbolStarSquareOpenDot       ScattersmithMarkerSymbol = "star-square-open-dot"
	ScattersmithMarkerSymbolNumber22                ScattersmithMarkerSymbol = 22
	ScattersmithMarkerSymbol22                      ScattersmithMarkerSymbol = "22"
	ScattersmithMarkerSymbolStarDiamond             ScattersmithMarkerSymbol = "star-diamond"
	ScattersmithMarkerSymbolNumber122               ScattersmithMarkerSymbol = 122
	ScattersmithMarkerSymbol122                     ScattersmithMarkerSymbol = "122"
	ScattersmithMarkerSymbolStarDiamondOpen         ScattersmithMarkerSymbol = "star-diamond-open"
	ScattersmithMarkerSymbolNumber222               ScattersmithMarkerSymbol = 222
	ScattersmithMarkerSymbol222                     ScattersmithMarkerSymbol = "222"
	ScattersmithMarkerSymbolStarDiamondDot          ScattersmithMarkerSymbol = "star-diamond-dot"
	ScattersmithMarkerSymbolNumber322               ScattersmithMarkerSymbol = 322
	ScattersmithMarkerSymbol322                     ScattersmithMarkerSymbol = "322"
	ScattersmithMarkerSymbolStarDiamondOpenDot      ScattersmithMarkerSymbol = "star-diamond-open-dot"
	ScattersmithMarkerSymbolNumber23                ScattersmithMarkerSymbol = 23
	ScattersmithMarkerSymbol23                      ScattersmithMarkerSymbol = "23"
	ScattersmithMarkerSymbolDiamondTall             ScattersmithMarkerSymbol = "diamond-tall"
	ScattersmithMarkerSymbolNumber123               ScattersmithMarkerSymbol = 123
	ScattersmithMarkerSymbol123                     ScattersmithMarkerSymbol = "123"
	ScattersmithMarkerSymbolDiamondTallOpen         ScattersmithMarkerSymbol = "diamond-tall-open"
	ScattersmithMarkerSymbolNumber223               ScattersmithMarkerSymbol = 223
	ScattersmithMarkerSymbol223                     ScattersmithMarkerSymbol = "223"
	ScattersmithMarkerSymbolDiamondTallDot          ScattersmithMarkerSymbol = "diamond-tall-dot"
	ScattersmithMarkerSymbolNumber323               ScattersmithMarkerSymbol = 323
	ScattersmithMarkerSymbol323                     ScattersmithMarkerSymbol = "323"
	ScattersmithMarkerSymbolDiamondTallOpenDot      ScattersmithMarkerSymbol = "diamond-tall-open-dot"
	ScattersmithMarkerSymbolNumber24                ScattersmithMarkerSymbol = 24
	ScattersmithMarkerSymbol24                      ScattersmithMarkerSymbol = "24"
	ScattersmithMarkerSymbolDiamondWide             ScattersmithMarkerSymbol = "diamond-wide"
	ScattersmithMarkerSymbolNumber124               ScattersmithMarkerSymbol = 124
	ScattersmithMarkerSymbol124                     ScattersmithMarkerSymbol = "124"
	ScattersmithMarkerSymbolDiamondWideOpen         ScattersmithMarkerSymbol = "diamond-wide-open"
	ScattersmithMarkerSymbolNumber224               ScattersmithMarkerSymbol = 224
	ScattersmithMarkerSymbol224                     ScattersmithMarkerSymbol = "224"
	ScattersmithMarkerSymbolDiamondWideDot          ScattersmithMarkerSymbol = "diamond-wide-dot"
	ScattersmithMarkerSymbolNumber324               ScattersmithMarkerSymbol = 324
	ScattersmithMarkerSymbol324                     ScattersmithMarkerSymbol = "324"
	ScattersmithMarkerSymbolDiamondWideOpenDot      ScattersmithMarkerSymbol = "diamond-wide-open-dot"
	ScattersmithMarkerSymbolNumber25                ScattersmithMarkerSymbol = 25
	ScattersmithMarkerSymbol25                      ScattersmithMarkerSymbol = "25"
	ScattersmithMarkerSymbolHourglass               ScattersmithMarkerSymbol = "hourglass"
	ScattersmithMarkerSymbolNumber125               ScattersmithMarkerSymbol = 125
	ScattersmithMarkerSymbol125                     ScattersmithMarkerSymbol = "125"
	ScattersmithMarkerSymbolHourglassOpen           ScattersmithMarkerSymbol = "hourglass-open"
	ScattersmithMarkerSymbolNumber26                ScattersmithMarkerSymbol = 26
	ScattersmithMarkerSymbol26                      ScattersmithMarkerSymbol = "26"
	ScattersmithMarkerSymbolBowtie                  ScattersmithMarkerSymbol = "bowtie"
	ScattersmithMarkerSymbolNumber126               ScattersmithMarkerSymbol = 126
	ScattersmithMarkerSymbol126                     ScattersmithMarkerSymbol = "126"
	ScattersmithMarkerSymbolBowtieOpen              ScattersmithMarkerSymbol = "bowtie-open"
	ScattersmithMarkerSymbolNumber27                ScattersmithMarkerSymbol = 27
	ScattersmithMarkerSymbol27                      ScattersmithMarkerSymbol = "27"
	ScattersmithMarkerSymbolCircleCross             ScattersmithMarkerSymbol = "circle-cross"
	ScattersmithMarkerSymbolNumber127               ScattersmithMarkerSymbol = 127
	ScattersmithMarkerSymbol127                     ScattersmithMarkerSymbol = "127"
	ScattersmithMarkerSymbolCircleCrossOpen         ScattersmithMarkerSymbol = "circle-cross-open"
	ScattersmithMarkerSymbolNumber28                ScattersmithMarkerSymbol = 28
	ScattersmithMarkerSymbol28                      ScattersmithMarkerSymbol = "28"
	ScattersmithMarkerSymbolCircleX                 ScattersmithMarkerSymbol = "circle-x"
	ScattersmithMarkerSymbolNumber128               ScattersmithMarkerSymbol = 128
	ScattersmithMarkerSymbol128                     ScattersmithMarkerSymbol = "128"
	ScattersmithMarkerSymbolCircleXOpen             ScattersmithMarkerSymbol = "circle-x-open"
	ScattersmithMarkerSymbolNumber29                ScattersmithMarkerSymbol = 29
	ScattersmithMarkerSymbol29                      ScattersmithMarkerSymbol = "29"
	ScattersmithMarkerSymbolSquareCross             ScattersmithMarkerSymbol = "square-cross"
	ScattersmithMarkerSymbolNumber129               ScattersmithMarkerSymbol = 129
	ScattersmithMarkerSymbol129                     ScattersmithMarkerSymbol = "129"
	ScattersmithMarkerSymbolSquareCrossOpen         ScattersmithMarkerSymbol = "square-cross-open"
	ScattersmithMarkerSymbolNumber30                ScattersmithMarkerSymbol = 30
	ScattersmithMarkerSymbol30                      ScattersmithMarkerSymbol = "30"
	ScattersmithMarkerSymbolSquareX                 ScattersmithMarkerSymbol = "square-x"
	ScattersmithMarkerSymbolNumber130               ScattersmithMarkerSymbol = 130
	ScattersmithMarkerSymbol130                     ScattersmithMarkerSymbol = "130"
	ScattersmithMarkerSymbolSquareXOpen             ScattersmithMarkerSymbol = "square-x-open"
	ScattersmithMarkerSymbolNumber31                ScattersmithMarkerSymbol = 31
	ScattersmithMarkerSymbol31                      ScattersmithMarkerSymbol = "31"
	ScattersmithMarkerSymbolDiamondCross            ScattersmithMarkerSymbol = "diamond-cross"
	ScattersmithMarkerSymbolNumber131               ScattersmithMarkerSymbol = 131
	ScattersmithMarkerSymbol131                     ScattersmithMarkerSymbol = "131"
	ScattersmithMarkerSymbolDiamondCrossOpen        ScattersmithMarkerSymbol = "diamond-cross-open"
	ScattersmithMarkerSymbolNumber32                ScattersmithMarkerSymbol = 32
	ScattersmithMarkerSymbol32                      ScattersmithMarkerSymbol = "32"
	ScattersmithMarkerSymbolDiamondX                ScattersmithMarkerSymbol = "diamond-x"
	ScattersmithMarkerSymbolNumber132               ScattersmithMarkerSymbol = 132
	ScattersmithMarkerSymbol132                     ScattersmithMarkerSymbol = "132"
	ScattersmithMarkerSymbolDiamondXOpen            ScattersmithMarkerSymbol = "diamond-x-open"
	ScattersmithMarkerSymbolNumber33                ScattersmithMarkerSymbol = 33
	ScattersmithMarkerSymbol33                      ScattersmithMarkerSymbol = "33"
	ScattersmithMarkerSymbolCrossThin               ScattersmithMarkerSymbol = "cross-thin"
	ScattersmithMarkerSymbolNumber133               ScattersmithMarkerSymbol = 133
	ScattersmithMarkerSymbol133                     ScattersmithMarkerSymbol = "133"
	ScattersmithMarkerSymbolCrossThinOpen           ScattersmithMarkerSymbol = "cross-thin-open"
	ScattersmithMarkerSymbolNumber34                ScattersmithMarkerSymbol = 34
	ScattersmithMarkerSymbol34                      ScattersmithMarkerSymbol = "34"
	ScattersmithMarkerSymbolXThin                   ScattersmithMarkerSymbol = "x-thin"
	ScattersmithMarkerSymbolNumber134               ScattersmithMarkerSymbol = 134
	ScattersmithMarkerSymbol134                     ScattersmithMarkerSymbol = "134"
	ScattersmithMarkerSymbolXThinOpen               ScattersmithMarkerSymbol = "x-thin-open"
	ScattersmithMarkerSymbolNumber35                ScattersmithMarkerSymbol = 35
	ScattersmithMarkerSymbol35                      ScattersmithMarkerSymbol = "35"
	ScattersmithMarkerSymbolAsterisk                ScattersmithMarkerSymbol = "asterisk"
	ScattersmithMarkerSymbolNumber135               ScattersmithMarkerSymbol = 135
	ScattersmithMarkerSymbol135                     ScattersmithMarkerSymbol = "135"
	ScattersmithMarkerSymbolAsteriskOpen            ScattersmithMarkerSymbol = "asterisk-open"
	ScattersmithMarkerSymbolNumber36                ScattersmithMarkerSymbol = 36
	ScattersmithMarkerSymbol36                      ScattersmithMarkerSymbol = "36"
	ScattersmithMarkerSymbolHash                    ScattersmithMarkerSymbol = "hash"
	ScattersmithMarkerSymbolNumber136               ScattersmithMarkerSymbol = 136
	ScattersmithMarkerSymbol136                     ScattersmithMarkerSymbol = "136"
	ScattersmithMarkerSymbolHashOpen                ScattersmithMarkerSymbol = "hash-open"
	ScattersmithMarkerSymbolNumber236               ScattersmithMarkerSymbol = 236
	ScattersmithMarkerSymbol236                     ScattersmithMarkerSymbol = "236"
	ScattersmithMarkerSymbolHashDot                 ScattersmithMarkerSymbol = "hash-dot"
	ScattersmithMarkerSymbolNumber336               ScattersmithMarkerSymbol = 336
	ScattersmithMarkerSymbol336                     ScattersmithMarkerSymbol = "336"
	ScattersmithMarkerSymbolHashOpenDot             ScattersmithMarkerSymbol = "hash-open-dot"
	ScattersmithMarkerSymbolNumber37                ScattersmithMarkerSymbol = 37
	ScattersmithMarkerSymbol37                      ScattersmithMarkerSymbol = "37"
	ScattersmithMarkerSymbolYUp                     ScattersmithMarkerSymbol = "y-up"
	ScattersmithMarkerSymbolNumber137               ScattersmithMarkerSymbol = 137
	ScattersmithMarkerSymbol137                     ScattersmithMarkerSymbol = "137"
	ScattersmithMarkerSymbolYUpOpen                 ScattersmithMarkerSymbol = "y-up-open"
	ScattersmithMarkerSymbolNumber38                ScattersmithMarkerSymbol = 38
	ScattersmithMarkerSymbol38                      ScattersmithMarkerSymbol = "38"
	ScattersmithMarkerSymbolYDown                   ScattersmithMarkerSymbol = "y-down"
	ScattersmithMarkerSymbolNumber138               ScattersmithMarkerSymbol = 138
	ScattersmithMarkerSymbol138                     ScattersmithMarkerSymbol = "138"
	ScattersmithMarkerSymbolYDownOpen               ScattersmithMarkerSymbol = "y-down-open"
	ScattersmithMarkerSymbolNumber39                ScattersmithMarkerSymbol = 39
	ScattersmithMarkerSymbol39                      ScattersmithMarkerSymbol = "39"
	ScattersmithMarkerSymbolYLeft                   ScattersmithMarkerSymbol = "y-left"
	ScattersmithMarkerSymbolNumber139               ScattersmithMarkerSymbol = 139
	ScattersmithMarkerSymbol139                     ScattersmithMarkerSymbol = "139"
	ScattersmithMarkerSymbolYLeftOpen               ScattersmithMarkerSymbol = "y-left-open"
	ScattersmithMarkerSymbolNumber40                ScattersmithMarkerSymbol = 40
	ScattersmithMarkerSymbol40                      ScattersmithMarkerSymbol = "40"
	ScattersmithMarkerSymbolYRight                  ScattersmithMarkerSymbol = "y-right"
	ScattersmithMarkerSymbolNumber140               ScattersmithMarkerSymbol = 140
	ScattersmithMarkerSymbol140                     ScattersmithMarkerSymbol = "140"
	ScattersmithMarkerSymbolYRightOpen              ScattersmithMarkerSymbol = "y-right-open"
	ScattersmithMarkerSymbolNumber41                ScattersmithMarkerSymbol = 41
	ScattersmithMarkerSymbol41                      ScattersmithMarkerSymbol = "41"
	ScattersmithMarkerSymbolLineEw                  ScattersmithMarkerSymbol = "line-ew"
	ScattersmithMarkerSymbolNumber141               ScattersmithMarkerSymbol = 141
	ScattersmithMarkerSymbol141                     ScattersmithMarkerSymbol = "141"
	ScattersmithMarkerSymbolLineEwOpen              ScattersmithMarkerSymbol = "line-ew-open"
	ScattersmithMarkerSymbolNumber42                ScattersmithMarkerSymbol = 42
	ScattersmithMarkerSymbol42                      ScattersmithMarkerSymbol = "42"
	ScattersmithMarkerSymbolLineNs                  ScattersmithMarkerSymbol = "line-ns"
	ScattersmithMarkerSymbolNumber142               ScattersmithMarkerSymbol = 142
	ScattersmithMarkerSymbol142                     ScattersmithMarkerSymbol = "142"
	ScattersmithMarkerSymbolLineNsOpen              ScattersmithMarkerSymbol = "line-ns-open"
	ScattersmithMarkerSymbolNumber43                ScattersmithMarkerSymbol = 43
	ScattersmithMarkerSymbol43                      ScattersmithMarkerSymbol = "43"
	ScattersmithMarkerSymbolLineNe                  ScattersmithMarkerSymbol = "line-ne"
	ScattersmithMarkerSymbolNumber143               ScattersmithMarkerSymbol = 143
	ScattersmithMarkerSymbol143                     ScattersmithMarkerSymbol = "143"
	ScattersmithMarkerSymbolLineNeOpen              ScattersmithMarkerSymbol = "line-ne-open"
	ScattersmithMarkerSymbolNumber44                ScattersmithMarkerSymbol = 44
	ScattersmithMarkerSymbol44                      ScattersmithMarkerSymbol = "44"
	ScattersmithMarkerSymbolLineNw                  ScattersmithMarkerSymbol = "line-nw"
	ScattersmithMarkerSymbolNumber144               ScattersmithMarkerSymbol = 144
	ScattersmithMarkerSymbol144                     ScattersmithMarkerSymbol = "144"
	ScattersmithMarkerSymbolLineNwOpen              ScattersmithMarkerSymbol = "line-nw-open"
	ScattersmithMarkerSymbolNumber45                ScattersmithMarkerSymbol = 45
	ScattersmithMarkerSymbol45                      ScattersmithMarkerSymbol = "45"
	ScattersmithMarkerSymbolArrowUp                 ScattersmithMarkerSymbol = "arrow-up"
	ScattersmithMarkerSymbolNumber145               ScattersmithMarkerSymbol = 145
	ScattersmithMarkerSymbol145                     ScattersmithMarkerSymbol = "145"
	ScattersmithMarkerSymbolArrowUpOpen             ScattersmithMarkerSymbol = "arrow-up-open"
	ScattersmithMarkerSymbolNumber46                ScattersmithMarkerSymbol = 46
	ScattersmithMarkerSymbol46                      ScattersmithMarkerSymbol = "46"
	ScattersmithMarkerSymbolArrowDown               ScattersmithMarkerSymbol = "arrow-down"
	ScattersmithMarkerSymbolNumber146               ScattersmithMarkerSymbol = 146
	ScattersmithMarkerSymbol146                     ScattersmithMarkerSymbol = "146"
	ScattersmithMarkerSymbolArrowDownOpen           ScattersmithMarkerSymbol = "arrow-down-open"
	ScattersmithMarkerSymbolNumber47                ScattersmithMarkerSymbol = 47
	ScattersmithMarkerSymbol47                      ScattersmithMarkerSymbol = "47"
	ScattersmithMarkerSymbolArrowLeft               ScattersmithMarkerSymbol = "arrow-left"
	ScattersmithMarkerSymbolNumber147               ScattersmithMarkerSymbol = 147
	ScattersmithMarkerSymbol147                     ScattersmithMarkerSymbol = "147"
	ScattersmithMarkerSymbolArrowLeftOpen           ScattersmithMarkerSymbol = "arrow-left-open"
	ScattersmithMarkerSymbolNumber48                ScattersmithMarkerSymbol = 48
	ScattersmithMarkerSymbol48                      ScattersmithMarkerSymbol = "48"
	ScattersmithMarkerSymbolArrowRight              ScattersmithMarkerSymbol = "arrow-right"
	ScattersmithMarkerSymbolNumber148               ScattersmithMarkerSymbol = 148
	ScattersmithMarkerSymbol148                     ScattersmithMarkerSymbol = "148"
	ScattersmithMarkerSymbolArrowRightOpen          ScattersmithMarkerSymbol = "arrow-right-open"
	ScattersmithMarkerSymbolNumber49                ScattersmithMarkerSymbol = 49
	ScattersmithMarkerSymbol49                      ScattersmithMarkerSymbol = "49"
	ScattersmithMarkerSymbolArrowBarUp              ScattersmithMarkerSymbol = "arrow-bar-up"
	ScattersmithMarkerSymbolNumber149               ScattersmithMarkerSymbol = 149
	ScattersmithMarkerSymbol149                     ScattersmithMarkerSymbol = "149"
	ScattersmithMarkerSymbolArrowBarUpOpen          ScattersmithMarkerSymbol = "arrow-bar-up-open"
	ScattersmithMarkerSymbolNumber50                ScattersmithMarkerSymbol = 50
	ScattersmithMarkerSymbol50                      ScattersmithMarkerSymbol = "50"
	ScattersmithMarkerSymbolArrowBarDown            ScattersmithMarkerSymbol = "arrow-bar-down"
	ScattersmithMarkerSymbolNumber150               ScattersmithMarkerSymbol = 150
	ScattersmithMarkerSymbol150                     ScattersmithMarkerSymbol = "150"
	ScattersmithMarkerSymbolArrowBarDownOpen        ScattersmithMarkerSymbol = "arrow-bar-down-open"
	ScattersmithMarkerSymbolNumber51                ScattersmithMarkerSymbol = 51
	ScattersmithMarkerSymbol51                      ScattersmithMarkerSymbol = "51"
	ScattersmithMarkerSymbolArrowBarLeft            ScattersmithMarkerSymbol = "arrow-bar-left"
	ScattersmithMarkerSymbolNumber151               ScattersmithMarkerSymbol = 151
	ScattersmithMarkerSymbol151                     ScattersmithMarkerSymbol = "151"
	ScattersmithMarkerSymbolArrowBarLeftOpen        ScattersmithMarkerSymbol = "arrow-bar-left-open"
	ScattersmithMarkerSymbolNumber52                ScattersmithMarkerSymbol = 52
	ScattersmithMarkerSymbol52                      ScattersmithMarkerSymbol = "52"
	ScattersmithMarkerSymbolArrowBarRight           ScattersmithMarkerSymbol = "arrow-bar-right"
	ScattersmithMarkerSymbolNumber152               ScattersmithMarkerSymbol = 152
	ScattersmithMarkerSymbol152                     ScattersmithMarkerSymbol = "152"
	ScattersmithMarkerSymbolArrowBarRightOpen       ScattersmithMarkerSymbol = "arrow-bar-right-open"
	ScattersmithMarkerSymbolNumber53                ScattersmithMarkerSymbol = 53
	ScattersmithMarkerSymbol53                      ScattersmithMarkerSymbol = "53"
	ScattersmithMarkerSymbolArrow                   ScattersmithMarkerSymbol = "arrow"
	ScattersmithMarkerSymbolNumber153               ScattersmithMarkerSymbol = 153
	ScattersmithMarkerSymbol153                     ScattersmithMarkerSymbol = "153"
	ScattersmithMarkerSymbolArrowOpen               ScattersmithMarkerSymbol = "arrow-open"
	ScattersmithMarkerSymbolNumber54                ScattersmithMarkerSymbol = 54
	ScattersmithMarkerSymbol54                      ScattersmithMarkerSymbol = "54"
	ScattersmithMarkerSymbolArrowWide               ScattersmithMarkerSymbol = "arrow-wide"
	ScattersmithMarkerSymbolNumber154               ScattersmithMarkerSymbol = 154
	ScattersmithMarkerSymbol154                     ScattersmithMarkerSymbol = "154"
	ScattersmithMarkerSymbolArrowWideOpen           ScattersmithMarkerSymbol = "arrow-wide-open"
)

// ScattersmithTextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ScattersmithTextfontStyle string

const (
	ScattersmithTextfontStyleNormal ScattersmithTextfontStyle = "normal"
	ScattersmithTextfontStyleItalic ScattersmithTextfontStyle = "italic"
)

// ScattersmithTextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ScattersmithTextfontTextcase string

const (
	ScattersmithTextfontTextcaseNormal   ScattersmithTextfontTextcase = "normal"
	ScattersmithTextfontTextcaseWordCaps ScattersmithTextfontTextcase = "word caps"
	ScattersmithTextfontTextcaseUpper    ScattersmithTextfontTextcase = "upper"
	ScattersmithTextfontTextcaseLower    ScattersmithTextfontTextcase = "lower"
)

// ScattersmithTextfontVariant Sets the variant of the font.
type ScattersmithTextfontVariant string

const (
	ScattersmithTextfontVariantNormal        ScattersmithTextfontVariant = "normal"
	ScattersmithTextfontVariantSmallCaps     ScattersmithTextfontVariant = "small-caps"
	ScattersmithTextfontVariantAllSmallCaps  ScattersmithTextfontVariant = "all-small-caps"
	ScattersmithTextfontVariantAllPetiteCaps ScattersmithTextfontVariant = "all-petite-caps"
	ScattersmithTextfontVariantPetiteCaps    ScattersmithTextfontVariant = "petite-caps"
	ScattersmithTextfontVariantUnicase       ScattersmithTextfontVariant = "unicase"
)

// ScattersmithTextposition Sets the positions of the `text` elements with respects to the (x,y) coordinates.
type ScattersmithTextposition string

const (
	ScattersmithTextpositionTopLeft      ScattersmithTextposition = "top left"
	ScattersmithTextpositionTopCenter    ScattersmithTextposition = "top center"
	ScattersmithTextpositionTopRight     ScattersmithTextposition = "top right"
	ScattersmithTextpositionMiddleLeft   ScattersmithTextposition = "middle left"
	ScattersmithTextpositionMiddleCenter ScattersmithTextposition = "middle center"
	ScattersmithTextpositionMiddleRight  ScattersmithTextposition = "middle right"
	ScattersmithTextpositionBottomLeft   ScattersmithTextposition = "bottom left"
	ScattersmithTextpositionBottomCenter ScattersmithTextposition = "bottom center"
	ScattersmithTextpositionBottomRight  ScattersmithTextposition = "bottom right"
)

// ScattersmithVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type ScattersmithVisible interface{}

var (
	ScattersmithVisibleTrue       ScattersmithVisible = true
	ScattersmithVisibleFalse      ScattersmithVisible = false
	ScattersmithVisibleLegendonly ScattersmithVisible = "legendonly"
)

// ScattersmithHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
type ScattersmithHoverinfo string

const (
	// Flags
	ScattersmithHoverinfoReal ScattersmithHoverinfo = "real"
	ScattersmithHoverinfoImag ScattersmithHoverinfo = "imag"
	ScattersmithHoverinfoText ScattersmithHoverinfo = "text"
	ScattersmithHoverinfoName ScattersmithHoverinfo = "name"

	// Extra
	ScattersmithHoverinfoAll  ScattersmithHoverinfo = "all"
	ScattersmithHoverinfoNone ScattersmithHoverinfo = "none"
	ScattersmithHoverinfoSkip ScattersmithHoverinfo = "skip"
)

// ScattersmithHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ScattersmithHoverlabelFontLineposition string

const (
	// Flags
	ScattersmithHoverlabelFontLinepositionUnder   ScattersmithHoverlabelFontLineposition = "under"
	ScattersmithHoverlabelFontLinepositionOver    ScattersmithHoverlabelFontLineposition = "over"
	ScattersmithHoverlabelFontLinepositionThrough ScattersmithHoverlabelFontLineposition = "through"

	// Extra
	ScattersmithHoverlabelFontLinepositionNone ScattersmithHoverlabelFontLineposition = "none"
)

// ScattersmithHoveron Do the hover effects highlight individual points (markers or line points) or do they highlight filled regions? If the fill is *toself* or *tonext* and there are no markers or text, then the default is *fills*, otherwise it is *points*.
type ScattersmithHoveron string

const (
	// Flags
	ScattersmithHoveronPoints ScattersmithHoveron = "points"
	ScattersmithHoveronFills  ScattersmithHoveron = "fills"

	// Extra

)

// ScattersmithLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ScattersmithLegendgrouptitleFontLineposition string

const (
	// Flags
	ScattersmithLegendgrouptitleFontLinepositionUnder   ScattersmithLegendgrouptitleFontLineposition = "under"
	ScattersmithLegendgrouptitleFontLinepositionOver    ScattersmithLegendgrouptitleFontLineposition = "over"
	ScattersmithLegendgrouptitleFontLinepositionThrough ScattersmithLegendgrouptitleFontLineposition = "through"

	// Extra
	ScattersmithLegendgrouptitleFontLinepositionNone ScattersmithLegendgrouptitleFontLineposition = "none"
)

// ScattersmithMarkerColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ScattersmithMarkerColorbarTickfontLineposition string

const (
	// Flags
	ScattersmithMarkerColorbarTickfontLinepositionUnder   ScattersmithMarkerColorbarTickfontLineposition = "under"
	ScattersmithMarkerColorbarTickfontLinepositionOver    ScattersmithMarkerColorbarTickfontLineposition = "over"
	ScattersmithMarkerColorbarTickfontLinepositionThrough ScattersmithMarkerColorbarTickfontLineposition = "through"

	// Extra
	ScattersmithMarkerColorbarTickfontLinepositionNone ScattersmithMarkerColorbarTickfontLineposition = "none"
)

// ScattersmithMarkerColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ScattersmithMarkerColorbarTitleFontLineposition string

const (
	// Flags
	ScattersmithMarkerColorbarTitleFontLinepositionUnder   ScattersmithMarkerColorbarTitleFontLineposition = "under"
	ScattersmithMarkerColorbarTitleFontLinepositionOver    ScattersmithMarkerColorbarTitleFontLineposition = "over"
	ScattersmithMarkerColorbarTitleFontLinepositionThrough ScattersmithMarkerColorbarTitleFontLineposition = "through"

	// Extra
	ScattersmithMarkerColorbarTitleFontLinepositionNone ScattersmithMarkerColorbarTitleFontLineposition = "none"
)

// ScattersmithMode Determines the drawing mode for this scatter trace. If the provided `mode` includes *text* then the `text` elements appear at the coordinates. Otherwise, the `text` elements appear on hover. If there are less than 20 points and the trace is not stacked then the default is *lines+markers*. Otherwise, *lines*.
type ScattersmithMode string

const (
	// Flags
	ScattersmithModeLines   ScattersmithMode = "lines"
	ScattersmithModeMarkers ScattersmithMode = "markers"
	ScattersmithModeText    ScattersmithMode = "text"

	// Extra
	ScattersmithModeNone ScattersmithMode = "none"
)

// ScattersmithTextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ScattersmithTextfontLineposition string

const (
	// Flags
	ScattersmithTextfontLinepositionUnder   ScattersmithTextfontLineposition = "under"
	ScattersmithTextfontLinepositionOver    ScattersmithTextfontLineposition = "over"
	ScattersmithTextfontLinepositionThrough ScattersmithTextfontLineposition = "through"

	// Extra
	ScattersmithTextfontLinepositionNone ScattersmithTextfontLineposition = "none"
)
