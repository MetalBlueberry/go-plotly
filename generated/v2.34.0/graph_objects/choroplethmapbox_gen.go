package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeChoroplethmapbox types.TraceType = "choroplethmapbox"

func (t *Choroplethmapbox) GetType() types.TraceType {
	return TraceTypeChoroplethmapbox
}

func (t *Choroplethmapbox) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Choroplethmapbox
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Choroplethmapbox GeoJSON features to be filled are set in `geojson` The data that describes the choropleth value-to-color mapping is set in `locations` and `z`.
type Choroplethmapbox struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Below
	// arrayOK: false
	// type: string
	// Determines if the choropleth polygons will be inserted before the layer with the specified ID. By default, choroplethmapbox traces are placed above the water layers. If set to '', the layer will be inserted above every existing layer.
	Below types.StringType `json:"below,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	Colorbar *ChoroplethmapboxColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	Customdatasrc types.StringType `json:"customdatasrc,omitempty"`

	// Featureidkey
	// arrayOK: false
	// type: string
	// Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Support nested property, for example *properties.name*.
	Featureidkey types.StringType `json:"featureidkey,omitempty"`

	// Geojson
	// arrayOK: false
	// type: any
	// Sets the GeoJSON data associated with this trace. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.
	Geojson interface{} `json:"geojson,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo *types.ArrayOK[*ChoroplethmapboxHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	Hoverinfosrc types.StringType `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	Hoverlabel *ChoroplethmapboxHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variable `properties` Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate *types.ArrayOK[*types.StringType] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	Hovertemplatesrc types.StringType `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: true
	// type: string
	// Same as `text`.
	Hovertext *types.ArrayOK[*types.StringType] `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	Hovertextsrc types.StringType `json:"hovertextsrc,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	Idssrc types.StringType `json:"idssrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	Legendgrouptitle *ChoroplethmapboxLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Locations
	// arrayOK: false
	// type: data_array
	// Sets which features found in *geojson* to plot using their feature `id` field.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Locations *types.DataArrayType `json:"locations,omitempty"`

	// Locationssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `locations`.
	Locationssrc types.StringType `json:"locationssrc,omitempty"`

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ChoroplethmapboxMarker `json:"marker,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	Name types.StringType `json:"name,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Selected
	// arrayOK: false
	// role: Object
	Selected *ChoroplethmapboxSelected `json:"selected,omitempty"`

	// Selectedpoints
	// arrayOK: false
	// type: any
	// Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
	Selectedpoints interface{} `json:"selectedpoints,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace.
	Showscale types.BoolType `json:"showscale,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	Stream *ChoroplethmapboxStream `json:"stream,omitempty"`

	// Subplot
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's data coordinates and a mapbox subplot. If *mapbox* (the default value), the data refer to `layout.mapbox`. If *mapbox2*, the data refer to `layout.mapbox2`, and so on.
	Subplot types.StringType `json:"subplot,omitempty"`

	// Text
	// arrayOK: true
	// type: string
	// Sets the text elements associated with each location.
	Text *types.ArrayOK[*types.StringType] `json:"text,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	Textsrc types.StringType `json:"textsrc,omitempty"`

	// Transforms
	// role: Object
	// items: ChoroplethmapboxTransform
	Transforms []ChoroplethmapboxTransform `json:"transforms,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	Uid types.StringType `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Unselected
	// arrayOK: false
	// role: Object
	Unselected *ChoroplethmapboxUnselected `json:"unselected,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible ChoroplethmapboxVisible `json:"visible,omitempty"`

	// Z
	// arrayOK: false
	// type: data_array
	// Sets the color values.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Z *types.DataArrayType `json:"z,omitempty"`

	// Zauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.
	Zauto types.BoolType `json:"zauto,omitempty"`

	// Zmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
	Zmax types.NumberType `json:"zmax,omitempty"`

	// Zmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
	Zmid types.NumberType `json:"zmid,omitempty"`

	// Zmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
	Zmin types.NumberType `json:"zmin,omitempty"`

	// Zsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `z`.
	Zsrc types.StringType `json:"zsrc,omitempty"`
}

// ChoroplethmapboxColorbarTickfont Sets the color bar's tick label font
type ChoroplethmapboxColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ChoroplethmapboxColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ChoroplethmapboxColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ChoroplethmapboxColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ChoroplethmapboxColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ChoroplethmapboxColorbarTickformatstop
type ChoroplethmapboxColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	Value types.StringType `json:"value,omitempty"`
}

// ChoroplethmapboxColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type ChoroplethmapboxColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ChoroplethmapboxColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ChoroplethmapboxColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ChoroplethmapboxColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ChoroplethmapboxColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ChoroplethmapboxColorbarTitle
type ChoroplethmapboxColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *ChoroplethmapboxColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ChoroplethmapboxColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text types.StringType `json:"text,omitempty"`
}

// ChoroplethmapboxColorbar
type ChoroplethmapboxColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ChoroplethmapboxColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ChoroplethmapboxColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	Orientation ChoroplethmapboxColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ChoroplethmapboxColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ChoroplethmapboxColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ChoroplethmapboxColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ChoroplethmapboxColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	Tickfont *ChoroplethmapboxColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: ChoroplethmapboxColorbarTickformatstop
	Tickformatstops []ChoroplethmapboxColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	Ticklabeloverflow ChoroplethmapboxColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	Ticklabelposition ChoroplethmapboxColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ChoroplethmapboxColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ChoroplethmapboxColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	Title *ChoroplethmapboxColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	Xanchor ChoroplethmapboxColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref ChoroplethmapboxColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	Yanchor ChoroplethmapboxColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref ChoroplethmapboxColorbarYref `json:"yref,omitempty"`
}

// ChoroplethmapboxHoverlabelFont Sets the font used in hover labels.
type ChoroplethmapboxHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*ChoroplethmapboxHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*ChoroplethmapboxHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*ChoroplethmapboxHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*ChoroplethmapboxHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// ChoroplethmapboxHoverlabel
type ChoroplethmapboxHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align *types.ArrayOK[*ChoroplethmapboxHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.StringType `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	Bordercolorsrc types.StringType `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *ChoroplethmapboxHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength *types.ArrayOK[*types.IntegerType] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	Namelengthsrc types.StringType `json:"namelengthsrc,omitempty"`
}

// ChoroplethmapboxLegendgrouptitleFont Sets this legend group's title font.
type ChoroplethmapboxLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ChoroplethmapboxLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ChoroplethmapboxLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ChoroplethmapboxLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ChoroplethmapboxLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ChoroplethmapboxLegendgrouptitle
type ChoroplethmapboxLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *ChoroplethmapboxLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text types.StringType `json:"text,omitempty"`
}

// ChoroplethmapboxMarkerLine
type ChoroplethmapboxMarkerLine struct {

	// Color
	// arrayOK: true
	// type: color
	// Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	// Sets the width (in px) of the lines bounding the marker points.
	Width *types.ArrayOK[*types.NumberType] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	Widthsrc types.StringType `json:"widthsrc,omitempty"`
}

// ChoroplethmapboxMarker
type ChoroplethmapboxMarker struct {

	// Line
	// arrayOK: false
	// role: Object
	Line *ChoroplethmapboxMarkerLine `json:"line,omitempty"`

	// Opacity
	// arrayOK: true
	// type: number
	// Sets the opacity of the locations.
	Opacity *types.ArrayOK[*types.NumberType] `json:"opacity,omitempty"`

	// Opacitysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `opacity`.
	Opacitysrc types.StringType `json:"opacitysrc,omitempty"`
}

// ChoroplethmapboxSelectedMarker
type ChoroplethmapboxSelectedMarker struct {

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of selected points.
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// ChoroplethmapboxSelected
type ChoroplethmapboxSelected struct {

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ChoroplethmapboxSelectedMarker `json:"marker,omitempty"`
}

// ChoroplethmapboxStream
type ChoroplethmapboxStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints types.NumberType `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token types.StringType `json:"token,omitempty"`
}

// ChoroplethmapboxTransform WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.
type ChoroplethmapboxTransform struct {
}

// ChoroplethmapboxUnselectedMarker
type ChoroplethmapboxUnselectedMarker struct {

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// ChoroplethmapboxUnselected
type ChoroplethmapboxUnselected struct {

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ChoroplethmapboxUnselectedMarker `json:"marker,omitempty"`
}

// ChoroplethmapboxColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type ChoroplethmapboxColorbarExponentformat string

const (
	ChoroplethmapboxColorbarExponentformatNone  ChoroplethmapboxColorbarExponentformat = "none"
	ChoroplethmapboxColorbarExponentformatE1    ChoroplethmapboxColorbarExponentformat = "e"
	ChoroplethmapboxColorbarExponentformatE2    ChoroplethmapboxColorbarExponentformat = "E"
	ChoroplethmapboxColorbarExponentformatPower ChoroplethmapboxColorbarExponentformat = "power"
	ChoroplethmapboxColorbarExponentformatSI    ChoroplethmapboxColorbarExponentformat = "SI"
	ChoroplethmapboxColorbarExponentformatB     ChoroplethmapboxColorbarExponentformat = "B"
)

// ChoroplethmapboxColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
type ChoroplethmapboxColorbarLenmode string

const (
	ChoroplethmapboxColorbarLenmodeFraction ChoroplethmapboxColorbarLenmode = "fraction"
	ChoroplethmapboxColorbarLenmodePixels   ChoroplethmapboxColorbarLenmode = "pixels"
)

// ChoroplethmapboxColorbarOrientation Sets the orientation of the colorbar.
type ChoroplethmapboxColorbarOrientation string

const (
	ChoroplethmapboxColorbarOrientationH ChoroplethmapboxColorbarOrientation = "h"
	ChoroplethmapboxColorbarOrientationV ChoroplethmapboxColorbarOrientation = "v"
)

// ChoroplethmapboxColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type ChoroplethmapboxColorbarShowexponent string

const (
	ChoroplethmapboxColorbarShowexponentAll   ChoroplethmapboxColorbarShowexponent = "all"
	ChoroplethmapboxColorbarShowexponentFirst ChoroplethmapboxColorbarShowexponent = "first"
	ChoroplethmapboxColorbarShowexponentLast  ChoroplethmapboxColorbarShowexponent = "last"
	ChoroplethmapboxColorbarShowexponentNone  ChoroplethmapboxColorbarShowexponent = "none"
)

// ChoroplethmapboxColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type ChoroplethmapboxColorbarShowtickprefix string

const (
	ChoroplethmapboxColorbarShowtickprefixAll   ChoroplethmapboxColorbarShowtickprefix = "all"
	ChoroplethmapboxColorbarShowtickprefixFirst ChoroplethmapboxColorbarShowtickprefix = "first"
	ChoroplethmapboxColorbarShowtickprefixLast  ChoroplethmapboxColorbarShowtickprefix = "last"
	ChoroplethmapboxColorbarShowtickprefixNone  ChoroplethmapboxColorbarShowtickprefix = "none"
)

// ChoroplethmapboxColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
type ChoroplethmapboxColorbarShowticksuffix string

const (
	ChoroplethmapboxColorbarShowticksuffixAll   ChoroplethmapboxColorbarShowticksuffix = "all"
	ChoroplethmapboxColorbarShowticksuffixFirst ChoroplethmapboxColorbarShowticksuffix = "first"
	ChoroplethmapboxColorbarShowticksuffixLast  ChoroplethmapboxColorbarShowticksuffix = "last"
	ChoroplethmapboxColorbarShowticksuffixNone  ChoroplethmapboxColorbarShowticksuffix = "none"
)

// ChoroplethmapboxColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
type ChoroplethmapboxColorbarThicknessmode string

const (
	ChoroplethmapboxColorbarThicknessmodeFraction ChoroplethmapboxColorbarThicknessmode = "fraction"
	ChoroplethmapboxColorbarThicknessmodePixels   ChoroplethmapboxColorbarThicknessmode = "pixels"
)

// ChoroplethmapboxColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethmapboxColorbarTickfontStyle string

const (
	ChoroplethmapboxColorbarTickfontStyleNormal ChoroplethmapboxColorbarTickfontStyle = "normal"
	ChoroplethmapboxColorbarTickfontStyleItalic ChoroplethmapboxColorbarTickfontStyle = "italic"
)

// ChoroplethmapboxColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethmapboxColorbarTickfontTextcase string

const (
	ChoroplethmapboxColorbarTickfontTextcaseNormal   ChoroplethmapboxColorbarTickfontTextcase = "normal"
	ChoroplethmapboxColorbarTickfontTextcaseWordCaps ChoroplethmapboxColorbarTickfontTextcase = "word caps"
	ChoroplethmapboxColorbarTickfontTextcaseUpper    ChoroplethmapboxColorbarTickfontTextcase = "upper"
	ChoroplethmapboxColorbarTickfontTextcaseLower    ChoroplethmapboxColorbarTickfontTextcase = "lower"
)

// ChoroplethmapboxColorbarTickfontVariant Sets the variant of the font.
type ChoroplethmapboxColorbarTickfontVariant string

const (
	ChoroplethmapboxColorbarTickfontVariantNormal        ChoroplethmapboxColorbarTickfontVariant = "normal"
	ChoroplethmapboxColorbarTickfontVariantSmallCaps     ChoroplethmapboxColorbarTickfontVariant = "small-caps"
	ChoroplethmapboxColorbarTickfontVariantAllSmallCaps  ChoroplethmapboxColorbarTickfontVariant = "all-small-caps"
	ChoroplethmapboxColorbarTickfontVariantAllPetiteCaps ChoroplethmapboxColorbarTickfontVariant = "all-petite-caps"
	ChoroplethmapboxColorbarTickfontVariantPetiteCaps    ChoroplethmapboxColorbarTickfontVariant = "petite-caps"
	ChoroplethmapboxColorbarTickfontVariantUnicase       ChoroplethmapboxColorbarTickfontVariant = "unicase"
)

// ChoroplethmapboxColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
type ChoroplethmapboxColorbarTicklabeloverflow string

const (
	ChoroplethmapboxColorbarTicklabeloverflowAllow          ChoroplethmapboxColorbarTicklabeloverflow = "allow"
	ChoroplethmapboxColorbarTicklabeloverflowHidePastDiv    ChoroplethmapboxColorbarTicklabeloverflow = "hide past div"
	ChoroplethmapboxColorbarTicklabeloverflowHidePastDomain ChoroplethmapboxColorbarTicklabeloverflow = "hide past domain"
)

// ChoroplethmapboxColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
type ChoroplethmapboxColorbarTicklabelposition string

const (
	ChoroplethmapboxColorbarTicklabelpositionOutside       ChoroplethmapboxColorbarTicklabelposition = "outside"
	ChoroplethmapboxColorbarTicklabelpositionInside        ChoroplethmapboxColorbarTicklabelposition = "inside"
	ChoroplethmapboxColorbarTicklabelpositionOutsideTop    ChoroplethmapboxColorbarTicklabelposition = "outside top"
	ChoroplethmapboxColorbarTicklabelpositionInsideTop     ChoroplethmapboxColorbarTicklabelposition = "inside top"
	ChoroplethmapboxColorbarTicklabelpositionOutsideLeft   ChoroplethmapboxColorbarTicklabelposition = "outside left"
	ChoroplethmapboxColorbarTicklabelpositionInsideLeft    ChoroplethmapboxColorbarTicklabelposition = "inside left"
	ChoroplethmapboxColorbarTicklabelpositionOutsideRight  ChoroplethmapboxColorbarTicklabelposition = "outside right"
	ChoroplethmapboxColorbarTicklabelpositionInsideRight   ChoroplethmapboxColorbarTicklabelposition = "inside right"
	ChoroplethmapboxColorbarTicklabelpositionOutsideBottom ChoroplethmapboxColorbarTicklabelposition = "outside bottom"
	ChoroplethmapboxColorbarTicklabelpositionInsideBottom  ChoroplethmapboxColorbarTicklabelposition = "inside bottom"
)

// ChoroplethmapboxColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type ChoroplethmapboxColorbarTickmode string

const (
	ChoroplethmapboxColorbarTickmodeAuto   ChoroplethmapboxColorbarTickmode = "auto"
	ChoroplethmapboxColorbarTickmodeLinear ChoroplethmapboxColorbarTickmode = "linear"
	ChoroplethmapboxColorbarTickmodeArray  ChoroplethmapboxColorbarTickmode = "array"
)

// ChoroplethmapboxColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type ChoroplethmapboxColorbarTicks string

const (
	ChoroplethmapboxColorbarTicksOutside ChoroplethmapboxColorbarTicks = "outside"
	ChoroplethmapboxColorbarTicksInside  ChoroplethmapboxColorbarTicks = "inside"
	ChoroplethmapboxColorbarTicksEmpty   ChoroplethmapboxColorbarTicks = ""
)

// ChoroplethmapboxColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethmapboxColorbarTitleFontStyle string

const (
	ChoroplethmapboxColorbarTitleFontStyleNormal ChoroplethmapboxColorbarTitleFontStyle = "normal"
	ChoroplethmapboxColorbarTitleFontStyleItalic ChoroplethmapboxColorbarTitleFontStyle = "italic"
)

// ChoroplethmapboxColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethmapboxColorbarTitleFontTextcase string

const (
	ChoroplethmapboxColorbarTitleFontTextcaseNormal   ChoroplethmapboxColorbarTitleFontTextcase = "normal"
	ChoroplethmapboxColorbarTitleFontTextcaseWordCaps ChoroplethmapboxColorbarTitleFontTextcase = "word caps"
	ChoroplethmapboxColorbarTitleFontTextcaseUpper    ChoroplethmapboxColorbarTitleFontTextcase = "upper"
	ChoroplethmapboxColorbarTitleFontTextcaseLower    ChoroplethmapboxColorbarTitleFontTextcase = "lower"
)

// ChoroplethmapboxColorbarTitleFontVariant Sets the variant of the font.
type ChoroplethmapboxColorbarTitleFontVariant string

const (
	ChoroplethmapboxColorbarTitleFontVariantNormal        ChoroplethmapboxColorbarTitleFontVariant = "normal"
	ChoroplethmapboxColorbarTitleFontVariantSmallCaps     ChoroplethmapboxColorbarTitleFontVariant = "small-caps"
	ChoroplethmapboxColorbarTitleFontVariantAllSmallCaps  ChoroplethmapboxColorbarTitleFontVariant = "all-small-caps"
	ChoroplethmapboxColorbarTitleFontVariantAllPetiteCaps ChoroplethmapboxColorbarTitleFontVariant = "all-petite-caps"
	ChoroplethmapboxColorbarTitleFontVariantPetiteCaps    ChoroplethmapboxColorbarTitleFontVariant = "petite-caps"
	ChoroplethmapboxColorbarTitleFontVariantUnicase       ChoroplethmapboxColorbarTitleFontVariant = "unicase"
)

// ChoroplethmapboxColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
type ChoroplethmapboxColorbarTitleSide string

const (
	ChoroplethmapboxColorbarTitleSideRight  ChoroplethmapboxColorbarTitleSide = "right"
	ChoroplethmapboxColorbarTitleSideTop    ChoroplethmapboxColorbarTitleSide = "top"
	ChoroplethmapboxColorbarTitleSideBottom ChoroplethmapboxColorbarTitleSide = "bottom"
)

// ChoroplethmapboxColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
type ChoroplethmapboxColorbarXanchor string

const (
	ChoroplethmapboxColorbarXanchorLeft   ChoroplethmapboxColorbarXanchor = "left"
	ChoroplethmapboxColorbarXanchorCenter ChoroplethmapboxColorbarXanchor = "center"
	ChoroplethmapboxColorbarXanchorRight  ChoroplethmapboxColorbarXanchor = "right"
)

// ChoroplethmapboxColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type ChoroplethmapboxColorbarXref string

const (
	ChoroplethmapboxColorbarXrefContainer ChoroplethmapboxColorbarXref = "container"
	ChoroplethmapboxColorbarXrefPaper     ChoroplethmapboxColorbarXref = "paper"
)

// ChoroplethmapboxColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
type ChoroplethmapboxColorbarYanchor string

const (
	ChoroplethmapboxColorbarYanchorTop    ChoroplethmapboxColorbarYanchor = "top"
	ChoroplethmapboxColorbarYanchorMiddle ChoroplethmapboxColorbarYanchor = "middle"
	ChoroplethmapboxColorbarYanchorBottom ChoroplethmapboxColorbarYanchor = "bottom"
)

// ChoroplethmapboxColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type ChoroplethmapboxColorbarYref string

const (
	ChoroplethmapboxColorbarYrefContainer ChoroplethmapboxColorbarYref = "container"
	ChoroplethmapboxColorbarYrefPaper     ChoroplethmapboxColorbarYref = "paper"
)

// ChoroplethmapboxHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type ChoroplethmapboxHoverlabelAlign string

const (
	ChoroplethmapboxHoverlabelAlignLeft  ChoroplethmapboxHoverlabelAlign = "left"
	ChoroplethmapboxHoverlabelAlignRight ChoroplethmapboxHoverlabelAlign = "right"
	ChoroplethmapboxHoverlabelAlignAuto  ChoroplethmapboxHoverlabelAlign = "auto"
)

// ChoroplethmapboxHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethmapboxHoverlabelFontStyle string

const (
	ChoroplethmapboxHoverlabelFontStyleNormal ChoroplethmapboxHoverlabelFontStyle = "normal"
	ChoroplethmapboxHoverlabelFontStyleItalic ChoroplethmapboxHoverlabelFontStyle = "italic"
)

// ChoroplethmapboxHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethmapboxHoverlabelFontTextcase string

const (
	ChoroplethmapboxHoverlabelFontTextcaseNormal   ChoroplethmapboxHoverlabelFontTextcase = "normal"
	ChoroplethmapboxHoverlabelFontTextcaseWordCaps ChoroplethmapboxHoverlabelFontTextcase = "word caps"
	ChoroplethmapboxHoverlabelFontTextcaseUpper    ChoroplethmapboxHoverlabelFontTextcase = "upper"
	ChoroplethmapboxHoverlabelFontTextcaseLower    ChoroplethmapboxHoverlabelFontTextcase = "lower"
)

// ChoroplethmapboxHoverlabelFontVariant Sets the variant of the font.
type ChoroplethmapboxHoverlabelFontVariant string

const (
	ChoroplethmapboxHoverlabelFontVariantNormal        ChoroplethmapboxHoverlabelFontVariant = "normal"
	ChoroplethmapboxHoverlabelFontVariantSmallCaps     ChoroplethmapboxHoverlabelFontVariant = "small-caps"
	ChoroplethmapboxHoverlabelFontVariantAllSmallCaps  ChoroplethmapboxHoverlabelFontVariant = "all-small-caps"
	ChoroplethmapboxHoverlabelFontVariantAllPetiteCaps ChoroplethmapboxHoverlabelFontVariant = "all-petite-caps"
	ChoroplethmapboxHoverlabelFontVariantPetiteCaps    ChoroplethmapboxHoverlabelFontVariant = "petite-caps"
	ChoroplethmapboxHoverlabelFontVariantUnicase       ChoroplethmapboxHoverlabelFontVariant = "unicase"
)

// ChoroplethmapboxLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethmapboxLegendgrouptitleFontStyle string

const (
	ChoroplethmapboxLegendgrouptitleFontStyleNormal ChoroplethmapboxLegendgrouptitleFontStyle = "normal"
	ChoroplethmapboxLegendgrouptitleFontStyleItalic ChoroplethmapboxLegendgrouptitleFontStyle = "italic"
)

// ChoroplethmapboxLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethmapboxLegendgrouptitleFontTextcase string

const (
	ChoroplethmapboxLegendgrouptitleFontTextcaseNormal   ChoroplethmapboxLegendgrouptitleFontTextcase = "normal"
	ChoroplethmapboxLegendgrouptitleFontTextcaseWordCaps ChoroplethmapboxLegendgrouptitleFontTextcase = "word caps"
	ChoroplethmapboxLegendgrouptitleFontTextcaseUpper    ChoroplethmapboxLegendgrouptitleFontTextcase = "upper"
	ChoroplethmapboxLegendgrouptitleFontTextcaseLower    ChoroplethmapboxLegendgrouptitleFontTextcase = "lower"
)

// ChoroplethmapboxLegendgrouptitleFontVariant Sets the variant of the font.
type ChoroplethmapboxLegendgrouptitleFontVariant string

const (
	ChoroplethmapboxLegendgrouptitleFontVariantNormal        ChoroplethmapboxLegendgrouptitleFontVariant = "normal"
	ChoroplethmapboxLegendgrouptitleFontVariantSmallCaps     ChoroplethmapboxLegendgrouptitleFontVariant = "small-caps"
	ChoroplethmapboxLegendgrouptitleFontVariantAllSmallCaps  ChoroplethmapboxLegendgrouptitleFontVariant = "all-small-caps"
	ChoroplethmapboxLegendgrouptitleFontVariantAllPetiteCaps ChoroplethmapboxLegendgrouptitleFontVariant = "all-petite-caps"
	ChoroplethmapboxLegendgrouptitleFontVariantPetiteCaps    ChoroplethmapboxLegendgrouptitleFontVariant = "petite-caps"
	ChoroplethmapboxLegendgrouptitleFontVariantUnicase       ChoroplethmapboxLegendgrouptitleFontVariant = "unicase"
)

// ChoroplethmapboxVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type ChoroplethmapboxVisible interface{}

var (
	ChoroplethmapboxVisibleTrue       ChoroplethmapboxVisible = true
	ChoroplethmapboxVisibleFalse      ChoroplethmapboxVisible = false
	ChoroplethmapboxVisibleLegendonly ChoroplethmapboxVisible = "legendonly"
)

// ChoroplethmapboxColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethmapboxColorbarTickfontLineposition string

const (
	// Flags
	ChoroplethmapboxColorbarTickfontLinepositionUnder   ChoroplethmapboxColorbarTickfontLineposition = "under"
	ChoroplethmapboxColorbarTickfontLinepositionOver    ChoroplethmapboxColorbarTickfontLineposition = "over"
	ChoroplethmapboxColorbarTickfontLinepositionThrough ChoroplethmapboxColorbarTickfontLineposition = "through"

	// Extra
	ChoroplethmapboxColorbarTickfontLinepositionNone ChoroplethmapboxColorbarTickfontLineposition = "none"
)

// ChoroplethmapboxColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethmapboxColorbarTitleFontLineposition string

const (
	// Flags
	ChoroplethmapboxColorbarTitleFontLinepositionUnder   ChoroplethmapboxColorbarTitleFontLineposition = "under"
	ChoroplethmapboxColorbarTitleFontLinepositionOver    ChoroplethmapboxColorbarTitleFontLineposition = "over"
	ChoroplethmapboxColorbarTitleFontLinepositionThrough ChoroplethmapboxColorbarTitleFontLineposition = "through"

	// Extra
	ChoroplethmapboxColorbarTitleFontLinepositionNone ChoroplethmapboxColorbarTitleFontLineposition = "none"
)

// ChoroplethmapboxHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
type ChoroplethmapboxHoverinfo string

const (
	// Flags
	ChoroplethmapboxHoverinfoLocation ChoroplethmapboxHoverinfo = "location"
	ChoroplethmapboxHoverinfoZ        ChoroplethmapboxHoverinfo = "z"
	ChoroplethmapboxHoverinfoText     ChoroplethmapboxHoverinfo = "text"
	ChoroplethmapboxHoverinfoName     ChoroplethmapboxHoverinfo = "name"

	// Extra
	ChoroplethmapboxHoverinfoAll  ChoroplethmapboxHoverinfo = "all"
	ChoroplethmapboxHoverinfoNone ChoroplethmapboxHoverinfo = "none"
	ChoroplethmapboxHoverinfoSkip ChoroplethmapboxHoverinfo = "skip"
)

// ChoroplethmapboxHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethmapboxHoverlabelFontLineposition string

const (
	// Flags
	ChoroplethmapboxHoverlabelFontLinepositionUnder   ChoroplethmapboxHoverlabelFontLineposition = "under"
	ChoroplethmapboxHoverlabelFontLinepositionOver    ChoroplethmapboxHoverlabelFontLineposition = "over"
	ChoroplethmapboxHoverlabelFontLinepositionThrough ChoroplethmapboxHoverlabelFontLineposition = "through"

	// Extra
	ChoroplethmapboxHoverlabelFontLinepositionNone ChoroplethmapboxHoverlabelFontLineposition = "none"
)

// ChoroplethmapboxLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethmapboxLegendgrouptitleFontLineposition string

const (
	// Flags
	ChoroplethmapboxLegendgrouptitleFontLinepositionUnder   ChoroplethmapboxLegendgrouptitleFontLineposition = "under"
	ChoroplethmapboxLegendgrouptitleFontLinepositionOver    ChoroplethmapboxLegendgrouptitleFontLineposition = "over"
	ChoroplethmapboxLegendgrouptitleFontLinepositionThrough ChoroplethmapboxLegendgrouptitleFontLineposition = "through"

	// Extra
	ChoroplethmapboxLegendgrouptitleFontLinepositionNone ChoroplethmapboxLegendgrouptitleFontLineposition = "none"
)
