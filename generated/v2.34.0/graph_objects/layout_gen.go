package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

// Layout Plot layout options
type Layout struct {

	// Activeselection
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.activeselection
	Activeselection *LayoutActiveselection `json:"activeselection,omitempty"`

	// Activeshape
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.activeshape
	Activeshape *LayoutActiveshape `json:"activeshape,omitempty"`

	// Annotations
	// role: Object
	// items: LayoutAnnotation
	// .schema.layout.layoutAttributes.annotations
	Annotations []LayoutAnnotation `json:"annotations,omitempty"`

	// Autosize
	// arrayOK: false
	// type: boolean
	// Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.
	// .schema.layout.layoutAttributes.autosize
	Autosize types.BoolType `json:"autosize,omitempty"`

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.
	// .schema.layout.layoutAttributes.autotypenumbers
	Autotypenumbers LayoutAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Barcornerradius
	// arrayOK: false
	// type: any
	// Sets the rounding of bar corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %).
	// .schema.traces.bar.layoutAttributes.barcornerradius
	Barcornerradius interface{} `json:"barcornerradius,omitempty"`

	// Bargap
	// arrayOK: false
	// type: number
	// Sets the gap between bars of adjacent location coordinates. Values are unitless, they represent fractions of the minimum difference in bar positions in the data.
	// .schema.traces.barpolar.layoutAttributes.bargap
	Bargap types.NumberType `json:"bargap,omitempty"`

	// Bargroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of the same location coordinate.
	// .schema.traces.histogram.layoutAttributes.bargroupgap
	Bargroupgap types.NumberType `json:"bargroupgap,omitempty"`

	// Barmode
	// arrayOK: false
	// default: group
	// type: enumerated
	// Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
	// .schema.traces.bar.layoutAttributes.barmode
	Barmode LayoutBarmode `json:"barmode,omitempty"`

	// Barnorm
	// arrayOK: false
	// default:
	// type: enumerated
	// Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divided by the sum of all values at that location coordinate. *percent* is the same but multiplied by 100 to show percentages.
	// .schema.traces.bar.layoutAttributes.barnorm
	Barnorm LayoutBarnorm `json:"barnorm,omitempty"`

	// Boxgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have *width* set.
	// .schema.traces.box.layoutAttributes.boxgap
	Boxgap types.NumberType `json:"boxgap,omitempty"`

	// Boxgroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have *width* set.
	// .schema.traces.candlestick.layoutAttributes.boxgroupgap
	Boxgroupgap types.NumberType `json:"boxgroupgap,omitempty"`

	// Boxmode
	// arrayOK: false
	// default: overlay
	// type: enumerated
	// Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes. Has no effect on traces that have *width* set.
	// .schema.traces.box.layoutAttributes.boxmode
	Boxmode LayoutBoxmode `json:"boxmode,omitempty"`

	// Calendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the default calendar system to use for interpreting and displaying dates throughout the plot.
	// .schema.layout.layoutAttributes.calendar
	Calendar LayoutCalendar `json:"calendar,omitempty"`

	// Clickmode
	// arrayOK: false
	// default: event
	// type: flaglist
	// Determines the mode of single click interactions. *event* is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes *lasso* and *select*, but with no event data attached (kept for compatibility reasons). The *select* flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. *select* with `hovermode`: *x* can be confusing, consider explicitly setting `hovermode`: *closest* when using this feature. Selection events are sent accordingly as long as *event* flag is set as well. When the *event* flag is missing, `plotly_click` and `plotly_selected` events are not fired.
	// .schema.layout.layoutAttributes.clickmode
	Clickmode LayoutClickmode `json:"clickmode,omitempty"`

	// Coloraxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.coloraxis
	Coloraxis *LayoutColoraxis `json:"coloraxis,omitempty"`

	// Colorscale
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.colorscale
	Colorscale *LayoutColorscale `json:"colorscale,omitempty"`

	// Colorway
	// arrayOK: false
	// type: colorlist
	// Sets the default trace colors.
	// .schema.layout.layoutAttributes.colorway
	Colorway *types.ColorList `json:"colorway,omitempty"`

	// Computed
	// arrayOK: false
	// type: any
	// Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in *full-json* mode.
	// .schema.layout.layoutAttributes.computed
	Computed interface{} `json:"computed,omitempty"`

	// Datarevision
	// arrayOK: false
	// type: any
	// If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.
	// .schema.layout.layoutAttributes.datarevision
	Datarevision interface{} `json:"datarevision,omitempty"`

	// Dragmode
	// arrayOK: false
	// default: zoom
	// type: enumerated
	// Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.
	// .schema.layout.layoutAttributes.dragmode
	Dragmode LayoutDragmode `json:"dragmode,omitempty"`

	// Editrevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.editrevision
	Editrevision interface{} `json:"editrevision,omitempty"`

	// Extendfunnelareacolors
	// arrayOK: false
	// type: boolean
	// If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	// .schema.traces.funnelarea.layoutAttributes.extendfunnelareacolors
	Extendfunnelareacolors types.BoolType `json:"extendfunnelareacolors,omitempty"`

	// Extendiciclecolors
	// arrayOK: false
	// type: boolean
	// If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	// .schema.traces.icicle.layoutAttributes.extendiciclecolors
	Extendiciclecolors types.BoolType `json:"extendiciclecolors,omitempty"`

	// Extendpiecolors
	// arrayOK: false
	// type: boolean
	// If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	// .schema.traces.pie.layoutAttributes.extendpiecolors
	Extendpiecolors types.BoolType `json:"extendpiecolors,omitempty"`

	// Extendsunburstcolors
	// arrayOK: false
	// type: boolean
	// If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	// .schema.traces.sunburst.layoutAttributes.extendsunburstcolors
	Extendsunburstcolors types.BoolType `json:"extendsunburstcolors,omitempty"`

	// Extendtreemapcolors
	// arrayOK: false
	// type: boolean
	// If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	// .schema.traces.treemap.layoutAttributes.extendtreemapcolors
	Extendtreemapcolors types.BoolType `json:"extendtreemapcolors,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.font
	Font *LayoutFont `json:"font,omitempty"`

	// Funnelareacolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.
	// .schema.traces.funnelarea.layoutAttributes.funnelareacolorway
	Funnelareacolorway *types.ColorList `json:"funnelareacolorway,omitempty"`

	// Funnelgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of adjacent location coordinates.
	// .schema.traces.funnel.layoutAttributes.funnelgap
	Funnelgap types.NumberType `json:"funnelgap,omitempty"`

	// Funnelgroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of the same location coordinate.
	// .schema.traces.funnel.layoutAttributes.funnelgroupgap
	Funnelgroupgap types.NumberType `json:"funnelgroupgap,omitempty"`

	// Funnelmode
	// arrayOK: false
	// default: stack
	// type: enumerated
	// Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
	// .schema.traces.funnel.layoutAttributes.funnelmode
	Funnelmode LayoutFunnelmode `json:"funnelmode,omitempty"`

	// Geo
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.geo
	Geo *LayoutGeo `json:"geo,omitempty"`

	// Grid
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.grid
	Grid *LayoutGrid `json:"grid,omitempty"`

	// Height
	// arrayOK: false
	// type: number
	// Sets the plot's height (in px).
	// .schema.layout.layoutAttributes.height
	Height types.NumberType `json:"height,omitempty"`

	// Hiddenlabels
	// arrayOK: false
	// type: data_array
	// hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.funnelarea.layoutAttributes.hiddenlabels
	Hiddenlabels *types.DataArrayType `json:"hiddenlabels,omitempty"`

	// Hiddenlabelssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hiddenlabels`.
	// .schema.traces.funnelarea.layoutAttributes.hiddenlabelssrc
	Hiddenlabelssrc types.StringType `json:"hiddenlabelssrc,omitempty"`

	// Hidesources
	// arrayOK: false
	// type: boolean
	// Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).
	// .schema.layout.layoutAttributes.hidesources
	Hidesources types.BoolType `json:"hidesources,omitempty"`

	// Hoverdistance
	// arrayOK: false
	// type: integer
	// Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.
	// .schema.layout.layoutAttributes.hoverdistance
	Hoverdistance types.IntegerType `json:"hoverdistance,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.hoverlabel
	Hoverlabel *LayoutHoverlabel `json:"hoverlabel,omitempty"`

	// Hovermode
	// arrayOK: false
	// default: closest
	// type: enumerated
	// Determines the mode of hover interactions. If *closest*, a single hoverlabel will appear for the *closest* point within the `hoverdistance`. If *x* (or *y*), multiple hoverlabels will appear for multiple points at the *closest* x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If *x unified* (or *y unified*), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.
	// .schema.layout.layoutAttributes.hovermode
	Hovermode LayoutHovermode `json:"hovermode,omitempty"`

	// Hoversubplots
	// arrayOK: false
	// default: overlaying
	// type: enumerated
	// Determines expansion of hover effects to other subplots If *single* just the axis pair of the primary point is included without overlaying subplots. If *overlaying* all subplots using the main axis and occupying the same space are included. If *axis*, also include stacked subplots using the same axis when `hovermode` is set to *x*, *x unified*, *y* or *y unified*.
	// .schema.layout.layoutAttributes.hoversubplots
	Hoversubplots LayoutHoversubplots `json:"hoversubplots,omitempty"`

	// Iciclecolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.
	// .schema.traces.icicle.layoutAttributes.iciclecolorway
	Iciclecolorway *types.ColorList `json:"iciclecolorway,omitempty"`

	// Images
	// role: Object
	// items: LayoutImage
	// .schema.layout.layoutAttributes.images
	Images []LayoutImage `json:"images,omitempty"`

	// Legend
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.legend
	Legend *LayoutLegend `json:"legend,omitempty"`

	// Mapbox
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox
	Mapbox *LayoutMapbox `json:"mapbox,omitempty"`

	// Margin
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.margin
	Margin *LayoutMargin `json:"margin,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.
	// .schema.layout.layoutAttributes.meta
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	// .schema.layout.layoutAttributes.metasrc
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Minreducedheight
	// arrayOK: false
	// type: number
	// Minimum height of the plot with margin.automargin applied (in px)
	// .schema.layout.layoutAttributes.minreducedheight
	Minreducedheight types.NumberType `json:"minreducedheight,omitempty"`

	// Minreducedwidth
	// arrayOK: false
	// type: number
	// Minimum width of the plot with margin.automargin applied (in px)
	// .schema.layout.layoutAttributes.minreducedwidth
	Minreducedwidth types.NumberType `json:"minreducedwidth,omitempty"`

	// Modebar
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.modebar
	Modebar *LayoutModebar `json:"modebar,omitempty"`

	// Newselection
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newselection
	Newselection *LayoutNewselection `json:"newselection,omitempty"`

	// Newshape
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newshape
	Newshape *LayoutNewshape `json:"newshape,omitempty"`

	// PaperBgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the paper where the graph is drawn.
	// .schema.layout.layoutAttributes.paper_bgcolor
	PaperBgcolor types.Color `json:"paper_bgcolor,omitempty"`

	// Piecolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.
	// .schema.traces.pie.layoutAttributes.piecolorway
	Piecolorway *types.ColorList `json:"piecolorway,omitempty"`

	// PlotBgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the plotting area in-between x and y axes.
	// .schema.layout.layoutAttributes.plot_bgcolor
	PlotBgcolor types.Color `json:"plot_bgcolor,omitempty"`

	// Polar
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar
	Polar *LayoutPolar `json:"polar,omitempty"`

	// Scattergap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between scatter points of adjacent location coordinates. Defaults to `bargap`.
	// .schema.traces.scatter.layoutAttributes.scattergap
	Scattergap types.NumberType `json:"scattergap,omitempty"`

	// Scattermode
	// arrayOK: false
	// default: overlay
	// type: enumerated
	// Determines how scatter points at the same location coordinate are displayed on the graph. With *group*, the scatter points are plotted next to one another centered around the shared location. With *overlay*, the scatter points are plotted over one another, you might need to reduce *opacity* to see multiple scatter points.
	// .schema.traces.scatter.layoutAttributes.scattermode
	Scattermode LayoutScattermode `json:"scattermode,omitempty"`

	// Scene
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene
	Scene *LayoutScene `json:"scene,omitempty"`

	// Selectdirection
	// arrayOK: false
	// default: any
	// type: enumerated
	// When `dragmode` is set to *select*, this limits the selection of the drag to horizontal, vertical or diagonal. *h* only allows horizontal selection, *v* only vertical, *d* only diagonal and *any* sets no limit.
	// .schema.layout.layoutAttributes.selectdirection
	Selectdirection LayoutSelectdirection `json:"selectdirection,omitempty"`

	// Selectionrevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in selected points from all traces.
	// .schema.layout.layoutAttributes.selectionrevision
	Selectionrevision interface{} `json:"selectionrevision,omitempty"`

	// Selections
	// role: Object
	// items: LayoutSelection
	// .schema.layout.layoutAttributes.selections
	Selections []LayoutSelection `json:"selections,omitempty"`

	// Separators
	// arrayOK: false
	// type: string
	// Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands. In English locales, dflt is *.,* but other locales may alter this default.
	// .schema.layout.layoutAttributes.separators
	Separators types.StringType `json:"separators,omitempty"`

	// Shapes
	// role: Object
	// items: LayoutShape
	// .schema.layout.layoutAttributes.shapes
	Shapes []LayoutShape `json:"shapes,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.
	// .schema.layout.layoutAttributes.showlegend
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Sliders
	// role: Object
	// items: LayoutSlider
	// .schema.layout.layoutAttributes.sliders
	Sliders []LayoutSlider `json:"sliders,omitempty"`

	// Smith
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.smith
	Smith *LayoutSmith `json:"smith,omitempty"`

	// Spikedistance
	// arrayOK: false
	// type: integer
	// Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.
	// .schema.layout.layoutAttributes.spikedistance
	Spikedistance types.IntegerType `json:"spikedistance,omitempty"`

	// Sunburstcolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default sunburst slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendsunburstcolors`.
	// .schema.traces.sunburst.layoutAttributes.sunburstcolorway
	Sunburstcolorway *types.ColorList `json:"sunburstcolorway,omitempty"`

	// Template
	// arrayOK: false
	// type: any
	// Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace.  Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.
	// .schema.layout.layoutAttributes.template
	Template interface{} `json:"template,omitempty"`

	// Ternary
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary
	Ternary *LayoutTernary `json:"ternary,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.title
	Title *LayoutTitle `json:"title,omitempty"`

	// Transition
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.transition
	Transition *LayoutTransition `json:"transition,omitempty"`

	// Treemapcolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.
	// .schema.traces.treemap.layoutAttributes.treemapcolorway
	Treemapcolorway *types.ColorList `json:"treemapcolorway,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision=*time*` and `yaxis.uirevision=*cost*`. Then if only the y data is changed, you can update `yaxis.uirevision=*quantity*` and the y axis range will reset but the x axis range will retain any user-driven zoom.
	// .schema.layout.layoutAttributes.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Uniformtext
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.uniformtext
	Uniformtext *LayoutUniformtext `json:"uniformtext,omitempty"`

	// Updatemenus
	// role: Object
	// items: LayoutUpdatemenu
	// .schema.layout.layoutAttributes.updatemenus
	Updatemenus []LayoutUpdatemenu `json:"updatemenus,omitempty"`

	// Violingap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between violins of adjacent location coordinates. Has no effect on traces that have *width* set.
	// .schema.traces.violin.layoutAttributes.violingap
	Violingap types.NumberType `json:"violingap,omitempty"`

	// Violingroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have *width* set.
	// .schema.traces.violin.layoutAttributes.violingroupgap
	Violingroupgap types.NumberType `json:"violingroupgap,omitempty"`

	// Violinmode
	// arrayOK: false
	// default: overlay
	// type: enumerated
	// Determines how violins at the same location coordinate are displayed on the graph. If *group*, the violins are plotted next to one another centered around the shared location. If *overlay*, the violins are plotted over one another, you might need to set *opacity* to see them multiple violins. Has no effect on traces that have *width* set.
	// .schema.traces.violin.layoutAttributes.violinmode
	Violinmode LayoutViolinmode `json:"violinmode,omitempty"`

	// Waterfallgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of adjacent location coordinates.
	// .schema.traces.waterfall.layoutAttributes.waterfallgap
	Waterfallgap types.NumberType `json:"waterfallgap,omitempty"`

	// Waterfallgroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of the same location coordinate.
	// .schema.traces.waterfall.layoutAttributes.waterfallgroupgap
	Waterfallgroupgap types.NumberType `json:"waterfallgroupgap,omitempty"`

	// Waterfallmode
	// arrayOK: false
	// default: group
	// type: enumerated
	// Determines how bars at the same location coordinate are displayed on the graph. With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
	// .schema.traces.waterfall.layoutAttributes.waterfallmode
	Waterfallmode LayoutWaterfallmode `json:"waterfallmode,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the plot's width (in px).
	// .schema.layout.layoutAttributes.width
	Width types.NumberType `json:"width,omitempty"`

	// Xaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis
	Xaxis *LayoutXaxis `json:"xaxis,omitempty"`

	// Yaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.yaxis
	Yaxis *LayoutYaxis `json:"yaxis,omitempty"`

	// XAxis2
	// X Axis number 2
	//
	XAxis2 *LayoutXaxis `json:"xaxis2,omitempty"`

	// XAxis3
	// X Axis number 3
	//
	XAxis3 *LayoutXaxis `json:"xaxis3,omitempty"`

	// XAxis4
	// X Axis number 4
	//
	XAxis4 *LayoutXaxis `json:"xaxis4,omitempty"`

	// XAxis5
	// X Axis number 5
	//
	XAxis5 *LayoutXaxis `json:"xaxis5,omitempty"`

	// XAxis6
	// X Axis number 6
	//
	XAxis6 *LayoutXaxis `json:"xaxis6,omitempty"`

	// YAxis2
	// Y Axis number 2
	//
	YAxis2 *LayoutYaxis `json:"yaxis2,omitempty"`

	// YAxis3
	// Y Axis number 3
	//
	YAxis3 *LayoutYaxis `json:"yaxis3,omitempty"`

	// YAxis4
	// Y Axis number 4
	//
	YAxis4 *LayoutYaxis `json:"yaxis4,omitempty"`

	// YAxis5
	// Y Axis number 5
	//
	YAxis5 *LayoutYaxis `json:"yaxis5,omitempty"`

	// YAxis6
	// Y Axis number 6
	//
	YAxis6 *LayoutYaxis `json:"yaxis6,omitempty"`
}

// LayoutActiveselection
type LayoutActiveselection struct {

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the color filling the active selection' interior.
	// .schema.layout.layoutAttributes.activeselection.fillcolor
	Fillcolor types.Color `json:"fillcolor,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the active selection.
	// .schema.layout.layoutAttributes.activeselection.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// LayoutActiveshape
type LayoutActiveshape struct {

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the color filling the active shape' interior.
	// .schema.layout.layoutAttributes.activeshape.fillcolor
	Fillcolor types.Color `json:"fillcolor,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the active shape.
	// .schema.layout.layoutAttributes.activeshape.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// AnnotationFont Sets the annotation text font.
type AnnotationFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.lineposition
	Lineposition AnnotationFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.style
	Style AnnotationFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.textcase
	Textcase AnnotationFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.variant
	Variant AnnotationFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.annotations.items.annotation.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// AnnotationHoverlabelFont Sets the hover label text font. By default uses the global hover font and size, with color from `hoverlabel.bordercolor`.
type AnnotationHoverlabelFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.lineposition
	Lineposition AnnotationHoverlabelFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.style
	Style AnnotationHoverlabelFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.textcase
	Textcase AnnotationHoverlabelFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.variant
	Variant AnnotationHoverlabelFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// AnnotationHoverlabel
type AnnotationHoverlabel struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the hover label. By default uses the annotation's `bgcolor` made opaque, or white if it was transparent.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the border color of the hover label. By default uses either dark grey or white, for maximum contrast with `hoverlabel.bgcolor`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font
	Font *AnnotationHoverlabelFont `json:"font,omitempty"`
}

// LayoutAnnotation
type LayoutAnnotation struct {

	// Align
	// arrayOK: false
	// default: center
	// type: enumerated
	// Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
	// .schema.layout.layoutAttributes.annotations.items.annotation.align
	Align AnnotationAlign `json:"align,omitempty"`

	// Arrowcolor
	// arrayOK: false
	// type: color
	// Sets the color of the annotation arrow.
	// .schema.layout.layoutAttributes.annotations.items.annotation.arrowcolor
	Arrowcolor types.Color `json:"arrowcolor,omitempty"`

	// Arrowhead
	// arrayOK: false
	// type: integer
	// Sets the end annotation arrow head style.
	// .schema.layout.layoutAttributes.annotations.items.annotation.arrowhead
	Arrowhead types.IntegerType `json:"arrowhead,omitempty"`

	// Arrowside
	// arrayOK: false
	// default: end
	// type: flaglist
	// Sets the annotation arrow head position.
	// .schema.layout.layoutAttributes.annotations.items.annotation.arrowside
	Arrowside AnnotationArrowside `json:"arrowside,omitempty"`

	// Arrowsize
	// arrayOK: false
	// type: number
	// Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
	// .schema.layout.layoutAttributes.annotations.items.annotation.arrowsize
	Arrowsize types.NumberType `json:"arrowsize,omitempty"`

	// Arrowwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of annotation arrow line.
	// .schema.layout.layoutAttributes.annotations.items.annotation.arrowwidth
	Arrowwidth types.NumberType `json:"arrowwidth,omitempty"`

	// Ax
	// arrayOK: false
	// type: any
	// Sets the x component of the arrow tail about the arrow head. If `axref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from right to left (left to right). If `axref` is not `pixel` and is exactly the same as `xref`, this is an absolute value on that axis, like `x`, specified in the same coordinates as `xref`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.ax
	Ax interface{} `json:"ax,omitempty"`

	// Axref
	// arrayOK: false
	// default: pixel
	// type: enumerated
	// Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. In order for absolute positioning of the arrow to work, *axref* must be exactly the same as *xref*, otherwise *axref* will revert to *pixel* (explained next). For relative positioning, *axref* can be set to *pixel*, in which case the *ax* value is specified in pixels relative to *x*. Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.
	// .schema.layout.layoutAttributes.annotations.items.annotation.axref
	Axref AnnotationAxref `json:"axref,omitempty"`

	// Ay
	// arrayOK: false
	// type: any
	// Sets the y component of the arrow tail about the arrow head. If `ayref` is `pixel`, a positive (negative) component corresponds to an arrow pointing from bottom to top (top to bottom). If `ayref` is not `pixel` and is exactly the same as `yref`, this is an absolute value on that axis, like `y`, specified in the same coordinates as `yref`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.ay
	Ay interface{} `json:"ay,omitempty"`

	// Ayref
	// arrayOK: false
	// default: pixel
	// type: enumerated
	// Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis. In order for absolute positioning of the arrow to work, *ayref* must be exactly the same as *yref*, otherwise *ayref* will revert to *pixel* (explained next). For relative positioning, *ayref* can be set to *pixel*, in which case the *ay* value is specified in pixels relative to *y*. Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.
	// .schema.layout.layoutAttributes.annotations.items.annotation.ayref
	Ayref AnnotationAyref `json:"ayref,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the annotation.
	// .schema.layout.layoutAttributes.annotations.items.annotation.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the annotation `text`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderpad
	// arrayOK: false
	// type: number
	// Sets the padding (in px) between the `text` and the enclosing border.
	// .schema.layout.layoutAttributes.annotations.items.annotation.borderpad
	Borderpad types.NumberType `json:"borderpad,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the annotation `text`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Captureevents
	// arrayOK: false
	// type: boolean
	// Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.captureevents
	Captureevents types.BoolType `json:"captureevents,omitempty"`

	// Clicktoshow
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the `x` and `y` values of this annotation, and it is hidden (visible: false), it will appear. In *onoff* mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In *onout* mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different `x` or `y` values, you can set `xclick` and/or `yclick`. This is useful for example to label the side of a bar. To label markers though, `standoff` is preferred over `xclick` and `yclick`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.clicktoshow
	Clicktoshow AnnotationClicktoshow `json:"clicktoshow,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.annotations.items.annotation.font
	Font *AnnotationFont `json:"font,omitempty"`

	// Height
	// arrayOK: false
	// type: number
	// Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.
	// .schema.layout.layoutAttributes.annotations.items.annotation.height
	Height types.NumberType `json:"height,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel
	Hoverlabel *AnnotationHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertext
	// arrayOK: false
	// type: string
	// Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.
	// .schema.layout.layoutAttributes.annotations.items.annotation.hovertext
	Hovertext types.StringType `json:"hovertext,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.annotations.items.annotation.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the annotation (text + arrow).
	// .schema.layout.layoutAttributes.annotations.items.annotation.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Showarrow
	// arrayOK: false
	// type: boolean
	// Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.
	// .schema.layout.layoutAttributes.annotations.items.annotation.showarrow
	Showarrow types.BoolType `json:"showarrow,omitempty"`

	// Standoff
	// arrayOK: false
	// type: number
	// Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
	// .schema.layout.layoutAttributes.annotations.items.annotation.standoff
	Standoff types.NumberType `json:"standoff,omitempty"`

	// Startarrowhead
	// arrayOK: false
	// type: integer
	// Sets the start annotation arrow head style.
	// .schema.layout.layoutAttributes.annotations.items.annotation.startarrowhead
	Startarrowhead types.IntegerType `json:"startarrowhead,omitempty"`

	// Startarrowsize
	// arrayOK: false
	// type: number
	// Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
	// .schema.layout.layoutAttributes.annotations.items.annotation.startarrowsize
	Startarrowsize types.NumberType `json:"startarrowsize,omitempty"`

	// Startstandoff
	// arrayOK: false
	// type: number
	// Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
	// .schema.layout.layoutAttributes.annotations.items.annotation.startstandoff
	Startstandoff types.NumberType `json:"startstandoff,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.annotations.items.annotation.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u> <span> are also supported.
	// .schema.layout.layoutAttributes.annotations.items.annotation.text
	Text types.StringType `json:"text,omitempty"`

	// Textangle
	// arrayOK: false
	// type: angle
	// Sets the angle at which the `text` is drawn with respect to the horizontal.
	// .schema.layout.layoutAttributes.annotations.items.annotation.textangle
	Textangle types.NumberType `json:"textangle,omitempty"`

	// Valign
	// arrayOK: false
	// default: middle
	// type: enumerated
	// Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.
	// .schema.layout.layoutAttributes.annotations.items.annotation.valign
	Valign AnnotationValign `json:"valign,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this annotation is visible.
	// .schema.layout.layoutAttributes.annotations.items.annotation.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.
	// .schema.layout.layoutAttributes.annotations.items.annotation.width
	Width types.NumberType `json:"width,omitempty"`

	// X
	// arrayOK: false
	// type: any
	// Sets the annotation's x position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.annotations.items.annotation.x
	X interface{} `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
	// .schema.layout.layoutAttributes.annotations.items.annotation.xanchor
	Xanchor AnnotationXanchor `json:"xanchor,omitempty"`

	// Xclick
	// arrayOK: false
	// type: any
	// Toggle this annotation when clicking a data point whose `x` value is `xclick` rather than the annotation's `x` value.
	// .schema.layout.layoutAttributes.annotations.items.annotation.xclick
	Xclick interface{} `json:"xclick,omitempty"`

	// Xref
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the annotation's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
	// .schema.layout.layoutAttributes.annotations.items.annotation.xref
	Xref AnnotationXref `json:"xref,omitempty"`

	// Xshift
	// arrayOK: false
	// type: number
	// Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.
	// .schema.layout.layoutAttributes.annotations.items.annotation.xshift
	Xshift types.NumberType `json:"xshift,omitempty"`

	// Y
	// arrayOK: false
	// type: any
	// Sets the annotation's y position. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.annotations.items.annotation.y
	Y interface{} `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
	// .schema.layout.layoutAttributes.annotations.items.annotation.yanchor
	Yanchor AnnotationYanchor `json:"yanchor,omitempty"`

	// Yclick
	// arrayOK: false
	// type: any
	// Toggle this annotation when clicking a data point whose `y` value is `yclick` rather than the annotation's `y` value.
	// .schema.layout.layoutAttributes.annotations.items.annotation.yclick
	Yclick interface{} `json:"yclick,omitempty"`

	// Yref
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the annotation's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
	// .schema.layout.layoutAttributes.annotations.items.annotation.yref
	Yref AnnotationYref `json:"yref,omitempty"`

	// Yshift
	// arrayOK: false
	// type: number
	// Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.
	// .schema.layout.layoutAttributes.annotations.items.annotation.yshift
	Yshift types.NumberType `json:"yshift,omitempty"`
}

// LayoutColoraxisColorbarTickfont Sets the color bar's tick label font
type LayoutColoraxisColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.lineposition
	Lineposition LayoutColoraxisColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.style
	Style LayoutColoraxisColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.textcase
	Textcase LayoutColoraxisColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.variant
	Variant LayoutColoraxisColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutColoraxisColorbarTickformatstop
type LayoutColoraxisColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutColoraxisColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type LayoutColoraxisColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.lineposition
	Lineposition LayoutColoraxisColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.style
	Style LayoutColoraxisColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.textcase
	Textcase LayoutColoraxisColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.variant
	Variant LayoutColoraxisColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutColoraxisColorbarTitle
type LayoutColoraxisColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font
	Font *LayoutColoraxisColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.side
	Side LayoutColoraxisColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutColoraxisColorbar
type LayoutColoraxisColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.coloraxis.colorbar.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.exponentformat
	Exponentformat LayoutColoraxisColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.len
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.lenmode
	Lenmode LayoutColoraxisColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.orientation
	Orientation LayoutColoraxisColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.outlinecolor
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.outlinewidth
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.coloraxis.colorbar.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.showexponent
	Showexponent LayoutColoraxisColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.showtickprefix
	Showtickprefix LayoutColoraxisColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.showticksuffix
	Showticksuffix LayoutColoraxisColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.thickness
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.thicknessmode
	Thicknessmode LayoutColoraxisColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont
	Tickfont *LayoutColoraxisColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutColoraxisColorbarTickformatstop
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickformatstops
	Tickformatstops []LayoutColoraxisColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticklabeloverflow
	Ticklabeloverflow LayoutColoraxisColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticklabelposition
	Ticklabelposition LayoutColoraxisColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickmode
	Tickmode LayoutColoraxisColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticks
	Ticks LayoutColoraxisColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.coloraxis.colorbar.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.coloraxis.colorbar.title
	Title *LayoutColoraxisColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.xanchor
	Xanchor LayoutColoraxisColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.xpad
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.xref
	Xref LayoutColoraxisColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.yanchor
	Yanchor LayoutColoraxisColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.ypad
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	// .schema.layout.layoutAttributes.coloraxis.colorbar.yref
	Yref LayoutColoraxisColorbarYref `json:"yref,omitempty"`
}

// LayoutColoraxis
type LayoutColoraxis struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	// .schema.layout.layoutAttributes.coloraxis.autocolorscale
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.
	// .schema.layout.layoutAttributes.coloraxis.cauto
	Cauto types.BoolType `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.
	// .schema.layout.layoutAttributes.coloraxis.cmax
	Cmax types.NumberType `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.
	// .schema.layout.layoutAttributes.coloraxis.cmid
	Cmid types.NumberType `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.
	// .schema.layout.layoutAttributes.coloraxis.cmin
	Cmin types.NumberType `json:"cmin,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.coloraxis.colorbar
	Colorbar *LayoutColoraxisColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	// .schema.layout.layoutAttributes.coloraxis.colorscale
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
	// .schema.layout.layoutAttributes.coloraxis.reversescale
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace.
	// .schema.layout.layoutAttributes.coloraxis.showscale
	Showscale types.BoolType `json:"showscale,omitempty"`
}

// LayoutColorscale
type LayoutColorscale struct {

	// Diverging
	// arrayOK: false
	// type: colorscale
	// Sets the default diverging colorscale. Note that `autocolorscale` must be true for this attribute to work.
	// .schema.layout.layoutAttributes.colorscale.diverging
	Diverging *types.ColorScale `json:"diverging,omitempty"`

	// Sequential
	// arrayOK: false
	// type: colorscale
	// Sets the default sequential colorscale for positive values. Note that `autocolorscale` must be true for this attribute to work.
	// .schema.layout.layoutAttributes.colorscale.sequential
	Sequential *types.ColorScale `json:"sequential,omitempty"`

	// Sequentialminus
	// arrayOK: false
	// type: colorscale
	// Sets the default sequential colorscale for negative values. Note that `autocolorscale` must be true for this attribute to work.
	// .schema.layout.layoutAttributes.colorscale.sequentialminus
	Sequentialminus *types.ColorScale `json:"sequentialminus,omitempty"`
}

// LayoutFont Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.
type LayoutFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.font.lineposition
	Lineposition LayoutFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.font.style
	Style LayoutFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.font.textcase
	Textcase LayoutFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.font.variant
	Variant LayoutFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutGeoCenter
type LayoutGeoCenter struct {

	// Lat
	// arrayOK: false
	// type: number
	// Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.
	// .schema.layout.layoutAttributes.geo.center.lat
	Lat types.NumberType `json:"lat,omitempty"`

	// Lon
	// arrayOK: false
	// type: number
	// Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise.
	// .schema.layout.layoutAttributes.geo.center.lon
	Lon types.NumberType `json:"lon,omitempty"`
}

// LayoutGeoDomain
type LayoutGeoDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	// .schema.layout.layoutAttributes.geo.domain.column
	Column types.IntegerType `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	// .schema.layout.layoutAttributes.geo.domain.row
	Row types.IntegerType `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	// .schema.layout.layoutAttributes.geo.domain.x
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	// .schema.layout.layoutAttributes.geo.domain.y
	Y interface{} `json:"y,omitempty"`
}

// LayoutGeoLataxis
type LayoutGeoLataxis struct {

	// Dtick
	// arrayOK: false
	// type: number
	// Sets the graticule's longitude/latitude tick step.
	// .schema.layout.layoutAttributes.geo.lataxis.dtick
	Dtick types.NumberType `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the graticule's stroke color.
	// .schema.layout.layoutAttributes.geo.lataxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.geo.lataxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the graticule's stroke width (in px).
	// .schema.layout.layoutAttributes.geo.lataxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis (in degrees), sets the map's clipped coordinates.
	// .schema.layout.layoutAttributes.geo.lataxis.range
	Range interface{} `json:"range,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Sets whether or not graticule are shown on the map.
	// .schema.layout.layoutAttributes.geo.lataxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: number
	// Sets the graticule's starting tick longitude/latitude.
	// .schema.layout.layoutAttributes.geo.lataxis.tick0
	Tick0 types.NumberType `json:"tick0,omitempty"`
}

// LayoutGeoLonaxis
type LayoutGeoLonaxis struct {

	// Dtick
	// arrayOK: false
	// type: number
	// Sets the graticule's longitude/latitude tick step.
	// .schema.layout.layoutAttributes.geo.lonaxis.dtick
	Dtick types.NumberType `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the graticule's stroke color.
	// .schema.layout.layoutAttributes.geo.lonaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.geo.lonaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the graticule's stroke width (in px).
	// .schema.layout.layoutAttributes.geo.lonaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis (in degrees), sets the map's clipped coordinates.
	// .schema.layout.layoutAttributes.geo.lonaxis.range
	Range interface{} `json:"range,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Sets whether or not graticule are shown on the map.
	// .schema.layout.layoutAttributes.geo.lonaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: number
	// Sets the graticule's starting tick longitude/latitude.
	// .schema.layout.layoutAttributes.geo.lonaxis.tick0
	Tick0 types.NumberType `json:"tick0,omitempty"`
}

// LayoutGeoProjectionRotation
type LayoutGeoProjectionRotation struct {

	// Lat
	// arrayOK: false
	// type: number
	// Rotates the map along meridians (in degrees North).
	// .schema.layout.layoutAttributes.geo.projection.rotation.lat
	Lat types.NumberType `json:"lat,omitempty"`

	// Lon
	// arrayOK: false
	// type: number
	// Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.
	// .schema.layout.layoutAttributes.geo.projection.rotation.lon
	Lon types.NumberType `json:"lon,omitempty"`

	// Roll
	// arrayOK: false
	// type: number
	// Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down.
	// .schema.layout.layoutAttributes.geo.projection.rotation.roll
	Roll types.NumberType `json:"roll,omitempty"`
}

// LayoutGeoProjection
type LayoutGeoProjection struct {

	// Distance
	// arrayOK: false
	// type: number
	// For satellite projection type only. Sets the distance from the center of the sphere to the point of view as a proportion of the sphere’s radius.
	// .schema.layout.layoutAttributes.geo.projection.distance
	Distance types.NumberType `json:"distance,omitempty"`

	// Parallels
	// arrayOK: false
	// type: info_array
	// For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.
	// .schema.layout.layoutAttributes.geo.projection.parallels
	Parallels interface{} `json:"parallels,omitempty"`

	// Rotation
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.geo.projection.rotation
	Rotation *LayoutGeoProjectionRotation `json:"rotation,omitempty"`

	// Scale
	// arrayOK: false
	// type: number
	// Zooms in or out on the map view. A scale of *1* corresponds to the largest zoom level that fits the map's lon and lat ranges.
	// .schema.layout.layoutAttributes.geo.projection.scale
	Scale types.NumberType `json:"scale,omitempty"`

	// Tilt
	// arrayOK: false
	// type: number
	// For satellite projection type only. Sets the tilt angle of perspective projection.
	// .schema.layout.layoutAttributes.geo.projection.tilt
	Tilt types.NumberType `json:"tilt,omitempty"`

	// Type
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the projection type.
	// .schema.layout.layoutAttributes.geo.projection.type
	Type LayoutGeoProjectionType `json:"type,omitempty"`
}

// LayoutGeo
type LayoutGeo struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the map
	// .schema.layout.layoutAttributes.geo.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Center
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.geo.center
	Center *LayoutGeoCenter `json:"center,omitempty"`

	// Coastlinecolor
	// arrayOK: false
	// type: color
	// Sets the coastline color.
	// .schema.layout.layoutAttributes.geo.coastlinecolor
	Coastlinecolor types.Color `json:"coastlinecolor,omitempty"`

	// Coastlinewidth
	// arrayOK: false
	// type: number
	// Sets the coastline stroke width (in px).
	// .schema.layout.layoutAttributes.geo.coastlinewidth
	Coastlinewidth types.NumberType `json:"coastlinewidth,omitempty"`

	// Countrycolor
	// arrayOK: false
	// type: color
	// Sets line color of the country boundaries.
	// .schema.layout.layoutAttributes.geo.countrycolor
	Countrycolor types.Color `json:"countrycolor,omitempty"`

	// Countrywidth
	// arrayOK: false
	// type: number
	// Sets line width (in px) of the country boundaries.
	// .schema.layout.layoutAttributes.geo.countrywidth
	Countrywidth types.NumberType `json:"countrywidth,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.geo.domain
	Domain *LayoutGeoDomain `json:"domain,omitempty"`

	// Fitbounds
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If *locations*, only the trace's visible locations are considered in the `fitbounds` computations. If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to *false*.
	// .schema.layout.layoutAttributes.geo.fitbounds
	Fitbounds LayoutGeoFitbounds `json:"fitbounds,omitempty"`

	// Framecolor
	// arrayOK: false
	// type: color
	// Sets the color the frame.
	// .schema.layout.layoutAttributes.geo.framecolor
	Framecolor types.Color `json:"framecolor,omitempty"`

	// Framewidth
	// arrayOK: false
	// type: number
	// Sets the stroke width (in px) of the frame.
	// .schema.layout.layoutAttributes.geo.framewidth
	Framewidth types.NumberType `json:"framewidth,omitempty"`

	// Lakecolor
	// arrayOK: false
	// type: color
	// Sets the color of the lakes.
	// .schema.layout.layoutAttributes.geo.lakecolor
	Lakecolor types.Color `json:"lakecolor,omitempty"`

	// Landcolor
	// arrayOK: false
	// type: color
	// Sets the land mass color.
	// .schema.layout.layoutAttributes.geo.landcolor
	Landcolor types.Color `json:"landcolor,omitempty"`

	// Lataxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.geo.lataxis
	Lataxis *LayoutGeoLataxis `json:"lataxis,omitempty"`

	// Lonaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.geo.lonaxis
	Lonaxis *LayoutGeoLonaxis `json:"lonaxis,omitempty"`

	// Oceancolor
	// arrayOK: false
	// type: color
	// Sets the ocean color
	// .schema.layout.layoutAttributes.geo.oceancolor
	Oceancolor types.Color `json:"oceancolor,omitempty"`

	// Projection
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.geo.projection
	Projection *LayoutGeoProjection `json:"projection,omitempty"`

	// Resolution
	// arrayOK: false
	// default: %!s(float64=110)
	// type: enumerated
	// Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.
	// .schema.layout.layoutAttributes.geo.resolution
	Resolution LayoutGeoResolution `json:"resolution,omitempty"`

	// Rivercolor
	// arrayOK: false
	// type: color
	// Sets color of the rivers.
	// .schema.layout.layoutAttributes.geo.rivercolor
	Rivercolor types.Color `json:"rivercolor,omitempty"`

	// Riverwidth
	// arrayOK: false
	// type: number
	// Sets the stroke width (in px) of the rivers.
	// .schema.layout.layoutAttributes.geo.riverwidth
	Riverwidth types.NumberType `json:"riverwidth,omitempty"`

	// Scope
	// arrayOK: false
	// default: world
	// type: enumerated
	// Set the scope of the map.
	// .schema.layout.layoutAttributes.geo.scope
	Scope LayoutGeoScope `json:"scope,omitempty"`

	// Showcoastlines
	// arrayOK: false
	// type: boolean
	// Sets whether or not the coastlines are drawn.
	// .schema.layout.layoutAttributes.geo.showcoastlines
	Showcoastlines types.BoolType `json:"showcoastlines,omitempty"`

	// Showcountries
	// arrayOK: false
	// type: boolean
	// Sets whether or not country boundaries are drawn.
	// .schema.layout.layoutAttributes.geo.showcountries
	Showcountries types.BoolType `json:"showcountries,omitempty"`

	// Showframe
	// arrayOK: false
	// type: boolean
	// Sets whether or not a frame is drawn around the map.
	// .schema.layout.layoutAttributes.geo.showframe
	Showframe types.BoolType `json:"showframe,omitempty"`

	// Showlakes
	// arrayOK: false
	// type: boolean
	// Sets whether or not lakes are drawn.
	// .schema.layout.layoutAttributes.geo.showlakes
	Showlakes types.BoolType `json:"showlakes,omitempty"`

	// Showland
	// arrayOK: false
	// type: boolean
	// Sets whether or not land masses are filled in color.
	// .schema.layout.layoutAttributes.geo.showland
	Showland types.BoolType `json:"showland,omitempty"`

	// Showocean
	// arrayOK: false
	// type: boolean
	// Sets whether or not oceans are filled in color.
	// .schema.layout.layoutAttributes.geo.showocean
	Showocean types.BoolType `json:"showocean,omitempty"`

	// Showrivers
	// arrayOK: false
	// type: boolean
	// Sets whether or not rivers are drawn.
	// .schema.layout.layoutAttributes.geo.showrivers
	Showrivers types.BoolType `json:"showrivers,omitempty"`

	// Showsubunits
	// arrayOK: false
	// type: boolean
	// Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.
	// .schema.layout.layoutAttributes.geo.showsubunits
	Showsubunits types.BoolType `json:"showsubunits,omitempty"`

	// Subunitcolor
	// arrayOK: false
	// type: color
	// Sets the color of the subunits boundaries.
	// .schema.layout.layoutAttributes.geo.subunitcolor
	Subunitcolor types.Color `json:"subunitcolor,omitempty"`

	// Subunitwidth
	// arrayOK: false
	// type: number
	// Sets the stroke width (in px) of the subunits boundaries.
	// .schema.layout.layoutAttributes.geo.subunitwidth
	Subunitwidth types.NumberType `json:"subunitwidth,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in the view (projection and center). Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.geo.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Sets the default visibility of the base layers.
	// .schema.layout.layoutAttributes.geo.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// LayoutGridDomain
type LayoutGridDomain struct {

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
	// .schema.layout.layoutAttributes.grid.domain.x
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
	// .schema.layout.layoutAttributes.grid.domain.y
	Y interface{} `json:"y,omitempty"`
}

// LayoutGrid
type LayoutGrid struct {

	// Columns
	// arrayOK: false
	// type: integer
	// The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
	// .schema.layout.layoutAttributes.grid.columns
	Columns types.IntegerType `json:"columns,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.grid.domain
	Domain *LayoutGridDomain `json:"domain,omitempty"`

	// Pattern
	// arrayOK: false
	// default: coupled
	// type: enumerated
	// If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.
	// .schema.layout.layoutAttributes.grid.pattern
	Pattern LayoutGridPattern `json:"pattern,omitempty"`

	// Roworder
	// arrayOK: false
	// default: top to bottom
	// type: enumerated
	// Is the first row the top or the bottom? Note that columns are always enumerated from left to right.
	// .schema.layout.layoutAttributes.grid.roworder
	Roworder LayoutGridRoworder `json:"roworder,omitempty"`

	// Rows
	// arrayOK: false
	// type: integer
	// The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
	// .schema.layout.layoutAttributes.grid.rows
	Rows types.IntegerType `json:"rows,omitempty"`

	// Subplots
	// arrayOK: false
	// type: info_array
	// Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like *xy* or *x3y2*, or ** to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.
	// .schema.layout.layoutAttributes.grid.subplots
	Subplots interface{} `json:"subplots,omitempty"`

	// Xaxes
	// arrayOK: false
	// type: info_array
	// Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like *x*, *x2*, etc., or ** to not put an x axis in that column. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.
	// .schema.layout.layoutAttributes.grid.xaxes
	Xaxes interface{} `json:"xaxes,omitempty"`

	// Xgap
	// arrayOK: false
	// type: number
	// Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.
	// .schema.layout.layoutAttributes.grid.xgap
	Xgap types.NumberType `json:"xgap,omitempty"`

	// Xside
	// arrayOK: false
	// default: bottom plot
	// type: enumerated
	// Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.
	// .schema.layout.layoutAttributes.grid.xside
	Xside LayoutGridXside `json:"xside,omitempty"`

	// Yaxes
	// arrayOK: false
	// type: info_array
	// Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like *y*, *y2*, etc., or ** to not put a y axis in that row. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.
	// .schema.layout.layoutAttributes.grid.yaxes
	Yaxes interface{} `json:"yaxes,omitempty"`

	// Ygap
	// arrayOK: false
	// type: number
	// Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.
	// .schema.layout.layoutAttributes.grid.ygap
	Ygap types.NumberType `json:"ygap,omitempty"`

	// Yside
	// arrayOK: false
	// default: left plot
	// type: enumerated
	// Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.
	// .schema.layout.layoutAttributes.grid.yside
	Yside LayoutGridYside `json:"yside,omitempty"`
}

// LayoutHoverlabelFont Sets the default hover label font used by all traces on the graph.
type LayoutHoverlabelFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.hoverlabel.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.hoverlabel.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.hoverlabel.font.lineposition
	Lineposition LayoutHoverlabelFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.hoverlabel.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.hoverlabel.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.hoverlabel.font.style
	Style LayoutHoverlabelFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.hoverlabel.font.textcase
	Textcase LayoutHoverlabelFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.hoverlabel.font.variant
	Variant LayoutHoverlabelFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.hoverlabel.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutHoverlabelGrouptitlefont Sets the font for group titles in hover (unified modes). Defaults to `hoverlabel.font`.
type LayoutHoverlabelGrouptitlefont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.lineposition
	Lineposition LayoutHoverlabelGrouptitlefontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.style
	Style LayoutHoverlabelGrouptitlefontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.textcase
	Textcase LayoutHoverlabelGrouptitlefontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.variant
	Variant LayoutHoverlabelGrouptitlefontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutHoverlabel
type LayoutHoverlabel struct {

	// Align
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	// .schema.layout.layoutAttributes.hoverlabel.align
	Align LayoutHoverlabelAlign `json:"align,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of all hover labels on graph
	// .schema.layout.layoutAttributes.hoverlabel.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the border color of all hover labels on graph.
	// .schema.layout.layoutAttributes.hoverlabel.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.hoverlabel.font
	Font *LayoutHoverlabelFont `json:"font,omitempty"`

	// Grouptitlefont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont
	Grouptitlefont *LayoutHoverlabelGrouptitlefont `json:"grouptitlefont,omitempty"`

	// Namelength
	// arrayOK: false
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	// .schema.layout.layoutAttributes.hoverlabel.namelength
	Namelength types.IntegerType `json:"namelength,omitempty"`
}

// LayoutImage
type LayoutImage struct {

	// Layer
	// arrayOK: false
	// default: above
	// type: enumerated
	// Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.
	// .schema.layout.layoutAttributes.images.items.image.layer
	Layer ImageLayer `json:"layer,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.images.items.image.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the image.
	// .schema.layout.layoutAttributes.images.items.image.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Sizex
	// arrayOK: false
	// type: number
	// Sets the image container size horizontally. The image will be sized based on the `position` value. When `xref` is set to `paper`, units are sized relative to the plot width. When `xref` ends with ` domain`, units are sized relative to the axis width.
	// .schema.layout.layoutAttributes.images.items.image.sizex
	Sizex types.NumberType `json:"sizex,omitempty"`

	// Sizey
	// arrayOK: false
	// type: number
	// Sets the image container size vertically. The image will be sized based on the `position` value. When `yref` is set to `paper`, units are sized relative to the plot height. When `yref` ends with ` domain`, units are sized relative to the axis height.
	// .schema.layout.layoutAttributes.images.items.image.sizey
	Sizey types.NumberType `json:"sizey,omitempty"`

	// Sizing
	// arrayOK: false
	// default: contain
	// type: enumerated
	// Specifies which dimension of the image to constrain.
	// .schema.layout.layoutAttributes.images.items.image.sizing
	Sizing ImageSizing `json:"sizing,omitempty"`

	// Source
	// arrayOK: false
	// type: string
	// Specifies the URL of the image to be used. The URL must be accessible from the domain where the plot code is run, and can be either relative or absolute.
	// .schema.layout.layoutAttributes.images.items.image.source
	Source types.StringType `json:"source,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.images.items.image.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this image is visible.
	// .schema.layout.layoutAttributes.images.items.image.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: any
	// Sets the image's x position. When `xref` is set to `paper`, units are sized relative to the plot height. See `xref` for more info
	// .schema.layout.layoutAttributes.images.items.image.x
	X interface{} `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: left
	// type: enumerated
	// Sets the anchor for the x position
	// .schema.layout.layoutAttributes.images.items.image.xanchor
	Xanchor ImageXanchor `json:"xanchor,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the images's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
	// .schema.layout.layoutAttributes.images.items.image.xref
	Xref ImageXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: any
	// Sets the image's y position. When `yref` is set to `paper`, units are sized relative to the plot height. See `yref` for more info
	// .schema.layout.layoutAttributes.images.items.image.y
	Y interface{} `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: top
	// type: enumerated
	// Sets the anchor for the y position.
	// .schema.layout.layoutAttributes.images.items.image.yanchor
	Yanchor ImageYanchor `json:"yanchor,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the images's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
	// .schema.layout.layoutAttributes.images.items.image.yref
	Yref ImageYref `json:"yref,omitempty"`
}

// LayoutLegendFont Sets the font used to text the legend items.
type LayoutLegendFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.legend.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.legend.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.legend.font.lineposition
	Lineposition LayoutLegendFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.legend.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.legend.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.legend.font.style
	Style LayoutLegendFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.legend.font.textcase
	Textcase LayoutLegendFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.legend.font.variant
	Variant LayoutLegendFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.legend.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutLegendGrouptitlefont Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.
type LayoutLegendGrouptitlefont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.legend.grouptitlefont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.legend.grouptitlefont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.legend.grouptitlefont.lineposition
	Lineposition LayoutLegendGrouptitlefontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.legend.grouptitlefont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.legend.grouptitlefont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.legend.grouptitlefont.style
	Style LayoutLegendGrouptitlefontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.legend.grouptitlefont.textcase
	Textcase LayoutLegendGrouptitlefontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.legend.grouptitlefont.variant
	Variant LayoutLegendGrouptitlefontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.legend.grouptitlefont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutLegendTitleFont Sets this legend's title font. Defaults to `legend.font` with its size increased about 20%.
type LayoutLegendTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.legend.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.legend.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.legend.title.font.lineposition
	Lineposition LayoutLegendTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.legend.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.legend.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.legend.title.font.style
	Style LayoutLegendTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.legend.title.font.textcase
	Textcase LayoutLegendTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.legend.title.font.variant
	Variant LayoutLegendTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.legend.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutLegendTitle
type LayoutLegendTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.legend.title.font
	Font *LayoutLegendTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of legend's title with respect to the legend items. Defaulted to *top* with `orientation` is *h*. Defaulted to *left* with `orientation` is *v*. The *top left* options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.
	// .schema.layout.layoutAttributes.legend.title.side
	Side LayoutLegendTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend.
	// .schema.layout.layoutAttributes.legend.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutLegend
type LayoutLegend struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the legend background color. Defaults to `layout.paper_bgcolor`.
	// .schema.layout.layoutAttributes.legend.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the legend.
	// .schema.layout.layoutAttributes.legend.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the legend.
	// .schema.layout.layoutAttributes.legend.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Entrywidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend. Use 0 to size the entry based on the text width, when `entrywidthmode` is set to *pixels*.
	// .schema.layout.layoutAttributes.legend.entrywidth
	Entrywidth types.NumberType `json:"entrywidth,omitempty"`

	// Entrywidthmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines what entrywidth means.
	// .schema.layout.layoutAttributes.legend.entrywidthmode
	Entrywidthmode LayoutLegendEntrywidthmode `json:"entrywidthmode,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.legend.font
	Font *LayoutLegendFont `json:"font,omitempty"`

	// Groupclick
	// arrayOK: false
	// default: togglegroup
	// type: enumerated
	// Determines the behavior on legend group item click. *toggleitem* toggles the visibility of the individual item clicked on the graph. *togglegroup* toggles the visibility of all items in the same legendgroup as the item clicked on the graph.
	// .schema.layout.layoutAttributes.legend.groupclick
	Groupclick LayoutLegendGroupclick `json:"groupclick,omitempty"`

	// Grouptitlefont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.legend.grouptitlefont
	Grouptitlefont *LayoutLegendGrouptitlefont `json:"grouptitlefont,omitempty"`

	// Indentation
	// arrayOK: false
	// type: number
	// Sets the indentation (in px) of the legend entries.
	// .schema.layout.layoutAttributes.legend.indentation
	Indentation types.NumberType `json:"indentation,omitempty"`

	// Itemclick
	// arrayOK: false
	// default: toggle
	// type: enumerated
	// Determines the behavior on legend item click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item click interactions.
	// .schema.layout.layoutAttributes.legend.itemclick
	Itemclick LayoutLegendItemclick `json:"itemclick,omitempty"`

	// Itemdoubleclick
	// arrayOK: false
	// default: toggleothers
	// type: enumerated
	// Determines the behavior on legend item double-click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item double-click interactions.
	// .schema.layout.layoutAttributes.legend.itemdoubleclick
	Itemdoubleclick LayoutLegendItemdoubleclick `json:"itemdoubleclick,omitempty"`

	// Itemsizing
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Determines if the legend items symbols scale with their corresponding *trace* attributes or remain *constant* independent of the symbol size on the graph.
	// .schema.layout.layoutAttributes.legend.itemsizing
	Itemsizing LayoutLegendItemsizing `json:"itemsizing,omitempty"`

	// Itemwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the legend item symbols (the part other than the title.text).
	// .schema.layout.layoutAttributes.legend.itemwidth
	Itemwidth types.NumberType `json:"itemwidth,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the legend.
	// .schema.layout.layoutAttributes.legend.orientation
	Orientation LayoutLegendOrientation `json:"orientation,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.legend.title
	Title *LayoutLegendTitle `json:"title,omitempty"`

	// Tracegroupgap
	// arrayOK: false
	// type: number
	// Sets the amount of vertical space (in px) between legend groups.
	// .schema.layout.layoutAttributes.legend.tracegroupgap
	Tracegroupgap types.NumberType `json:"tracegroupgap,omitempty"`

	// Traceorder
	// arrayOK: false
	// default: %!s(<nil>)
	// type: flaglist
	// Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.
	// .schema.layout.layoutAttributes.legend.traceorder
	Traceorder LayoutLegendTraceorder `json:"traceorder,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.legend.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Valign
	// arrayOK: false
	// default: middle
	// type: enumerated
	// Sets the vertical alignment of the symbols with respect to their associated text.
	// .schema.layout.layoutAttributes.legend.valign
	Valign LayoutLegendValign `json:"valign,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this legend is visible.
	// .schema.layout.layoutAttributes.legend.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` (in normalized coordinates) of the legend. When `xref` is *paper*, defaults to *1.02* for vertical legends and defaults to *0* for horizontal legends. When `xref` is *container*, defaults to *1* for vertical legends and defaults to *0* for horizontal legends. Must be between *0* and *1* if `xref` is *container*. and between *-2* and *3* if `xref` is *paper*.
	// .schema.layout.layoutAttributes.legend.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: left
	// type: enumerated
	// Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend. Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.
	// .schema.layout.layoutAttributes.legend.xanchor
	Xanchor LayoutLegendXanchor `json:"xanchor,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	// .schema.layout.layoutAttributes.legend.xref
	Xref LayoutLegendXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` (in normalized coordinates) of the legend. When `yref` is *paper*, defaults to *1* for vertical legends, defaults to *-0.1* for horizontal legends on graphs w/o range sliders and defaults to *1.1* for horizontal legends on graph with one or multiple range sliders. When `yref` is *container*, defaults to *1*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	// .schema.layout.layoutAttributes.legend.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.
	// .schema.layout.layoutAttributes.legend.yanchor
	Yanchor LayoutLegendYanchor `json:"yanchor,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	// .schema.layout.layoutAttributes.legend.yref
	Yref LayoutLegendYref `json:"yref,omitempty"`
}

// LayoutMapboxBounds
type LayoutMapboxBounds struct {

	// East
	// arrayOK: false
	// type: number
	// Sets the maximum longitude of the map (in degrees East) if `west`, `south` and `north` are declared.
	// .schema.layout.layoutAttributes.mapbox.bounds.east
	East types.NumberType `json:"east,omitempty"`

	// North
	// arrayOK: false
	// type: number
	// Sets the maximum latitude of the map (in degrees North) if `east`, `west` and `south` are declared.
	// .schema.layout.layoutAttributes.mapbox.bounds.north
	North types.NumberType `json:"north,omitempty"`

	// South
	// arrayOK: false
	// type: number
	// Sets the minimum latitude of the map (in degrees North) if `east`, `west` and `north` are declared.
	// .schema.layout.layoutAttributes.mapbox.bounds.south
	South types.NumberType `json:"south,omitempty"`

	// West
	// arrayOK: false
	// type: number
	// Sets the minimum longitude of the map (in degrees East) if `east`, `south` and `north` are declared.
	// .schema.layout.layoutAttributes.mapbox.bounds.west
	West types.NumberType `json:"west,omitempty"`
}

// LayoutMapboxCenter
type LayoutMapboxCenter struct {

	// Lat
	// arrayOK: false
	// type: number
	// Sets the latitude of the center of the map (in degrees North).
	// .schema.layout.layoutAttributes.mapbox.center.lat
	Lat types.NumberType `json:"lat,omitempty"`

	// Lon
	// arrayOK: false
	// type: number
	// Sets the longitude of the center of the map (in degrees East).
	// .schema.layout.layoutAttributes.mapbox.center.lon
	Lon types.NumberType `json:"lon,omitempty"`
}

// LayoutMapboxDomain
type LayoutMapboxDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .
	// .schema.layout.layoutAttributes.mapbox.domain.column
	Column types.IntegerType `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .
	// .schema.layout.layoutAttributes.mapbox.domain.row
	Row types.IntegerType `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this mapbox subplot (in plot fraction).
	// .schema.layout.layoutAttributes.mapbox.domain.x
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this mapbox subplot (in plot fraction).
	// .schema.layout.layoutAttributes.mapbox.domain.y
	Y interface{} `json:"y,omitempty"`
}

// LayerCircle
type LayerCircle struct {

	// Radius
	// arrayOK: false
	// type: number
	// Sets the circle radius (mapbox.layer.paint.circle-radius). Has an effect only when `type` is set to *circle*.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.circle.radius
	Radius types.NumberType `json:"radius,omitempty"`
}

// LayerFill
type LayerFill struct {

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the fill outline color (mapbox.layer.paint.fill-outline-color). Has an effect only when `type` is set to *fill*.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.fill.outlinecolor
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`
}

// LayerLine
type LayerLine struct {

	// Dash
	// arrayOK: false
	// type: data_array
	// Sets the length of dashes and gaps (mapbox.layer.paint.line-dasharray). Has an effect only when `type` is set to *line*.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.line.dash
	Dash *types.DataArrayType `json:"dash,omitempty"`

	// Dashsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `dash`.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.line.dashsrc
	Dashsrc types.StringType `json:"dashsrc,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (mapbox.layer.paint.line-width). Has an effect only when `type` is set to *line*.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.line.width
	Width types.NumberType `json:"width,omitempty"`
}

// LayerSymbolTextfont Sets the icon text font (color=mapbox.layer.paint.text-color, size=mapbox.layer.layout.text-size). Has an effect only when `type` is set to *symbol*.
type LayerSymbolTextfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textfont.family
	Family types.StringType `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textfont.style
	Style LayerSymbolTextfontStyle `json:"style,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayerSymbol
type LayerSymbol struct {

	// Icon
	// arrayOK: false
	// type: string
	// Sets the symbol icon image (mapbox.layer.layout.icon-image). Full list: https://www.mapbox.com/maki-icons/
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.icon
	Icon types.StringType `json:"icon,omitempty"`

	// Iconsize
	// arrayOK: false
	// type: number
	// Sets the symbol icon size (mapbox.layer.layout.icon-size). Has an effect only when `type` is set to *symbol*.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.iconsize
	Iconsize types.NumberType `json:"iconsize,omitempty"`

	// Placement
	// arrayOK: false
	// default: point
	// type: enumerated
	// Sets the symbol and/or text placement (mapbox.layer.layout.symbol-placement). If `placement` is *point*, the label is placed where the geometry is located If `placement` is *line*, the label is placed along the line of the geometry If `placement` is *line-center*, the label is placed on the center of the geometry
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.placement
	Placement LayerSymbolPlacement `json:"placement,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the symbol text (mapbox.layer.layout.text-field).
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.text
	Text types.StringType `json:"text,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textfont
	Textfont *LayerSymbolTextfont `json:"textfont,omitempty"`

	// Textposition
	// arrayOK: false
	// default: middle center
	// type: enumerated
	// Sets the positions of the `text` elements with respects to the (x,y) coordinates.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textposition
	Textposition LayerSymbolTextposition `json:"textposition,omitempty"`
}

// LayoutMapboxLayer
type LayoutMapboxLayer struct {

	// Below
	// arrayOK: false
	// type: string
	// Determines if the layer will be inserted before the layer with the specified ID. If omitted or set to '', the layer will be inserted above every existing layer.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.below
	Below types.StringType `json:"below,omitempty"`

	// Circle
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.circle
	Circle *LayerCircle `json:"circle,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets the primary layer color. If `type` is *circle*, color corresponds to the circle color (mapbox.layer.paint.circle-color) If `type` is *line*, color corresponds to the line color (mapbox.layer.paint.line-color) If `type` is *fill*, color corresponds to the fill color (mapbox.layer.paint.fill-color) If `type` is *symbol*, color corresponds to the icon color (mapbox.layer.paint.icon-color)
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.color
	Color types.Color `json:"color,omitempty"`

	// Coordinates
	// arrayOK: false
	// type: any
	// Sets the coordinates array contains [longitude, latitude] pairs for the image corners listed in clockwise order: top left, top right, bottom right, bottom left. Only has an effect for *image* `sourcetype`.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.coordinates
	Coordinates interface{} `json:"coordinates,omitempty"`

	// Fill
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.fill
	Fill *LayerFill `json:"fill,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.line
	Line *LayerLine `json:"line,omitempty"`

	// Maxzoom
	// arrayOK: false
	// type: number
	// Sets the maximum zoom level (mapbox.layer.maxzoom). At zoom levels equal to or greater than the maxzoom, the layer will be hidden.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.maxzoom
	Maxzoom types.NumberType `json:"maxzoom,omitempty"`

	// Minzoom
	// arrayOK: false
	// type: number
	// Sets the minimum zoom level (mapbox.layer.minzoom). At zoom levels less than the minzoom, the layer will be hidden.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.minzoom
	Minzoom types.NumberType `json:"minzoom,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the layer. If `type` is *circle*, opacity corresponds to the circle opacity (mapbox.layer.paint.circle-opacity) If `type` is *line*, opacity corresponds to the line opacity (mapbox.layer.paint.line-opacity) If `type` is *fill*, opacity corresponds to the fill opacity (mapbox.layer.paint.fill-opacity) If `type` is *symbol*, opacity corresponds to the icon/text opacity (mapbox.layer.paint.text-opacity)
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Source
	// arrayOK: false
	// type: any
	// Sets the source data for this layer (mapbox.layer.source). When `sourcetype` is set to *geojson*, `source` can be a URL to a GeoJSON or a GeoJSON object. When `sourcetype` is set to *vector* or *raster*, `source` can be a URL or an array of tile URLs. When `sourcetype` is set to *image*, `source` can be a URL to an image.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.source
	Source interface{} `json:"source,omitempty"`

	// Sourceattribution
	// arrayOK: false
	// type: string
	// Sets the attribution for this source.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.sourceattribution
	Sourceattribution types.StringType `json:"sourceattribution,omitempty"`

	// Sourcelayer
	// arrayOK: false
	// type: string
	// Specifies the layer to use from a vector tile source (mapbox.layer.source-layer). Required for *vector* source type that supports multiple layers.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.sourcelayer
	Sourcelayer types.StringType `json:"sourcelayer,omitempty"`

	// Sourcetype
	// arrayOK: false
	// default: geojson
	// type: enumerated
	// Sets the source type for this layer, that is the type of the layer data.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.sourcetype
	Sourcetype LayerSourcetype `json:"sourcetype,omitempty"`

	// Symbol
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol
	Symbol *LayerSymbol `json:"symbol,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Type
	// arrayOK: false
	// default: circle
	// type: enumerated
	// Sets the layer type, that is the how the layer data set in `source` will be rendered With `sourcetype` set to *geojson*, the following values are allowed: *circle*, *line*, *fill* and *symbol*. but note that *line* and *fill* are not compatible with Point GeoJSON geometries. With `sourcetype` set to *vector*, the following values are allowed:  *circle*, *line*, *fill* and *symbol*. With `sourcetype` set to *raster* or `*image*`, only the *raster* value is allowed.
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.type
	Type LayerType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether this layer is displayed
	// .schema.layout.layoutAttributes.mapbox.layers.items.layer.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// LayoutMapbox
type LayoutMapbox struct {

	// Accesstoken
	// arrayOK: false
	// type: string
	// Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.
	// .schema.layout.layoutAttributes.mapbox.accesstoken
	Accesstoken types.StringType `json:"accesstoken,omitempty"`

	// Bearing
	// arrayOK: false
	// type: number
	// Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).
	// .schema.layout.layoutAttributes.mapbox.bearing
	Bearing types.NumberType `json:"bearing,omitempty"`

	// Bounds
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.bounds
	Bounds *LayoutMapboxBounds `json:"bounds,omitempty"`

	// Center
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.center
	Center *LayoutMapboxCenter `json:"center,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.mapbox.domain
	Domain *LayoutMapboxDomain `json:"domain,omitempty"`

	// Layers
	// role: Object
	// items: LayoutMapboxLayer
	// .schema.layout.layoutAttributes.mapbox.layers
	Layers []LayoutMapboxLayer `json:"layers,omitempty"`

	// Pitch
	// arrayOK: false
	// type: number
	// Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map) (mapbox.pitch).
	// .schema.layout.layoutAttributes.mapbox.pitch
	Pitch types.NumberType `json:"pitch,omitempty"`

	// Style
	// arrayOK: false
	// type: any
	// Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`.  These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token  Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option.  Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec  The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg  The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets  Mapbox style URLs are of the form: mapbox://mapbox.mapbox-<name>-<version>
	// .schema.layout.layoutAttributes.mapbox.style
	Style interface{} `json:"style,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.mapbox.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Zoom
	// arrayOK: false
	// type: number
	// Sets the zoom level of the map (mapbox.zoom).
	// .schema.layout.layoutAttributes.mapbox.zoom
	Zoom types.NumberType `json:"zoom,omitempty"`
}

// LayoutMargin
type LayoutMargin struct {

	// Autoexpand
	// arrayOK: false
	// type: boolean
	// Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.
	// .schema.layout.layoutAttributes.margin.autoexpand
	Autoexpand types.BoolType `json:"autoexpand,omitempty"`

	// B
	// arrayOK: false
	// type: number
	// Sets the bottom margin (in px).
	// .schema.layout.layoutAttributes.margin.b
	B types.NumberType `json:"b,omitempty"`

	// L
	// arrayOK: false
	// type: number
	// Sets the left margin (in px).
	// .schema.layout.layoutAttributes.margin.l
	L types.NumberType `json:"l,omitempty"`

	// Pad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) between the plotting area and the axis lines
	// .schema.layout.layoutAttributes.margin.pad
	Pad types.NumberType `json:"pad,omitempty"`

	// R
	// arrayOK: false
	// type: number
	// Sets the right margin (in px).
	// .schema.layout.layoutAttributes.margin.r
	R types.NumberType `json:"r,omitempty"`

	// T
	// arrayOK: false
	// type: number
	// Sets the top margin (in px).
	// .schema.layout.layoutAttributes.margin.t
	T types.NumberType `json:"t,omitempty"`
}

// LayoutModebar
type LayoutModebar struct {

	// Activecolor
	// arrayOK: false
	// type: color
	// Sets the color of the active or hovered on icons in the modebar.
	// .schema.layout.layoutAttributes.modebar.activecolor
	Activecolor types.Color `json:"activecolor,omitempty"`

	// Add
	// arrayOK: true
	// type: string
	// Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to `config.modeBarButtonsToAdd` option. This may include *v1hovermode*, *hoverclosest*, *hovercompare*, *togglehover*, *togglespikelines*, *drawline*, *drawopenpath*, *drawclosedpath*, *drawcircle*, *drawrect*, *eraseshape*.
	// .schema.layout.layoutAttributes.modebar.add
	Add *types.ArrayOK[*types.StringType] `json:"add,omitempty"`

	// Addsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `add`.
	// .schema.layout.layoutAttributes.modebar.addsrc
	Addsrc types.StringType `json:"addsrc,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the modebar.
	// .schema.layout.layoutAttributes.modebar.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets the color of the icons in the modebar.
	// .schema.layout.layoutAttributes.modebar.color
	Color types.Color `json:"color,omitempty"`

	// Orientation
	// arrayOK: false
	// default: h
	// type: enumerated
	// Sets the orientation of the modebar.
	// .schema.layout.layoutAttributes.modebar.orientation
	Orientation LayoutModebarOrientation `json:"orientation,omitempty"`

	// Remove
	// arrayOK: true
	// type: string
	// Determines which predefined modebar buttons to remove. Similar to `config.modeBarButtonsToRemove` option. This may include *autoScale2d*, *autoscale*, *editInChartStudio*, *editinchartstudio*, *hoverCompareCartesian*, *hovercompare*, *lasso*, *lasso2d*, *orbitRotation*, *orbitrotation*, *pan*, *pan2d*, *pan3d*, *reset*, *resetCameraDefault3d*, *resetCameraLastSave3d*, *resetGeo*, *resetSankeyGroup*, *resetScale2d*, *resetViewMapbox*, *resetViews*, *resetcameradefault*, *resetcameralastsave*, *resetsankeygroup*, *resetscale*, *resetview*, *resetviews*, *select*, *select2d*, *sendDataToCloud*, *senddatatocloud*, *tableRotation*, *tablerotation*, *toImage*, *toggleHover*, *toggleSpikelines*, *togglehover*, *togglespikelines*, *toimage*, *zoom*, *zoom2d*, *zoom3d*, *zoomIn2d*, *zoomInGeo*, *zoomInMapbox*, *zoomOut2d*, *zoomOutGeo*, *zoomOutMapbox*, *zoomin*, *zoomout*.
	// .schema.layout.layoutAttributes.modebar.remove
	Remove *types.ArrayOK[*types.StringType] `json:"remove,omitempty"`

	// Removesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `remove`.
	// .schema.layout.layoutAttributes.modebar.removesrc
	Removesrc types.StringType `json:"removesrc,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.modebar.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutNewselectionLine
type LayoutNewselectionLine struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the line color. By default uses either dark grey or white to increase contrast with background color.
	// .schema.layout.layoutAttributes.newselection.line.color
	Color types.Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.newselection.line.dash
	Dash types.StringType `json:"dash,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (in px).
	// .schema.layout.layoutAttributes.newselection.line.width
	Width types.NumberType `json:"width,omitempty"`
}

// LayoutNewselection
type LayoutNewselection struct {

	// Line
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newselection.line
	Line *LayoutNewselectionLine `json:"line,omitempty"`

	// Mode
	// arrayOK: false
	// default: immediate
	// type: enumerated
	// Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.
	// .schema.layout.layoutAttributes.newselection.mode
	Mode LayoutNewselectionMode `json:"mode,omitempty"`
}

// LayoutNewshapeLabelFont Sets the new shape label text font.
type LayoutNewshapeLabelFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.newshape.label.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.newshape.label.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.newshape.label.font.lineposition
	Lineposition LayoutNewshapeLabelFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.newshape.label.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.newshape.label.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.newshape.label.font.style
	Style LayoutNewshapeLabelFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.newshape.label.font.textcase
	Textcase LayoutNewshapeLabelFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.newshape.label.font.variant
	Variant LayoutNewshapeLabelFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.newshape.label.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutNewshapeLabel
type LayoutNewshapeLabel struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newshape.label.font
	Font *LayoutNewshapeLabelFont `json:"font,omitempty"`

	// Padding
	// arrayOK: false
	// type: number
	// Sets padding (in px) between edge of label and edge of new shape.
	// .schema.layout.layoutAttributes.newshape.label.padding
	Padding types.NumberType `json:"padding,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the text to display with the new shape. It is also used for legend item if `name` is not provided.
	// .schema.layout.layoutAttributes.newshape.label.text
	Text types.StringType `json:"text,omitempty"`

	// Textangle
	// arrayOK: false
	// type: angle
	// Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle *auto* is the same angle as the line. For all other shapes, angle *auto* is horizontal.
	// .schema.layout.layoutAttributes.newshape.label.textangle
	Textangle types.NumberType `json:"textangle,omitempty"`

	// Textposition
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are *top left*, *top center*, *top right*, *middle left*, *middle center*, *middle right*, *bottom left*, *bottom center*, and *bottom right*. Supported values for lines are *start*, *middle*, and *end*. Default: *middle center* for rectangles, circles, and paths; *middle* for lines.
	// .schema.layout.layoutAttributes.newshape.label.textposition
	Textposition LayoutNewshapeLabelTextposition `json:"textposition,omitempty"`

	// Texttemplate
	// arrayOK: false
	// type: string
	// Template string used for rendering the new shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example "x0: %{x0}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{x0:$.2f}". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{x0|%m %b %Y}". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example "Length in cm: %{x0*2.54}", "%{slope*60:.1f} meters per second." For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.
	// .schema.layout.layoutAttributes.newshape.label.texttemplate
	Texttemplate types.StringType `json:"texttemplate,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the *left*, *center* or *right* of the label text. For example, if `textposition` is set to *top right* and `xanchor` to *right* then the right-most portion of the label text lines up with the right-most edge of the new shape.
	// .schema.layout.layoutAttributes.newshape.label.xanchor
	Xanchor LayoutNewshapeLabelXanchor `json:"xanchor,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the label's vertical position anchor This anchor binds the specified `textposition` to the *top*, *middle* or *bottom* of the label text. For example, if `textposition` is set to *top right* and `yanchor` to *top* then the top-most portion of the label text lines up with the top-most edge of the new shape.
	// .schema.layout.layoutAttributes.newshape.label.yanchor
	Yanchor LayoutNewshapeLabelYanchor `json:"yanchor,omitempty"`
}

// LayoutNewshapeLegendgrouptitleFont Sets this legend group's title font.
type LayoutNewshapeLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.lineposition
	Lineposition LayoutNewshapeLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.style
	Style LayoutNewshapeLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.textcase
	Textcase LayoutNewshapeLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.variant
	Variant LayoutNewshapeLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutNewshapeLegendgrouptitle
type LayoutNewshapeLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font
	Font *LayoutNewshapeLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutNewshapeLine
type LayoutNewshapeLine struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the line color. By default uses either dark grey or white to increase contrast with background color.
	// .schema.layout.layoutAttributes.newshape.line.color
	Color types.Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.newshape.line.dash
	Dash types.StringType `json:"dash,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (in px).
	// .schema.layout.layoutAttributes.newshape.line.width
	Width types.NumberType `json:"width,omitempty"`
}

// LayoutNewshape
type LayoutNewshape struct {

	// Drawdirection
	// arrayOK: false
	// default: diagonal
	// type: enumerated
	// When `dragmode` is set to *drawrect*, *drawline* or *drawcircle* this limits the drag to be horizontal, vertical or diagonal. Using *diagonal* there is no limit e.g. in drawing lines in any direction. *ortho* limits the draw to be either horizontal or vertical. *horizontal* allows horizontal extend. *vertical* allows vertical extend.
	// .schema.layout.layoutAttributes.newshape.drawdirection
	Drawdirection LayoutNewshapeDrawdirection `json:"drawdirection,omitempty"`

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.
	// .schema.layout.layoutAttributes.newshape.fillcolor
	Fillcolor types.Color `json:"fillcolor,omitempty"`

	// Fillrule
	// arrayOK: false
	// default: evenodd
	// type: enumerated
	// Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
	// .schema.layout.layoutAttributes.newshape.fillrule
	Fillrule LayoutNewshapeFillrule `json:"fillrule,omitempty"`

	// Label
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newshape.label
	Label *LayoutNewshapeLabel `json:"label,omitempty"`

	// Layer
	// arrayOK: false
	// default: above
	// type: enumerated
	// Specifies whether new shapes are drawn below gridlines (*below*), between gridlines and traces (*between*) or above traces (*above*).
	// .schema.layout.layoutAttributes.newshape.layer
	Layer LayoutNewshapeLayer `json:"layer,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show new shape in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	// .schema.layout.layoutAttributes.newshape.legend
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for new shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	// .schema.layout.layoutAttributes.newshape.legendgroup
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newshape.legendgrouptitle
	Legendgrouptitle *LayoutNewshapeLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for new shape. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.
	// .schema.layout.layoutAttributes.newshape.legendrank
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for new shape.
	// .schema.layout.layoutAttributes.newshape.legendwidth
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.newshape.line
	Line *LayoutNewshapeLine `json:"line,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets new shape name. The name appears as the legend item.
	// .schema.layout.layoutAttributes.newshape.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of new shapes.
	// .schema.layout.layoutAttributes.newshape.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not new shape is shown in the legend.
	// .schema.layout.layoutAttributes.newshape.showlegend
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not new shape is visible. If *legendonly*, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	// .schema.layout.layoutAttributes.newshape.visible
	Visible LayoutNewshapeVisible `json:"visible,omitempty"`
}

// LayoutPolarAngularaxisTickfont Sets the tick font.
type LayoutPolarAngularaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.lineposition
	Lineposition LayoutPolarAngularaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.style
	Style LayoutPolarAngularaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.textcase
	Textcase LayoutPolarAngularaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.variant
	Variant LayoutPolarAngularaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutPolarAngularaxisTickformatstop
type LayoutPolarAngularaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.polar.angularaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.polar.angularaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutPolarAngularaxis
type LayoutPolarAngularaxis struct {

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	// .schema.layout.layoutAttributes.polar.angularaxis.autotypenumbers
	Autotypenumbers LayoutPolarAngularaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.polar.angularaxis.categoryarray
	Categoryarray *types.DataArrayType `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	// .schema.layout.layoutAttributes.polar.angularaxis.categoryarraysrc
	Categoryarraysrc types.StringType `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
	// .schema.layout.layoutAttributes.polar.angularaxis.categoryorder
	Categoryorder LayoutPolarAngularaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.polar.angularaxis.color
	Color types.Color `json:"color,omitempty"`

	// Direction
	// arrayOK: false
	// default: counterclockwise
	// type: enumerated
	// Sets the direction corresponding to positive angles.
	// .schema.layout.layoutAttributes.polar.angularaxis.direction
	Direction LayoutPolarAngularaxisDirection `json:"direction,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.polar.angularaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.polar.angularaxis.exponentformat
	Exponentformat LayoutPolarAngularaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.polar.angularaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.polar.angularaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.polar.angularaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.polar.angularaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.polar.angularaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.polar.angularaxis.layer
	Layer LayoutPolarAngularaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.polar.angularaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.polar.angularaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.polar.angularaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.polar.angularaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Period
	// arrayOK: false
	// type: number
	// Set the angular period. Has an effect only when `angularaxis.type` is *category*.
	// .schema.layout.layoutAttributes.polar.angularaxis.period
	Period types.NumberType `json:"period,omitempty"`

	// Rotation
	// arrayOK: false
	// type: angle
	// Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to *counterclockwise* get a `rotation` of *0* which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to *clockwise* get a rotation of *90* which corresponds to due North (like on a compass),
	// .schema.layout.layoutAttributes.polar.angularaxis.rotation
	Rotation types.NumberType `json:"rotation,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.polar.angularaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.polar.angularaxis.showexponent
	Showexponent LayoutPolarAngularaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.polar.angularaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.polar.angularaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.polar.angularaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.polar.angularaxis.showtickprefix
	Showtickprefix LayoutPolarAngularaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.polar.angularaxis.showticksuffix
	Showticksuffix LayoutPolarAngularaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Thetaunit
	// arrayOK: false
	// default: degrees
	// type: enumerated
	// Sets the format unit of the formatted *theta* values. Has an effect only when `angularaxis.type` is *linear*.
	// .schema.layout.layoutAttributes.polar.angularaxis.thetaunit
	Thetaunit LayoutPolarAngularaxisThetaunit `json:"thetaunit,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.polar.angularaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.angularaxis.tickfont
	Tickfont *LayoutPolarAngularaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.polar.angularaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutPolarAngularaxisTickformatstop
	// .schema.layout.layoutAttributes.polar.angularaxis.tickformatstops
	Tickformatstops []LayoutPolarAngularaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.polar.angularaxis.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.polar.angularaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.polar.angularaxis.tickmode
	Tickmode LayoutPolarAngularaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.polar.angularaxis.ticks
	Ticks LayoutPolarAngularaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.polar.angularaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.polar.angularaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.polar.angularaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.polar.angularaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.polar.angularaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.polar.angularaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Type
	// arrayOK: false
	// default: -
	// type: enumerated
	// Sets the angular axis type. If *linear*, set `thetaunit` to determine the unit in which axis value are shown. If *category, use `period` to set the number of integer coordinates around polar axis.
	// .schema.layout.layoutAttributes.polar.angularaxis.type
	Type LayoutPolarAngularaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar<N>.uirevision`.
	// .schema.layout.layoutAttributes.polar.angularaxis.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.polar.angularaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// LayoutPolarDomain
type LayoutPolarDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this polar subplot .
	// .schema.layout.layoutAttributes.polar.domain.column
	Column types.IntegerType `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this polar subplot .
	// .schema.layout.layoutAttributes.polar.domain.row
	Row types.IntegerType `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this polar subplot (in plot fraction).
	// .schema.layout.layoutAttributes.polar.domain.x
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this polar subplot (in plot fraction).
	// .schema.layout.layoutAttributes.polar.domain.y
	Y interface{} `json:"y,omitempty"`
}

// LayoutPolarRadialaxisAutorangeoptions
type LayoutPolarRadialaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	// .schema.layout.layoutAttributes.polar.radialaxis.autorangeoptions.clipmax
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	// .schema.layout.layoutAttributes.polar.radialaxis.autorangeoptions.clipmin
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	// .schema.layout.layoutAttributes.polar.radialaxis.autorangeoptions.include
	Include *types.ArrayOK[*interface{}] `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	// .schema.layout.layoutAttributes.polar.radialaxis.autorangeoptions.includesrc
	Includesrc types.StringType `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	// .schema.layout.layoutAttributes.polar.radialaxis.autorangeoptions.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	// .schema.layout.layoutAttributes.polar.radialaxis.autorangeoptions.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutPolarRadialaxisTickfont Sets the tick font.
type LayoutPolarRadialaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.lineposition
	Lineposition LayoutPolarRadialaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.style
	Style LayoutPolarRadialaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.textcase
	Textcase LayoutPolarRadialaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.variant
	Variant LayoutPolarRadialaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutPolarRadialaxisTickformatstop
type LayoutPolarRadialaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.polar.radialaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.polar.radialaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutPolarRadialaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutPolarRadialaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.lineposition
	Lineposition LayoutPolarRadialaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.style
	Style LayoutPolarRadialaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.textcase
	Textcase LayoutPolarRadialaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.variant
	Variant LayoutPolarRadialaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutPolarRadialaxisTitle
type LayoutPolarRadialaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.radialaxis.title.font
	Font *LayoutPolarRadialaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.polar.radialaxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutPolarRadialaxis
type LayoutPolarRadialaxis struct {

	// Angle
	// arrayOK: false
	// type: angle
	// Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.
	// .schema.layout.layoutAttributes.polar.radialaxis.angle
	Angle types.NumberType `json:"angle,omitempty"`

	// Autorange
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	// .schema.layout.layoutAttributes.polar.radialaxis.autorange
	Autorange LayoutPolarRadialaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.radialaxis.autorangeoptions
	Autorangeoptions *LayoutPolarRadialaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotickangles
	// arrayOK: false
	// type: info_array
	// When `tickangle` is set to *auto*, it will be set to the first angle in this array that is large enough to prevent label overlap.
	// .schema.layout.layoutAttributes.polar.radialaxis.autotickangles
	Autotickangles interface{} `json:"autotickangles,omitempty"`

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	// .schema.layout.layoutAttributes.polar.radialaxis.autotypenumbers
	Autotypenumbers LayoutPolarRadialaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	// .schema.layout.layoutAttributes.polar.radialaxis.calendar
	Calendar LayoutPolarRadialaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.polar.radialaxis.categoryarray
	Categoryarray *types.DataArrayType `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	// .schema.layout.layoutAttributes.polar.radialaxis.categoryarraysrc
	Categoryarraysrc types.StringType `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
	// .schema.layout.layoutAttributes.polar.radialaxis.categoryorder
	Categoryorder LayoutPolarRadialaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.polar.radialaxis.color
	Color types.Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.polar.radialaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.polar.radialaxis.exponentformat
	Exponentformat LayoutPolarRadialaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.polar.radialaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.polar.radialaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.polar.radialaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.polar.radialaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.polar.radialaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.polar.radialaxis.layer
	Layer LayoutPolarRadialaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.polar.radialaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.polar.radialaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	// .schema.layout.layoutAttributes.polar.radialaxis.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	// .schema.layout.layoutAttributes.polar.radialaxis.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.polar.radialaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.polar.radialaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	// .schema.layout.layoutAttributes.polar.radialaxis.range
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// arrayOK: false
	// default: tozero
	// type: enumerated
	// If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. If *normal*, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).
	// .schema.layout.layoutAttributes.polar.radialaxis.rangemode
	Rangemode LayoutPolarRadialaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.polar.radialaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.polar.radialaxis.showexponent
	Showexponent LayoutPolarRadialaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.polar.radialaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.polar.radialaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.polar.radialaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.polar.radialaxis.showtickprefix
	Showtickprefix LayoutPolarRadialaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.polar.radialaxis.showticksuffix
	Showticksuffix LayoutPolarRadialaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// arrayOK: false
	// default: clockwise
	// type: enumerated
	// Determines on which side of radial axis line the tick and tick labels appear.
	// .schema.layout.layoutAttributes.polar.radialaxis.side
	Side LayoutPolarRadialaxisSide `json:"side,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.polar.radialaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.radialaxis.tickfont
	Tickfont *LayoutPolarRadialaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.polar.radialaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutPolarRadialaxisTickformatstop
	// .schema.layout.layoutAttributes.polar.radialaxis.tickformatstops
	Tickformatstops []LayoutPolarRadialaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.polar.radialaxis.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.polar.radialaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.polar.radialaxis.tickmode
	Tickmode LayoutPolarRadialaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.polar.radialaxis.ticks
	Ticks LayoutPolarRadialaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.polar.radialaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.polar.radialaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.polar.radialaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.polar.radialaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.polar.radialaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.polar.radialaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.radialaxis.title
	Title *LayoutPolarRadialaxisTitle `json:"title,omitempty"`

	// Type
	// arrayOK: false
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	// .schema.layout.layoutAttributes.polar.radialaxis.type
	Type LayoutPolarRadialaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `range`, `autorange`, `angle`, and `title` if in `editable: true` configuration. Defaults to `polar<N>.uirevision`.
	// .schema.layout.layoutAttributes.polar.radialaxis.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.polar.radialaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// LayoutPolar
type LayoutPolar struct {

	// Angularaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.angularaxis
	Angularaxis *LayoutPolarAngularaxis `json:"angularaxis,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the subplot
	// .schema.layout.layoutAttributes.polar.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.domain
	Domain *LayoutPolarDomain `json:"domain,omitempty"`

	// Gridshape
	// arrayOK: false
	// default: circular
	// type: enumerated
	// Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).
	// .schema.layout.layoutAttributes.polar.gridshape
	Gridshape LayoutPolarGridshape `json:"gridshape,omitempty"`

	// Hole
	// arrayOK: false
	// type: number
	// Sets the fraction of the radius to cut out of the polar subplot.
	// .schema.layout.layoutAttributes.polar.hole
	Hole types.NumberType `json:"hole,omitempty"`

	// Radialaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.polar.radialaxis
	Radialaxis *LayoutPolarRadialaxis `json:"radialaxis,omitempty"`

	// Sector
	// arrayOK: false
	// type: info_array
	// Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with *0* corresponding to rightmost limit of the polar subplot.
	// .schema.layout.layoutAttributes.polar.sector
	Sector interface{} `json:"sector,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.polar.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutSceneAnnotation
type LayoutSceneAnnotation struct {

	// Align
	// arrayOK: false
	// default: center
	// type: enumerated
	// Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.align
	Align AnnotationAlign `json:"align,omitempty"`

	// Arrowcolor
	// arrayOK: false
	// type: color
	// Sets the color of the annotation arrow.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.arrowcolor
	Arrowcolor types.Color `json:"arrowcolor,omitempty"`

	// Arrowhead
	// arrayOK: false
	// type: integer
	// Sets the end annotation arrow head style.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.arrowhead
	Arrowhead types.IntegerType `json:"arrowhead,omitempty"`

	// Arrowside
	// arrayOK: false
	// default: end
	// type: flaglist
	// Sets the annotation arrow head position.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.arrowside
	Arrowside AnnotationArrowside `json:"arrowside,omitempty"`

	// Arrowsize
	// arrayOK: false
	// type: number
	// Sets the size of the end annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.arrowsize
	Arrowsize types.NumberType `json:"arrowsize,omitempty"`

	// Arrowwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of annotation arrow line.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.arrowwidth
	Arrowwidth types.NumberType `json:"arrowwidth,omitempty"`

	// Ax
	// arrayOK: false
	// type: number
	// Sets the x component of the arrow tail about the arrow head (in pixels).
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.ax
	Ax types.NumberType `json:"ax,omitempty"`

	// Ay
	// arrayOK: false
	// type: number
	// Sets the y component of the arrow tail about the arrow head (in pixels).
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.ay
	Ay types.NumberType `json:"ay,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the annotation.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the annotation `text`.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderpad
	// arrayOK: false
	// type: number
	// Sets the padding (in px) between the `text` and the enclosing border.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.borderpad
	Borderpad types.NumberType `json:"borderpad,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the annotation `text`.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Captureevents
	// arrayOK: false
	// type: boolean
	// Determines whether the annotation text box captures mouse move and click events, or allows those events to pass through to data points in the plot that may be behind the annotation. By default `captureevents` is *false* unless `hovertext` is provided. If you use the event `plotly_clickannotation` without `hovertext` you must explicitly enable `captureevents`.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.captureevents
	Captureevents types.BoolType `json:"captureevents,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.font
	Font *AnnotationFont `json:"font,omitempty"`

	// Height
	// arrayOK: false
	// type: number
	// Sets an explicit height for the text box. null (default) lets the text set the box height. Taller text will be clipped.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.height
	Height types.NumberType `json:"height,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.hoverlabel
	Hoverlabel *AnnotationHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertext
	// arrayOK: false
	// type: string
	// Sets text to appear when hovering over this annotation. If omitted or blank, no hover label will appear.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.hovertext
	Hovertext types.StringType `json:"hovertext,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the annotation (text + arrow).
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Showarrow
	// arrayOK: false
	// type: boolean
	// Determines whether or not the annotation is drawn with an arrow. If *true*, `text` is placed near the arrow's tail. If *false*, `text` lines up with the `x` and `y` provided.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.showarrow
	Showarrow types.BoolType `json:"showarrow,omitempty"`

	// Standoff
	// arrayOK: false
	// type: number
	// Sets a distance, in pixels, to move the end arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.standoff
	Standoff types.NumberType `json:"standoff,omitempty"`

	// Startarrowhead
	// arrayOK: false
	// type: integer
	// Sets the start annotation arrow head style.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.startarrowhead
	Startarrowhead types.IntegerType `json:"startarrowhead,omitempty"`

	// Startarrowsize
	// arrayOK: false
	// type: number
	// Sets the size of the start annotation arrow head, relative to `arrowwidth`. A value of 1 (default) gives a head about 3x as wide as the line.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.startarrowsize
	Startarrowsize types.NumberType `json:"startarrowsize,omitempty"`

	// Startstandoff
	// arrayOK: false
	// type: number
	// Sets a distance, in pixels, to move the start arrowhead away from the position it is pointing at, for example to point at the edge of a marker independent of zoom. Note that this shortens the arrow from the `ax` / `ay` vector, in contrast to `xshift` / `yshift` which moves everything by this amount.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.startstandoff
	Startstandoff types.NumberType `json:"startstandoff,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the text associated with this annotation. Plotly uses a subset of HTML tags to do things like newline (<br>), bold (<b></b>), italics (<i></i>), hyperlinks (<a href='...'></a>). Tags <em>, <sup>, <sub>, <s>, <u> <span> are also supported.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.text
	Text types.StringType `json:"text,omitempty"`

	// Textangle
	// arrayOK: false
	// type: angle
	// Sets the angle at which the `text` is drawn with respect to the horizontal.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.textangle
	Textangle types.NumberType `json:"textangle,omitempty"`

	// Valign
	// arrayOK: false
	// default: middle
	// type: enumerated
	// Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.valign
	Valign AnnotationValign `json:"valign,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this annotation is visible.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets an explicit width for the text box. null (default) lets the text set the box width. Wider text will be clipped. There is no automatic wrapping; use <br> to start a new line.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.width
	Width types.NumberType `json:"width,omitempty"`

	// X
	// arrayOK: false
	// type: any
	// Sets the annotation's x position.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.x
	X interface{} `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.xanchor
	Xanchor AnnotationXanchor `json:"xanchor,omitempty"`

	// Xshift
	// arrayOK: false
	// type: number
	// Shifts the position of the whole annotation and arrow to the right (positive) or left (negative) by this many pixels.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.xshift
	Xshift types.NumberType `json:"xshift,omitempty"`

	// Y
	// arrayOK: false
	// type: any
	// Sets the annotation's y position.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.y
	Y interface{} `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.yanchor
	Yanchor AnnotationYanchor `json:"yanchor,omitempty"`

	// Yshift
	// arrayOK: false
	// type: number
	// Shifts the position of the whole annotation and arrow up (positive) or down (negative) by this many pixels.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.yshift
	Yshift types.NumberType `json:"yshift,omitempty"`

	// Z
	// arrayOK: false
	// type: any
	// Sets the annotation's z position.
	// .schema.layout.layoutAttributes.scene.annotations.items.annotation.z
	Z interface{} `json:"z,omitempty"`
}

// LayoutSceneAspectratio Sets this scene's axis aspectratio.
type LayoutSceneAspectratio struct {

	// X
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.aspectratio.x
	X types.NumberType `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.aspectratio.y
	Y types.NumberType `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.aspectratio.z
	Z types.NumberType `json:"z,omitempty"`
}

// LayoutSceneCameraCenter Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.
type LayoutSceneCameraCenter struct {

	// X
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.center.x
	X types.NumberType `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.center.y
	Y types.NumberType `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.center.z
	Z types.NumberType `json:"z,omitempty"`
}

// LayoutSceneCameraEye Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.
type LayoutSceneCameraEye struct {

	// X
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.eye.x
	X types.NumberType `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.eye.y
	Y types.NumberType `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.eye.z
	Z types.NumberType `json:"z,omitempty"`
}

// LayoutSceneCameraProjection
type LayoutSceneCameraProjection struct {

	// Type
	// arrayOK: false
	// default: perspective
	// type: enumerated
	// Sets the projection type. The projection type could be either *perspective* or *orthographic*. The default is *perspective*.
	// .schema.layout.layoutAttributes.scene.camera.projection.type
	Type LayoutSceneCameraProjectionType `json:"type,omitempty"`
}

// LayoutSceneCameraUp Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.
type LayoutSceneCameraUp struct {

	// X
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.up.x
	X types.NumberType `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.up.y
	Y types.NumberType `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.camera.up.z
	Z types.NumberType `json:"z,omitempty"`
}

// LayoutSceneCamera
type LayoutSceneCamera struct {

	// Center
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.camera.center
	Center *LayoutSceneCameraCenter `json:"center,omitempty"`

	// Eye
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.camera.eye
	Eye *LayoutSceneCameraEye `json:"eye,omitempty"`

	// Projection
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.camera.projection
	Projection *LayoutSceneCameraProjection `json:"projection,omitempty"`

	// Up
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.camera.up
	Up *LayoutSceneCameraUp `json:"up,omitempty"`
}

// LayoutSceneDomain
type LayoutSceneDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this scene subplot .
	// .schema.layout.layoutAttributes.scene.domain.column
	Column types.IntegerType `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this scene subplot .
	// .schema.layout.layoutAttributes.scene.domain.row
	Row types.IntegerType `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this scene subplot (in plot fraction).
	// .schema.layout.layoutAttributes.scene.domain.x
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this scene subplot (in plot fraction).
	// .schema.layout.layoutAttributes.scene.domain.y
	Y interface{} `json:"y,omitempty"`
}

// LayoutSceneXaxisAutorangeoptions
type LayoutSceneXaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	// .schema.layout.layoutAttributes.scene.xaxis.autorangeoptions.clipmax
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	// .schema.layout.layoutAttributes.scene.xaxis.autorangeoptions.clipmin
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	// .schema.layout.layoutAttributes.scene.xaxis.autorangeoptions.include
	Include *types.ArrayOK[*interface{}] `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	// .schema.layout.layoutAttributes.scene.xaxis.autorangeoptions.includesrc
	Includesrc types.StringType `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	// .schema.layout.layoutAttributes.scene.xaxis.autorangeoptions.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	// .schema.layout.layoutAttributes.scene.xaxis.autorangeoptions.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutSceneXaxisTickfont Sets the tick font.
type LayoutSceneXaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.lineposition
	Lineposition LayoutSceneXaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.style
	Style LayoutSceneXaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.textcase
	Textcase LayoutSceneXaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.variant
	Variant LayoutSceneXaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSceneXaxisTickformatstop
type LayoutSceneXaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.scene.xaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.scene.xaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.scene.xaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.scene.xaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.scene.xaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutSceneXaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutSceneXaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.lineposition
	Lineposition LayoutSceneXaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.style
	Style LayoutSceneXaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.textcase
	Textcase LayoutSceneXaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.variant
	Variant LayoutSceneXaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.scene.xaxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSceneXaxisTitle
type LayoutSceneXaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.xaxis.title.font
	Font *LayoutSceneXaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.scene.xaxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutSceneXaxis
type LayoutSceneXaxis struct {

	// Autorange
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	// .schema.layout.layoutAttributes.scene.xaxis.autorange
	Autorange LayoutSceneXaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.xaxis.autorangeoptions
	Autorangeoptions *LayoutSceneXaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	// .schema.layout.layoutAttributes.scene.xaxis.autotypenumbers
	Autotypenumbers LayoutSceneXaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor
	// arrayOK: false
	// type: color
	// Sets the background color of this axis' wall.
	// .schema.layout.layoutAttributes.scene.xaxis.backgroundcolor
	Backgroundcolor types.Color `json:"backgroundcolor,omitempty"`

	// Calendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	// .schema.layout.layoutAttributes.scene.xaxis.calendar
	Calendar LayoutSceneXaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.xaxis.categoryarray
	Categoryarray *types.DataArrayType `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	// .schema.layout.layoutAttributes.scene.xaxis.categoryarraysrc
	Categoryarraysrc types.StringType `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
	// .schema.layout.layoutAttributes.scene.xaxis.categoryorder
	Categoryorder LayoutSceneXaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.scene.xaxis.color
	Color types.Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.scene.xaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.scene.xaxis.exponentformat
	Exponentformat LayoutSceneXaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.scene.xaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.scene.xaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.scene.xaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.scene.xaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.scene.xaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.scene.xaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	// .schema.layout.layoutAttributes.scene.xaxis.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	// .schema.layout.layoutAttributes.scene.xaxis.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.scene.xaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Mirror
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	// .schema.layout.layoutAttributes.scene.xaxis.mirror
	Mirror LayoutSceneXaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.scene.xaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	// .schema.layout.layoutAttributes.scene.xaxis.range
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// arrayOK: false
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	// .schema.layout.layoutAttributes.scene.xaxis.rangemode
	Rangemode LayoutSceneXaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.scene.xaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showaxeslabels
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis is labeled
	// .schema.layout.layoutAttributes.scene.xaxis.showaxeslabels
	Showaxeslabels types.BoolType `json:"showaxeslabels,omitempty"`

	// Showbackground
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis' wall has a background color.
	// .schema.layout.layoutAttributes.scene.xaxis.showbackground
	Showbackground types.BoolType `json:"showbackground,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.scene.xaxis.showexponent
	Showexponent LayoutSceneXaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.scene.xaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.scene.xaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	// .schema.layout.layoutAttributes.scene.xaxis.showspikes
	Showspikes types.BoolType `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.scene.xaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.scene.xaxis.showtickprefix
	Showtickprefix LayoutSceneXaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.scene.xaxis.showticksuffix
	Showticksuffix LayoutSceneXaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the color of the spikes.
	// .schema.layout.layoutAttributes.scene.xaxis.spikecolor
	Spikecolor types.Color `json:"spikecolor,omitempty"`

	// Spikesides
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	// .schema.layout.layoutAttributes.scene.xaxis.spikesides
	Spikesides types.BoolType `json:"spikesides,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the thickness (in px) of the spikes.
	// .schema.layout.layoutAttributes.scene.xaxis.spikethickness
	Spikethickness types.NumberType `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.scene.xaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.scene.xaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.scene.xaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.xaxis.tickfont
	Tickfont *LayoutSceneXaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.scene.xaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutSceneXaxisTickformatstop
	// .schema.layout.layoutAttributes.scene.xaxis.tickformatstops
	Tickformatstops []LayoutSceneXaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.scene.xaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.scene.xaxis.tickmode
	Tickmode LayoutSceneXaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.scene.xaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.scene.xaxis.ticks
	Ticks LayoutSceneXaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.scene.xaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.xaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.scene.xaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.xaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.scene.xaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.scene.xaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.xaxis.title
	Title *LayoutSceneXaxisTitle `json:"title,omitempty"`

	// Type
	// arrayOK: false
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	// .schema.layout.layoutAttributes.scene.xaxis.type
	Type LayoutSceneXaxisType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.scene.xaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	// .schema.layout.layoutAttributes.scene.xaxis.zeroline
	Zeroline types.BoolType `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	// .schema.layout.layoutAttributes.scene.xaxis.zerolinecolor
	Zerolinecolor types.Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	// .schema.layout.layoutAttributes.scene.xaxis.zerolinewidth
	Zerolinewidth types.NumberType `json:"zerolinewidth,omitempty"`
}

// LayoutSceneYaxisAutorangeoptions
type LayoutSceneYaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	// .schema.layout.layoutAttributes.scene.yaxis.autorangeoptions.clipmax
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	// .schema.layout.layoutAttributes.scene.yaxis.autorangeoptions.clipmin
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	// .schema.layout.layoutAttributes.scene.yaxis.autorangeoptions.include
	Include *types.ArrayOK[*interface{}] `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	// .schema.layout.layoutAttributes.scene.yaxis.autorangeoptions.includesrc
	Includesrc types.StringType `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	// .schema.layout.layoutAttributes.scene.yaxis.autorangeoptions.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	// .schema.layout.layoutAttributes.scene.yaxis.autorangeoptions.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutSceneYaxisTickfont Sets the tick font.
type LayoutSceneYaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.lineposition
	Lineposition LayoutSceneYaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.style
	Style LayoutSceneYaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.textcase
	Textcase LayoutSceneYaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.variant
	Variant LayoutSceneYaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSceneYaxisTickformatstop
type LayoutSceneYaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.scene.yaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.scene.yaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.scene.yaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.scene.yaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.scene.yaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutSceneYaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutSceneYaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.lineposition
	Lineposition LayoutSceneYaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.style
	Style LayoutSceneYaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.textcase
	Textcase LayoutSceneYaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.variant
	Variant LayoutSceneYaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.scene.yaxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSceneYaxisTitle
type LayoutSceneYaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.yaxis.title.font
	Font *LayoutSceneYaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.scene.yaxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutSceneYaxis
type LayoutSceneYaxis struct {

	// Autorange
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	// .schema.layout.layoutAttributes.scene.yaxis.autorange
	Autorange LayoutSceneYaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.yaxis.autorangeoptions
	Autorangeoptions *LayoutSceneYaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	// .schema.layout.layoutAttributes.scene.yaxis.autotypenumbers
	Autotypenumbers LayoutSceneYaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor
	// arrayOK: false
	// type: color
	// Sets the background color of this axis' wall.
	// .schema.layout.layoutAttributes.scene.yaxis.backgroundcolor
	Backgroundcolor types.Color `json:"backgroundcolor,omitempty"`

	// Calendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	// .schema.layout.layoutAttributes.scene.yaxis.calendar
	Calendar LayoutSceneYaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.yaxis.categoryarray
	Categoryarray *types.DataArrayType `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	// .schema.layout.layoutAttributes.scene.yaxis.categoryarraysrc
	Categoryarraysrc types.StringType `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
	// .schema.layout.layoutAttributes.scene.yaxis.categoryorder
	Categoryorder LayoutSceneYaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.scene.yaxis.color
	Color types.Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.scene.yaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.scene.yaxis.exponentformat
	Exponentformat LayoutSceneYaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.scene.yaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.scene.yaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.scene.yaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.scene.yaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.scene.yaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.scene.yaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	// .schema.layout.layoutAttributes.scene.yaxis.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	// .schema.layout.layoutAttributes.scene.yaxis.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.scene.yaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Mirror
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	// .schema.layout.layoutAttributes.scene.yaxis.mirror
	Mirror LayoutSceneYaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.scene.yaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	// .schema.layout.layoutAttributes.scene.yaxis.range
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// arrayOK: false
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	// .schema.layout.layoutAttributes.scene.yaxis.rangemode
	Rangemode LayoutSceneYaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.scene.yaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showaxeslabels
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis is labeled
	// .schema.layout.layoutAttributes.scene.yaxis.showaxeslabels
	Showaxeslabels types.BoolType `json:"showaxeslabels,omitempty"`

	// Showbackground
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis' wall has a background color.
	// .schema.layout.layoutAttributes.scene.yaxis.showbackground
	Showbackground types.BoolType `json:"showbackground,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.scene.yaxis.showexponent
	Showexponent LayoutSceneYaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.scene.yaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.scene.yaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	// .schema.layout.layoutAttributes.scene.yaxis.showspikes
	Showspikes types.BoolType `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.scene.yaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.scene.yaxis.showtickprefix
	Showtickprefix LayoutSceneYaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.scene.yaxis.showticksuffix
	Showticksuffix LayoutSceneYaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the color of the spikes.
	// .schema.layout.layoutAttributes.scene.yaxis.spikecolor
	Spikecolor types.Color `json:"spikecolor,omitempty"`

	// Spikesides
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	// .schema.layout.layoutAttributes.scene.yaxis.spikesides
	Spikesides types.BoolType `json:"spikesides,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the thickness (in px) of the spikes.
	// .schema.layout.layoutAttributes.scene.yaxis.spikethickness
	Spikethickness types.NumberType `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.scene.yaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.scene.yaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.scene.yaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.yaxis.tickfont
	Tickfont *LayoutSceneYaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.scene.yaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutSceneYaxisTickformatstop
	// .schema.layout.layoutAttributes.scene.yaxis.tickformatstops
	Tickformatstops []LayoutSceneYaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.scene.yaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.scene.yaxis.tickmode
	Tickmode LayoutSceneYaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.scene.yaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.scene.yaxis.ticks
	Ticks LayoutSceneYaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.scene.yaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.yaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.scene.yaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.yaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.scene.yaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.scene.yaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.yaxis.title
	Title *LayoutSceneYaxisTitle `json:"title,omitempty"`

	// Type
	// arrayOK: false
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	// .schema.layout.layoutAttributes.scene.yaxis.type
	Type LayoutSceneYaxisType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.scene.yaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	// .schema.layout.layoutAttributes.scene.yaxis.zeroline
	Zeroline types.BoolType `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	// .schema.layout.layoutAttributes.scene.yaxis.zerolinecolor
	Zerolinecolor types.Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	// .schema.layout.layoutAttributes.scene.yaxis.zerolinewidth
	Zerolinewidth types.NumberType `json:"zerolinewidth,omitempty"`
}

// LayoutSceneZaxisAutorangeoptions
type LayoutSceneZaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	// .schema.layout.layoutAttributes.scene.zaxis.autorangeoptions.clipmax
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	// .schema.layout.layoutAttributes.scene.zaxis.autorangeoptions.clipmin
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	// .schema.layout.layoutAttributes.scene.zaxis.autorangeoptions.include
	Include *types.ArrayOK[*interface{}] `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	// .schema.layout.layoutAttributes.scene.zaxis.autorangeoptions.includesrc
	Includesrc types.StringType `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	// .schema.layout.layoutAttributes.scene.zaxis.autorangeoptions.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	// .schema.layout.layoutAttributes.scene.zaxis.autorangeoptions.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutSceneZaxisTickfont Sets the tick font.
type LayoutSceneZaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.lineposition
	Lineposition LayoutSceneZaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.style
	Style LayoutSceneZaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.textcase
	Textcase LayoutSceneZaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.variant
	Variant LayoutSceneZaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSceneZaxisTickformatstop
type LayoutSceneZaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.scene.zaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.scene.zaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.scene.zaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.scene.zaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.scene.zaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutSceneZaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutSceneZaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.lineposition
	Lineposition LayoutSceneZaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.style
	Style LayoutSceneZaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.textcase
	Textcase LayoutSceneZaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.variant
	Variant LayoutSceneZaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.scene.zaxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSceneZaxisTitle
type LayoutSceneZaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.zaxis.title.font
	Font *LayoutSceneZaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.scene.zaxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutSceneZaxis
type LayoutSceneZaxis struct {

	// Autorange
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	// .schema.layout.layoutAttributes.scene.zaxis.autorange
	Autorange LayoutSceneZaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.zaxis.autorangeoptions
	Autorangeoptions *LayoutSceneZaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	// .schema.layout.layoutAttributes.scene.zaxis.autotypenumbers
	Autotypenumbers LayoutSceneZaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor
	// arrayOK: false
	// type: color
	// Sets the background color of this axis' wall.
	// .schema.layout.layoutAttributes.scene.zaxis.backgroundcolor
	Backgroundcolor types.Color `json:"backgroundcolor,omitempty"`

	// Calendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	// .schema.layout.layoutAttributes.scene.zaxis.calendar
	Calendar LayoutSceneZaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.zaxis.categoryarray
	Categoryarray *types.DataArrayType `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	// .schema.layout.layoutAttributes.scene.zaxis.categoryarraysrc
	Categoryarraysrc types.StringType `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
	// .schema.layout.layoutAttributes.scene.zaxis.categoryorder
	Categoryorder LayoutSceneZaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.scene.zaxis.color
	Color types.Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.scene.zaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.scene.zaxis.exponentformat
	Exponentformat LayoutSceneZaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.scene.zaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.scene.zaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.scene.zaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.scene.zaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.scene.zaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.scene.zaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	// .schema.layout.layoutAttributes.scene.zaxis.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	// .schema.layout.layoutAttributes.scene.zaxis.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.scene.zaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Mirror
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	// .schema.layout.layoutAttributes.scene.zaxis.mirror
	Mirror LayoutSceneZaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.scene.zaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	// .schema.layout.layoutAttributes.scene.zaxis.range
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// arrayOK: false
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	// .schema.layout.layoutAttributes.scene.zaxis.rangemode
	Rangemode LayoutSceneZaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.scene.zaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showaxeslabels
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis is labeled
	// .schema.layout.layoutAttributes.scene.zaxis.showaxeslabels
	Showaxeslabels types.BoolType `json:"showaxeslabels,omitempty"`

	// Showbackground
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis' wall has a background color.
	// .schema.layout.layoutAttributes.scene.zaxis.showbackground
	Showbackground types.BoolType `json:"showbackground,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.scene.zaxis.showexponent
	Showexponent LayoutSceneZaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.scene.zaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.scene.zaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	// .schema.layout.layoutAttributes.scene.zaxis.showspikes
	Showspikes types.BoolType `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.scene.zaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.scene.zaxis.showtickprefix
	Showtickprefix LayoutSceneZaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.scene.zaxis.showticksuffix
	Showticksuffix LayoutSceneZaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the color of the spikes.
	// .schema.layout.layoutAttributes.scene.zaxis.spikecolor
	Spikecolor types.Color `json:"spikecolor,omitempty"`

	// Spikesides
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	// .schema.layout.layoutAttributes.scene.zaxis.spikesides
	Spikesides types.BoolType `json:"spikesides,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the thickness (in px) of the spikes.
	// .schema.layout.layoutAttributes.scene.zaxis.spikethickness
	Spikethickness types.NumberType `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.scene.zaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.scene.zaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.scene.zaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.zaxis.tickfont
	Tickfont *LayoutSceneZaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.scene.zaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutSceneZaxisTickformatstop
	// .schema.layout.layoutAttributes.scene.zaxis.tickformatstops
	Tickformatstops []LayoutSceneZaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.scene.zaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.scene.zaxis.tickmode
	Tickmode LayoutSceneZaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.scene.zaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.scene.zaxis.ticks
	Ticks LayoutSceneZaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.scene.zaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.zaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.scene.zaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.scene.zaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.scene.zaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.scene.zaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.zaxis.title
	Title *LayoutSceneZaxisTitle `json:"title,omitempty"`

	// Type
	// arrayOK: false
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	// .schema.layout.layoutAttributes.scene.zaxis.type
	Type LayoutSceneZaxisType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.scene.zaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	// .schema.layout.layoutAttributes.scene.zaxis.zeroline
	Zeroline types.BoolType `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	// .schema.layout.layoutAttributes.scene.zaxis.zerolinecolor
	Zerolinecolor types.Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	// .schema.layout.layoutAttributes.scene.zaxis.zerolinewidth
	Zerolinewidth types.NumberType `json:"zerolinewidth,omitempty"`
}

// LayoutScene
type LayoutScene struct {

	// Annotations
	// role: Object
	// items: LayoutSceneAnnotation
	// .schema.layout.layoutAttributes.scene.annotations
	Annotations []LayoutSceneAnnotation `json:"annotations,omitempty"`

	// Aspectmode
	// arrayOK: false
	// default: auto
	// type: enumerated
	// If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.
	// .schema.layout.layoutAttributes.scene.aspectmode
	Aspectmode LayoutSceneAspectmode `json:"aspectmode,omitempty"`

	// Aspectratio
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.aspectratio
	Aspectratio *LayoutSceneAspectratio `json:"aspectratio,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.scene.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Camera
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.camera
	Camera *LayoutSceneCamera `json:"camera,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.domain
	Domain *LayoutSceneDomain `json:"domain,omitempty"`

	// Dragmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the mode of drag interactions for this scene.
	// .schema.layout.layoutAttributes.scene.dragmode
	Dragmode LayoutSceneDragmode `json:"dragmode,omitempty"`

	// Hovermode
	// arrayOK: false
	// default: closest
	// type: enumerated
	// Determines the mode of hover interactions for this scene.
	// .schema.layout.layoutAttributes.scene.hovermode
	Hovermode LayoutSceneHovermode `json:"hovermode,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.scene.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Xaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.xaxis
	Xaxis *LayoutSceneXaxis `json:"xaxis,omitempty"`

	// Yaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.yaxis
	Yaxis *LayoutSceneYaxis `json:"yaxis,omitempty"`

	// Zaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.scene.zaxis
	Zaxis *LayoutSceneZaxis `json:"zaxis,omitempty"`
}

// SelectionLine
type SelectionLine struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the line color.
	// .schema.layout.layoutAttributes.selections.items.selection.line.color
	Color types.Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.selections.items.selection.line.dash
	Dash types.StringType `json:"dash,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (in px).
	// .schema.layout.layoutAttributes.selections.items.selection.line.width
	Width types.NumberType `json:"width,omitempty"`
}

// LayoutSelection
type LayoutSelection struct {

	// Line
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.selections.items.selection.line
	Line *SelectionLine `json:"line,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.selections.items.selection.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the selection.
	// .schema.layout.layoutAttributes.selections.items.selection.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Path
	// arrayOK: false
	// type: string
	// For `type` *path* - a valid SVG path similar to `shapes.path` in data coordinates. Allowed segments are: M, L and Z.
	// .schema.layout.layoutAttributes.selections.items.selection.path
	Path types.StringType `json:"path,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.selections.items.selection.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Type
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Specifies the selection type to be drawn. If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`) and (`x0`,`y1`). If *path*, draw a custom SVG path using `path`.
	// .schema.layout.layoutAttributes.selections.items.selection.type
	Type SelectionType `json:"type,omitempty"`

	// X0
	// arrayOK: false
	// type: any
	// Sets the selection's starting x position.
	// .schema.layout.layoutAttributes.selections.items.selection.x0
	X0 interface{} `json:"x0,omitempty"`

	// X1
	// arrayOK: false
	// type: any
	// Sets the selection's end x position.
	// .schema.layout.layoutAttributes.selections.items.selection.x1
	X1 interface{} `json:"x1,omitempty"`

	// Xref
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the selection's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
	// .schema.layout.layoutAttributes.selections.items.selection.xref
	Xref SelectionXref `json:"xref,omitempty"`

	// Y0
	// arrayOK: false
	// type: any
	// Sets the selection's starting y position.
	// .schema.layout.layoutAttributes.selections.items.selection.y0
	Y0 interface{} `json:"y0,omitempty"`

	// Y1
	// arrayOK: false
	// type: any
	// Sets the selection's end y position.
	// .schema.layout.layoutAttributes.selections.items.selection.y1
	Y1 interface{} `json:"y1,omitempty"`

	// Yref
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the selection's x coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
	// .schema.layout.layoutAttributes.selections.items.selection.yref
	Yref SelectionYref `json:"yref,omitempty"`
}

// ShapeLabelFont Sets the shape label text font.
type ShapeLabelFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.lineposition
	Lineposition ShapeLabelFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.style
	Style ShapeLabelFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.textcase
	Textcase ShapeLabelFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.variant
	Variant ShapeLabelFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ShapeLabel
type ShapeLabel struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.shapes.items.shape.label.font
	Font *ShapeLabelFont `json:"font,omitempty"`

	// Padding
	// arrayOK: false
	// type: number
	// Sets padding (in px) between edge of label and edge of shape.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.padding
	Padding types.NumberType `json:"padding,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the text to display with shape. It is also used for legend item if `name` is not provided.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.text
	Text types.StringType `json:"text,omitempty"`

	// Textangle
	// arrayOK: false
	// type: angle
	// Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle *auto* is the same angle as the line. For all other shapes, angle *auto* is horizontal.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.textangle
	Textangle types.NumberType `json:"textangle,omitempty"`

	// Textposition
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the position of the label text relative to the shape. Supported values for rectangles, circles and paths are *top left*, *top center*, *top right*, *middle left*, *middle center*, *middle right*, *bottom left*, *bottom center*, and *bottom right*. Supported values for lines are *start*, *middle*, and *end*. Default: *middle center* for rectangles, circles, and paths; *middle* for lines.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.textposition
	Textposition ShapeLabelTextposition `json:"textposition,omitempty"`

	// Texttemplate
	// arrayOK: false
	// type: string
	// Template string used for rendering the shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example "x0: %{x0}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{x0:$.2f}". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{x0|%m %b %Y}". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example "Length in cm: %{x0*2.54}", "%{slope*60:.1f} meters per second." For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.texttemplate
	Texttemplate types.StringType `json:"texttemplate,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the *left*, *center* or *right* of the label text. For example, if `textposition` is set to *top right* and `xanchor` to *right* then the right-most portion of the label text lines up with the right-most edge of the shape.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.xanchor
	Xanchor ShapeLabelXanchor `json:"xanchor,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the label's vertical position anchor This anchor binds the specified `textposition` to the *top*, *middle* or *bottom* of the label text. For example, if `textposition` is set to *top right* and `yanchor` to *top* then the top-most portion of the label text lines up with the top-most edge of the shape.
	// .schema.layout.layoutAttributes.shapes.items.shape.label.yanchor
	Yanchor ShapeLabelYanchor `json:"yanchor,omitempty"`
}

// ShapeLegendgrouptitleFont Sets this legend group's title font.
type ShapeLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.lineposition
	Lineposition ShapeLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.style
	Style ShapeLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.textcase
	Textcase ShapeLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.variant
	Variant ShapeLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ShapeLegendgrouptitle
type ShapeLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font
	Font *ShapeLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.text
	Text types.StringType `json:"text,omitempty"`
}

// ShapeLine
type ShapeLine struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the line color.
	// .schema.layout.layoutAttributes.shapes.items.shape.line.color
	Color types.Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.shapes.items.shape.line.dash
	Dash types.StringType `json:"dash,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (in px).
	// .schema.layout.layoutAttributes.shapes.items.shape.line.width
	Width types.NumberType `json:"width,omitempty"`
}

// LayoutShape
type LayoutShape struct {

	// Editable
	// arrayOK: false
	// type: boolean
	// Determines whether the shape could be activated for edit or not. Has no effect when the older editable shapes mode is enabled via `config.editable` or `config.edits.shapePosition`.
	// .schema.layout.layoutAttributes.shapes.items.shape.editable
	Editable types.BoolType `json:"editable,omitempty"`

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the color filling the shape's interior. Only applies to closed shapes.
	// .schema.layout.layoutAttributes.shapes.items.shape.fillcolor
	Fillcolor types.Color `json:"fillcolor,omitempty"`

	// Fillrule
	// arrayOK: false
	// default: evenodd
	// type: enumerated
	// Determines which regions of complex paths constitute the interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
	// .schema.layout.layoutAttributes.shapes.items.shape.fillrule
	Fillrule ShapeFillrule `json:"fillrule,omitempty"`

	// Label
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.shapes.items.shape.label
	Label *ShapeLabel `json:"label,omitempty"`

	// Layer
	// arrayOK: false
	// default: above
	// type: enumerated
	// Specifies whether shapes are drawn below gridlines (*below*), between gridlines and traces (*between*) or above traces (*above*).
	// .schema.layout.layoutAttributes.shapes.items.shape.layer
	Layer ShapeLayer `json:"layer,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this shape in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	// .schema.layout.layoutAttributes.shapes.items.shape.legend
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgroup
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle
	Legendgrouptitle *ShapeLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this shape. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendrank
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this shape.
	// .schema.layout.layoutAttributes.shapes.items.shape.legendwidth
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.shapes.items.shape.line
	Line *ShapeLine `json:"line,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.shapes.items.shape.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the shape.
	// .schema.layout.layoutAttributes.shapes.items.shape.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Path
	// arrayOK: false
	// type: string
	// For `type` *path* - a valid SVG path with the pixel values replaced by data values in `xsizemode`/`ysizemode` being *scaled* and taken unmodified as pixels relative to `xanchor` and `yanchor` in case of *pixel* size mode. There are a few restrictions / quirks only absolute instructions, not relative. So the allowed segments are: M, L, H, V, Q, C, T, S, and Z arcs (A) are not allowed because radius rx and ry are relative. In the future we could consider supporting relative commands, but we would have to decide on how to handle date and log axes. Note that even as is, Q and C Bezier paths that are smooth on linear axes may not be smooth on log, and vice versa. no chained "polybezier" commands - specify the segment type for each one. On category axes, values are numbers scaled to the serial numbers of categories because using the categories themselves there would be no way to describe fractional positions On data axes: because space and T are both normal components of path strings, we can't use either to separate date from time parts. Therefore we'll use underscore for this purpose: 2015-02-21_13:45:56.789
	// .schema.layout.layoutAttributes.shapes.items.shape.path
	Path types.StringType `json:"path,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not this shape is shown in the legend.
	// .schema.layout.layoutAttributes.shapes.items.shape.showlegend
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.shapes.items.shape.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Type
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) with respect to the axes' sizing mode. If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) with respect to the axes' sizing mode. If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) with respect to the axes' sizing mode. If *path*, draw a custom SVG path using `path`. with respect to the axes' sizing mode.
	// .schema.layout.layoutAttributes.shapes.items.shape.type
	Type ShapeType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this shape is visible. If *legendonly*, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	// .schema.layout.layoutAttributes.shapes.items.shape.visible
	Visible ShapeVisible `json:"visible,omitempty"`

	// X0
	// arrayOK: false
	// type: any
	// Sets the shape's starting x position. See `type` and `xsizemode` for more info.
	// .schema.layout.layoutAttributes.shapes.items.shape.x0
	X0 interface{} `json:"x0,omitempty"`

	// X0shift
	// arrayOK: false
	// type: number
	// Shifts `x0` away from the center of the category when `xref` is a *category* or *multicategory* axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.
	// .schema.layout.layoutAttributes.shapes.items.shape.x0shift
	X0shift types.NumberType `json:"x0shift,omitempty"`

	// X1
	// arrayOK: false
	// type: any
	// Sets the shape's end x position. See `type` and `xsizemode` for more info.
	// .schema.layout.layoutAttributes.shapes.items.shape.x1
	X1 interface{} `json:"x1,omitempty"`

	// X1shift
	// arrayOK: false
	// type: number
	// Shifts `x1` away from the center of the category when `xref` is a *category* or *multicategory* axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.
	// .schema.layout.layoutAttributes.shapes.items.shape.x1shift
	X1shift types.NumberType `json:"x1shift,omitempty"`

	// Xanchor
	// arrayOK: false
	// type: any
	// Only relevant in conjunction with `xsizemode` set to *pixel*. Specifies the anchor point on the x axis to which `x0`, `x1` and x coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `xsizemode` not set to *pixel*.
	// .schema.layout.layoutAttributes.shapes.items.shape.xanchor
	Xanchor interface{} `json:"xanchor,omitempty"`

	// Xref
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the shape's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
	// .schema.layout.layoutAttributes.shapes.items.shape.xref
	Xref ShapeXref `json:"xref,omitempty"`

	// Xsizemode
	// arrayOK: false
	// default: scaled
	// type: enumerated
	// Sets the shapes's sizing mode along the x axis. If set to *scaled*, `x0`, `x1` and x coordinates within `path` refer to data values on the x axis or a fraction of the plot area's width (`xref` set to *paper*). If set to *pixel*, `xanchor` specifies the x position in terms of data or plot fraction but `x0`, `x1` and x coordinates within `path` are pixels relative to `xanchor`. This way, the shape can have a fixed width while maintaining a position relative to data or plot fraction.
	// .schema.layout.layoutAttributes.shapes.items.shape.xsizemode
	Xsizemode ShapeXsizemode `json:"xsizemode,omitempty"`

	// Y0
	// arrayOK: false
	// type: any
	// Sets the shape's starting y position. See `type` and `ysizemode` for more info.
	// .schema.layout.layoutAttributes.shapes.items.shape.y0
	Y0 interface{} `json:"y0,omitempty"`

	// Y0shift
	// arrayOK: false
	// type: number
	// Shifts `y0` away from the center of the category when `yref` is a *category* or *multicategory* axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.
	// .schema.layout.layoutAttributes.shapes.items.shape.y0shift
	Y0shift types.NumberType `json:"y0shift,omitempty"`

	// Y1
	// arrayOK: false
	// type: any
	// Sets the shape's end y position. See `type` and `ysizemode` for more info.
	// .schema.layout.layoutAttributes.shapes.items.shape.y1
	Y1 interface{} `json:"y1,omitempty"`

	// Y1shift
	// arrayOK: false
	// type: number
	// Shifts `y1` away from the center of the category when `yref` is a *category* or *multicategory* axis. -0.5 corresponds to the start of the category and 0.5 corresponds to the end of the category.
	// .schema.layout.layoutAttributes.shapes.items.shape.y1shift
	Y1shift types.NumberType `json:"y1shift,omitempty"`

	// Yanchor
	// arrayOK: false
	// type: any
	// Only relevant in conjunction with `ysizemode` set to *pixel*. Specifies the anchor point on the y axis to which `y0`, `y1` and y coordinates within `path` are relative to. E.g. useful to attach a pixel sized shape to a certain data value. No effect when `ysizemode` not set to *pixel*.
	// .schema.layout.layoutAttributes.shapes.items.shape.yanchor
	Yanchor interface{} `json:"yanchor,omitempty"`

	// Yref
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the shape's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
	// .schema.layout.layoutAttributes.shapes.items.shape.yref
	Yref ShapeYref `json:"yref,omitempty"`

	// Ysizemode
	// arrayOK: false
	// default: scaled
	// type: enumerated
	// Sets the shapes's sizing mode along the y axis. If set to *scaled*, `y0`, `y1` and y coordinates within `path` refer to data values on the y axis or a fraction of the plot area's height (`yref` set to *paper*). If set to *pixel*, `yanchor` specifies the y position in terms of data or plot fraction but `y0`, `y1` and y coordinates within `path` are pixels relative to `yanchor`. This way, the shape can have a fixed height while maintaining a position relative to data or plot fraction.
	// .schema.layout.layoutAttributes.shapes.items.shape.ysizemode
	Ysizemode ShapeYsizemode `json:"ysizemode,omitempty"`
}

// SliderCurrentvalueFont Sets the font of the current value label text.
type SliderCurrentvalueFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.lineposition
	Lineposition SliderCurrentvalueFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.style
	Style SliderCurrentvalueFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.textcase
	Textcase SliderCurrentvalueFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.variant
	Variant SliderCurrentvalueFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// SliderCurrentvalue
type SliderCurrentvalue struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font
	Font *SliderCurrentvalueFont `json:"font,omitempty"`

	// Offset
	// arrayOK: false
	// type: number
	// The amount of space, in pixels, between the current value label and the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.offset
	Offset types.NumberType `json:"offset,omitempty"`

	// Prefix
	// arrayOK: false
	// type: string
	// When currentvalue.visible is true, this sets the prefix of the label.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.prefix
	Prefix types.StringType `json:"prefix,omitempty"`

	// Suffix
	// arrayOK: false
	// type: string
	// When currentvalue.visible is true, this sets the suffix of the label.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.suffix
	Suffix types.StringType `json:"suffix,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Shows the currently-selected value above the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: left
	// type: enumerated
	// The alignment of the value readout relative to the length of the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.xanchor
	Xanchor SliderCurrentvalueXanchor `json:"xanchor,omitempty"`
}

// SliderFont Sets the font of the slider step labels.
type SliderFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.sliders.items.slider.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.sliders.items.slider.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.sliders.items.slider.font.lineposition
	Lineposition SliderFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.sliders.items.slider.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.sliders.items.slider.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.sliders.items.slider.font.style
	Style SliderFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.sliders.items.slider.font.textcase
	Textcase SliderFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.sliders.items.slider.font.variant
	Variant SliderFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.sliders.items.slider.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// SliderPad Set the padding of the slider component along each side.
type SliderPad struct {

	// B
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the bottom of the component.
	// .schema.layout.layoutAttributes.sliders.items.slider.pad.b
	B types.NumberType `json:"b,omitempty"`

	// L
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the left side of the component.
	// .schema.layout.layoutAttributes.sliders.items.slider.pad.l
	L types.NumberType `json:"l,omitempty"`

	// R
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the right side of the component.
	// .schema.layout.layoutAttributes.sliders.items.slider.pad.r
	R types.NumberType `json:"r,omitempty"`

	// T
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the top of the component.
	// .schema.layout.layoutAttributes.sliders.items.slider.pad.t
	T types.NumberType `json:"t,omitempty"`
}

// SliderStep
type SliderStep struct {

	// Args
	// arrayOK: false
	// type: info_array
	// Sets the arguments values to be passed to the Plotly method set in `method` on slide.
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.args
	Args interface{} `json:"args,omitempty"`

	// Execute
	// arrayOK: false
	// type: boolean
	// When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_sliderchange` method and executing the API command manually without losing the benefit of the slider automatically binding to the state of the plot through the specification of `method` and `args`.
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.execute
	Execute types.BoolType `json:"execute,omitempty"`

	// Label
	// arrayOK: false
	// type: string
	// Sets the text label to appear on the slider
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.label
	Label types.StringType `json:"label,omitempty"`

	// Method
	// arrayOK: false
	// default: restyle
	// type: enumerated
	// Sets the Plotly method to be called when the slider value is changed. If the `skip` method is used, the API slider will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to slider events manually via JavaScript.
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.method
	Method StepMethod `json:"method,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// Sets the value of the slider step, used to refer to the step programatically. Defaults to the slider label if not provided.
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.value
	Value types.StringType `json:"value,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this step is included in the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// SliderTransition
type SliderTransition struct {

	// Duration
	// arrayOK: false
	// type: number
	// Sets the duration of the slider transition
	// .schema.layout.layoutAttributes.sliders.items.slider.transition.duration
	Duration types.NumberType `json:"duration,omitempty"`

	// Easing
	// arrayOK: false
	// default: cubic-in-out
	// type: enumerated
	// Sets the easing function of the slider transition
	// .schema.layout.layoutAttributes.sliders.items.slider.transition.easing
	Easing SliderTransitionEasing `json:"easing,omitempty"`
}

// LayoutSlider
type LayoutSlider struct {

	// Active
	// arrayOK: false
	// type: number
	// Determines which button (by index starting from 0) is considered active.
	// .schema.layout.layoutAttributes.sliders.items.slider.active
	Active types.NumberType `json:"active,omitempty"`

	// Activebgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the slider grip while dragging.
	// .schema.layout.layoutAttributes.sliders.items.slider.activebgcolor
	Activebgcolor types.Color `json:"activebgcolor,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Currentvalue
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue
	Currentvalue *SliderCurrentvalue `json:"currentvalue,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.sliders.items.slider.font
	Font *SliderFont `json:"font,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the slider This measure excludes the padding of both ends. That is, the slider's length is this length minus the padding on both ends.
	// .schema.layout.layoutAttributes.sliders.items.slider.len
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this slider length is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	// .schema.layout.layoutAttributes.sliders.items.slider.lenmode
	Lenmode SliderLenmode `json:"lenmode,omitempty"`

	// Minorticklen
	// arrayOK: false
	// type: number
	// Sets the length in pixels of minor step tick marks
	// .schema.layout.layoutAttributes.sliders.items.slider.minorticklen
	Minorticklen types.NumberType `json:"minorticklen,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.sliders.items.slider.name
	Name types.StringType `json:"name,omitempty"`

	// Pad
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.sliders.items.slider.pad
	Pad *SliderPad `json:"pad,omitempty"`

	// Steps
	// role: Object
	// items: SliderStep
	// .schema.layout.layoutAttributes.sliders.items.slider.steps
	Steps []SliderStep `json:"steps,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.sliders.items.slider.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the length in pixels of step tick marks
	// .schema.layout.layoutAttributes.sliders.items.slider.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.sliders.items.slider.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Transition
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.sliders.items.slider.transition
	Transition *SliderTransition `json:"transition,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not the slider is visible.
	// .schema.layout.layoutAttributes.sliders.items.slider.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position (in normalized coordinates) of the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: left
	// type: enumerated
	// Sets the slider's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
	// .schema.layout.layoutAttributes.sliders.items.slider.xanchor
	Xanchor SliderXanchor `json:"xanchor,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position (in normalized coordinates) of the slider.
	// .schema.layout.layoutAttributes.sliders.items.slider.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: top
	// type: enumerated
	// Sets the slider's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
	// .schema.layout.layoutAttributes.sliders.items.slider.yanchor
	Yanchor SliderYanchor `json:"yanchor,omitempty"`
}

// LayoutSmithDomain
type LayoutSmithDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this smith subplot .
	// .schema.layout.layoutAttributes.smith.domain.column
	Column types.IntegerType `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this smith subplot .
	// .schema.layout.layoutAttributes.smith.domain.row
	Row types.IntegerType `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this smith subplot (in plot fraction).
	// .schema.layout.layoutAttributes.smith.domain.x
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this smith subplot (in plot fraction).
	// .schema.layout.layoutAttributes.smith.domain.y
	Y interface{} `json:"y,omitempty"`
}

// LayoutSmithImaginaryaxisTickfont Sets the tick font.
type LayoutSmithImaginaryaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.lineposition
	Lineposition LayoutSmithImaginaryaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.style
	Style LayoutSmithImaginaryaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.textcase
	Textcase LayoutSmithImaginaryaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.variant
	Variant LayoutSmithImaginaryaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSmithImaginaryaxis
type LayoutSmithImaginaryaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.color
	Color types.Color `json:"color,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.layer
	Layer LayoutSmithImaginaryaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.showtickprefix
	Showtickprefix LayoutSmithImaginaryaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.showticksuffix
	Showticksuffix LayoutSmithImaginaryaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont
	Tickfont *LayoutSmithImaginaryaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.ticks
	Ticks LayoutSmithImaginaryaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.smith.imaginaryaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// LayoutSmithRealaxisTickfont Sets the tick font.
type LayoutSmithRealaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.lineposition
	Lineposition LayoutSmithRealaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.style
	Style LayoutSmithRealaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.textcase
	Textcase LayoutSmithRealaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.variant
	Variant LayoutSmithRealaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutSmithRealaxis
type LayoutSmithRealaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.smith.realaxis.color
	Color types.Color `json:"color,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.smith.realaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.smith.realaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.smith.realaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.smith.realaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.smith.realaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.smith.realaxis.layer
	Layer LayoutSmithRealaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.smith.realaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.smith.realaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.smith.realaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.smith.realaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.smith.realaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.smith.realaxis.showtickprefix
	Showtickprefix LayoutSmithRealaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.smith.realaxis.showticksuffix
	Showticksuffix LayoutSmithRealaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// arrayOK: false
	// default: top
	// type: enumerated
	// Determines on which side of real axis line the tick and tick labels appear.
	// .schema.layout.layoutAttributes.smith.realaxis.side
	Side LayoutSmithRealaxisSide `json:"side,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.smith.realaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.smith.realaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.smith.realaxis.tickfont
	Tickfont *LayoutSmithRealaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.smith.realaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.smith.realaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.smith.realaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *top* (*bottom*), this axis' are drawn above (below) the axis line.
	// .schema.layout.layoutAttributes.smith.realaxis.ticks
	Ticks LayoutSmithRealaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.smith.realaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.smith.realaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.smith.realaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.smith.realaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.smith.realaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// LayoutSmith
type LayoutSmith struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the subplot
	// .schema.layout.layoutAttributes.smith.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.smith.domain
	Domain *LayoutSmithDomain `json:"domain,omitempty"`

	// Imaginaryaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.smith.imaginaryaxis
	Imaginaryaxis *LayoutSmithImaginaryaxis `json:"imaginaryaxis,omitempty"`

	// Realaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.smith.realaxis
	Realaxis *LayoutSmithRealaxis `json:"realaxis,omitempty"`
}

// LayoutTernaryAaxisTickfont Sets the tick font.
type LayoutTernaryAaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.lineposition
	Lineposition LayoutTernaryAaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.style
	Style LayoutTernaryAaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.textcase
	Textcase LayoutTernaryAaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.variant
	Variant LayoutTernaryAaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTernaryAaxisTickformatstop
type LayoutTernaryAaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.ternary.aaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.ternary.aaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutTernaryAaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTernaryAaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.lineposition
	Lineposition LayoutTernaryAaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.style
	Style LayoutTernaryAaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.textcase
	Textcase LayoutTernaryAaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.variant
	Variant LayoutTernaryAaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTernaryAaxisTitle
type LayoutTernaryAaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.aaxis.title.font
	Font *LayoutTernaryAaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.ternary.aaxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutTernaryAaxis
type LayoutTernaryAaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.ternary.aaxis.color
	Color types.Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.ternary.aaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.ternary.aaxis.exponentformat
	Exponentformat LayoutTernaryAaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.ternary.aaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.ternary.aaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.ternary.aaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.ternary.aaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.ternary.aaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.ternary.aaxis.layer
	Layer LayoutTernaryAaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.ternary.aaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.ternary.aaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Min
	// arrayOK: false
	// type: number
	// The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	// .schema.layout.layoutAttributes.ternary.aaxis.min
	Min types.NumberType `json:"min,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.ternary.aaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.ternary.aaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.ternary.aaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.ternary.aaxis.showexponent
	Showexponent LayoutTernaryAaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.ternary.aaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.ternary.aaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.ternary.aaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.ternary.aaxis.showtickprefix
	Showtickprefix LayoutTernaryAaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.ternary.aaxis.showticksuffix
	Showticksuffix LayoutTernaryAaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.ternary.aaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.aaxis.tickfont
	Tickfont *LayoutTernaryAaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.ternary.aaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutTernaryAaxisTickformatstop
	// .schema.layout.layoutAttributes.ternary.aaxis.tickformatstops
	Tickformatstops []LayoutTernaryAaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.ternary.aaxis.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.ternary.aaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.ternary.aaxis.tickmode
	Tickmode LayoutTernaryAaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.ternary.aaxis.ticks
	Ticks LayoutTernaryAaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.ternary.aaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.ternary.aaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.ternary.aaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.ternary.aaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.ternary.aaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.ternary.aaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.aaxis.title
	Title *LayoutTernaryAaxisTitle `json:"title,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	// .schema.layout.layoutAttributes.ternary.aaxis.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTernaryBaxisTickfont Sets the tick font.
type LayoutTernaryBaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.lineposition
	Lineposition LayoutTernaryBaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.style
	Style LayoutTernaryBaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.textcase
	Textcase LayoutTernaryBaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.variant
	Variant LayoutTernaryBaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTernaryBaxisTickformatstop
type LayoutTernaryBaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.ternary.baxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.ternary.baxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.ternary.baxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.ternary.baxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.ternary.baxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutTernaryBaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTernaryBaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.lineposition
	Lineposition LayoutTernaryBaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.style
	Style LayoutTernaryBaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.textcase
	Textcase LayoutTernaryBaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.variant
	Variant LayoutTernaryBaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.ternary.baxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTernaryBaxisTitle
type LayoutTernaryBaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.baxis.title.font
	Font *LayoutTernaryBaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.ternary.baxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutTernaryBaxis
type LayoutTernaryBaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.ternary.baxis.color
	Color types.Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.ternary.baxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.ternary.baxis.exponentformat
	Exponentformat LayoutTernaryBaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.ternary.baxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.ternary.baxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.ternary.baxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.ternary.baxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.ternary.baxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.ternary.baxis.layer
	Layer LayoutTernaryBaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.ternary.baxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.ternary.baxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Min
	// arrayOK: false
	// type: number
	// The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	// .schema.layout.layoutAttributes.ternary.baxis.min
	Min types.NumberType `json:"min,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.ternary.baxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.ternary.baxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.ternary.baxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.ternary.baxis.showexponent
	Showexponent LayoutTernaryBaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.ternary.baxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.ternary.baxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.ternary.baxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.ternary.baxis.showtickprefix
	Showtickprefix LayoutTernaryBaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.ternary.baxis.showticksuffix
	Showticksuffix LayoutTernaryBaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.ternary.baxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.ternary.baxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.ternary.baxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.baxis.tickfont
	Tickfont *LayoutTernaryBaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.ternary.baxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutTernaryBaxisTickformatstop
	// .schema.layout.layoutAttributes.ternary.baxis.tickformatstops
	Tickformatstops []LayoutTernaryBaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.ternary.baxis.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.ternary.baxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.ternary.baxis.tickmode
	Tickmode LayoutTernaryBaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.ternary.baxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.ternary.baxis.ticks
	Ticks LayoutTernaryBaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.ternary.baxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.ternary.baxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.ternary.baxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.ternary.baxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.ternary.baxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.ternary.baxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.baxis.title
	Title *LayoutTernaryBaxisTitle `json:"title,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	// .schema.layout.layoutAttributes.ternary.baxis.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTernaryCaxisTickfont Sets the tick font.
type LayoutTernaryCaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.lineposition
	Lineposition LayoutTernaryCaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.style
	Style LayoutTernaryCaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.textcase
	Textcase LayoutTernaryCaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.variant
	Variant LayoutTernaryCaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTernaryCaxisTickformatstop
type LayoutTernaryCaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.ternary.caxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.ternary.caxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.ternary.caxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.ternary.caxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.ternary.caxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutTernaryCaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTernaryCaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.lineposition
	Lineposition LayoutTernaryCaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.style
	Style LayoutTernaryCaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.textcase
	Textcase LayoutTernaryCaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.variant
	Variant LayoutTernaryCaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.ternary.caxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTernaryCaxisTitle
type LayoutTernaryCaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.caxis.title.font
	Font *LayoutTernaryCaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.ternary.caxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutTernaryCaxis
type LayoutTernaryCaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.ternary.caxis.color
	Color types.Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.ternary.caxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.ternary.caxis.exponentformat
	Exponentformat LayoutTernaryCaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.ternary.caxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.ternary.caxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.ternary.caxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.ternary.caxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.ternary.caxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.ternary.caxis.layer
	Layer LayoutTernaryCaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.ternary.caxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.ternary.caxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Min
	// arrayOK: false
	// type: number
	// The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	// .schema.layout.layoutAttributes.ternary.caxis.min
	Min types.NumberType `json:"min,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.ternary.caxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.ternary.caxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.ternary.caxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.ternary.caxis.showexponent
	Showexponent LayoutTernaryCaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.ternary.caxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.ternary.caxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.ternary.caxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.ternary.caxis.showtickprefix
	Showtickprefix LayoutTernaryCaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.ternary.caxis.showticksuffix
	Showticksuffix LayoutTernaryCaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.ternary.caxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.ternary.caxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.ternary.caxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.caxis.tickfont
	Tickfont *LayoutTernaryCaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.ternary.caxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutTernaryCaxisTickformatstop
	// .schema.layout.layoutAttributes.ternary.caxis.tickformatstops
	Tickformatstops []LayoutTernaryCaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.ternary.caxis.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.ternary.caxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.ternary.caxis.tickmode
	Tickmode LayoutTernaryCaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.ternary.caxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.ternary.caxis.ticks
	Ticks LayoutTernaryCaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.ternary.caxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.ternary.caxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.ternary.caxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.ternary.caxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.ternary.caxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.ternary.caxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.caxis.title
	Title *LayoutTernaryCaxisTitle `json:"title,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	// .schema.layout.layoutAttributes.ternary.caxis.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTernaryDomain
type LayoutTernaryDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this ternary subplot .
	// .schema.layout.layoutAttributes.ternary.domain.column
	Column types.IntegerType `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this ternary subplot .
	// .schema.layout.layoutAttributes.ternary.domain.row
	Row types.IntegerType `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this ternary subplot (in plot fraction).
	// .schema.layout.layoutAttributes.ternary.domain.x
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this ternary subplot (in plot fraction).
	// .schema.layout.layoutAttributes.ternary.domain.y
	Y interface{} `json:"y,omitempty"`
}

// LayoutTernary
type LayoutTernary struct {

	// Aaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.aaxis
	Aaxis *LayoutTernaryAaxis `json:"aaxis,omitempty"`

	// Baxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.baxis
	Baxis *LayoutTernaryBaxis `json:"baxis,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the subplot
	// .schema.layout.layoutAttributes.ternary.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Caxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.caxis
	Caxis *LayoutTernaryCaxis `json:"caxis,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.ternary.domain
	Domain *LayoutTernaryDomain `json:"domain,omitempty"`

	// Sum
	// arrayOK: false
	// type: number
	// The number each triplet should sum to, and the maximum range of each axis
	// .schema.layout.layoutAttributes.ternary.sum
	Sum types.NumberType `json:"sum,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min` and `title`, if not overridden in the individual axes. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.ternary.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTitleFont Sets the title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.title.font.lineposition
	Lineposition LayoutTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.title.font.style
	Style LayoutTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.title.font.textcase
	Textcase LayoutTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.title.font.variant
	Variant LayoutTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTitlePad Sets the padding of the title. Each padding value only applies when the corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left padding to take effect, `xanchor` must be set to *left*. The same rule applies if `xanchor`/`yanchor` is determined automatically. Padding is muted if the respective anchor value is *middle*/*center*.
type LayoutTitlePad struct {

	// B
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the bottom of the component.
	// .schema.layout.layoutAttributes.title.pad.b
	B types.NumberType `json:"b,omitempty"`

	// L
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the left side of the component.
	// .schema.layout.layoutAttributes.title.pad.l
	L types.NumberType `json:"l,omitempty"`

	// R
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the right side of the component.
	// .schema.layout.layoutAttributes.title.pad.r
	R types.NumberType `json:"r,omitempty"`

	// T
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the top of the component.
	// .schema.layout.layoutAttributes.title.pad.t
	T types.NumberType `json:"t,omitempty"`
}

// LayoutTitleSubtitleFont Sets the subtitle font.
type LayoutTitleSubtitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.title.subtitle.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.title.subtitle.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.title.subtitle.font.lineposition
	Lineposition LayoutTitleSubtitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.title.subtitle.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.title.subtitle.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.title.subtitle.font.style
	Style LayoutTitleSubtitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.title.subtitle.font.textcase
	Textcase LayoutTitleSubtitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.title.subtitle.font.variant
	Variant LayoutTitleSubtitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.title.subtitle.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutTitleSubtitle
type LayoutTitleSubtitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.title.subtitle.font
	Font *LayoutTitleSubtitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the plot's subtitle.
	// .schema.layout.layoutAttributes.title.subtitle.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutTitle
type LayoutTitle struct {

	// Automargin
	// arrayOK: false
	// type: boolean
	// Determines whether the title can automatically push the figure margins. If `yref='paper'` then the margin will expand to ensure that the title doesn’t overlap with the edges of the container. If `yref='container'` then the margins will ensure that the title doesn’t overlap with the plot area, tick labels, and axis titles. If `automargin=true` and the margins need to be expanded, then y will be set to a default 1 and yanchor will be set to an appropriate default to ensure that minimal margin space is needed. Note that when `yref='paper'`, only 1 or 0 are allowed y values. Invalid values will be reset to the default 1.
	// .schema.layout.layoutAttributes.title.automargin
	Automargin types.BoolType `json:"automargin,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.title.font
	Font *LayoutTitleFont `json:"font,omitempty"`

	// Pad
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.title.pad
	Pad *LayoutTitlePad `json:"pad,omitempty"`

	// Subtitle
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.title.subtitle
	Subtitle *LayoutTitleSubtitle `json:"subtitle,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the plot's title. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.title.text
	Text types.StringType `json:"text,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` in normalized coordinates from *0* (left) to *1* (right).
	// .schema.layout.layoutAttributes.title.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the title's horizontal alignment with respect to its x position. *left* means that the title starts at x, *right* means that the title ends at x and *center* means that the title's center is at x. *auto* divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.
	// .schema.layout.layoutAttributes.title.xanchor
	Xanchor LayoutTitleXanchor `json:"xanchor,omitempty"`

	// Xref
	// arrayOK: false
	// default: container
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	// .schema.layout.layoutAttributes.title.xref
	Xref LayoutTitleXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` in normalized coordinates from *0* (bottom) to *1* (top). *auto* places the baseline of the title onto the vertical center of the top margin.
	// .schema.layout.layoutAttributes.title.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Sets the title's vertical alignment with respect to its y position. *top* means that the title's cap line is at y, *bottom* means that the title's baseline is at y and *middle* means that the title's midline is at y. *auto* divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.
	// .schema.layout.layoutAttributes.title.yanchor
	Yanchor LayoutTitleYanchor `json:"yanchor,omitempty"`

	// Yref
	// arrayOK: false
	// default: container
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	// .schema.layout.layoutAttributes.title.yref
	Yref LayoutTitleYref `json:"yref,omitempty"`
}

// LayoutTransition Sets transition options used during Plotly.react updates.
type LayoutTransition struct {

	// Duration
	// arrayOK: false
	// type: number
	// The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.
	// .schema.layout.layoutAttributes.transition.duration
	Duration types.NumberType `json:"duration,omitempty"`

	// Easing
	// arrayOK: false
	// default: cubic-in-out
	// type: enumerated
	// The easing function used for the transition
	// .schema.layout.layoutAttributes.transition.easing
	Easing LayoutTransitionEasing `json:"easing,omitempty"`

	// Ordering
	// arrayOK: false
	// default: layout first
	// type: enumerated
	// Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.
	// .schema.layout.layoutAttributes.transition.ordering
	Ordering LayoutTransitionOrdering `json:"ordering,omitempty"`
}

// LayoutUniformtext
type LayoutUniformtext struct {

	// Minsize
	// arrayOK: false
	// type: number
	// Sets the minimum text size between traces of the same type.
	// .schema.layout.layoutAttributes.uniformtext.minsize
	Minsize types.NumberType `json:"minsize,omitempty"`

	// Mode
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using *hide* option hides the text; and using *show* option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.
	// .schema.layout.layoutAttributes.uniformtext.mode
	Mode LayoutUniformtextMode `json:"mode,omitempty"`
}

// UpdatemenuButton
type UpdatemenuButton struct {

	// Args
	// arrayOK: false
	// type: info_array
	// Sets the arguments values to be passed to the Plotly method set in `method` on click.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.args
	Args interface{} `json:"args,omitempty"`

	// Args2
	// arrayOK: false
	// type: info_array
	// Sets a 2nd set of `args`, these arguments values are passed to the Plotly method set in `method` when clicking this button while in the active state. Use this to create toggle buttons.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.args2
	Args2 interface{} `json:"args2,omitempty"`

	// Execute
	// arrayOK: false
	// type: boolean
	// When true, the API method is executed. When false, all other behaviors are the same and command execution is skipped. This may be useful when hooking into, for example, the `plotly_buttonclicked` method and executing the API command manually without losing the benefit of the updatemenu automatically binding to the state of the plot through the specification of `method` and `args`.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.execute
	Execute types.BoolType `json:"execute,omitempty"`

	// Label
	// arrayOK: false
	// type: string
	// Sets the text label to appear on the button.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.label
	Label types.StringType `json:"label,omitempty"`

	// Method
	// arrayOK: false
	// default: restyle
	// type: enumerated
	// Sets the Plotly method to be called on click. If the `skip` method is used, the API updatemenu will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to updatemenu events manually via JavaScript.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.method
	Method ButtonMethod `json:"method,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this button is visible.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// UpdatemenuFont Sets the font of the update menu button text.
type UpdatemenuFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.lineposition
	Lineposition UpdatemenuFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.style
	Style UpdatemenuFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.textcase
	Textcase UpdatemenuFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.variant
	Variant UpdatemenuFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// UpdatemenuPad Sets the padding around the buttons or dropdown menu.
type UpdatemenuPad struct {

	// B
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the bottom of the component.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.pad.b
	B types.NumberType `json:"b,omitempty"`

	// L
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the left side of the component.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.pad.l
	L types.NumberType `json:"l,omitempty"`

	// R
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the right side of the component.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.pad.r
	R types.NumberType `json:"r,omitempty"`

	// T
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the top of the component.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.pad.t
	T types.NumberType `json:"t,omitempty"`
}

// LayoutUpdatemenu
type LayoutUpdatemenu struct {

	// Active
	// arrayOK: false
	// type: integer
	// Determines which button (by index starting from 0) is considered active.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.active
	Active types.IntegerType `json:"active,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the update menu buttons.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the update menu.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the update menu.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Buttons
	// role: Object
	// items: UpdatemenuButton
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons
	Buttons []UpdatemenuButton `json:"buttons,omitempty"`

	// Direction
	// arrayOK: false
	// default: down
	// type: enumerated
	// Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.direction
	Direction UpdatemenuDirection `json:"direction,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font
	Font *UpdatemenuFont `json:"font,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.name
	Name types.StringType `json:"name,omitempty"`

	// Pad
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.pad
	Pad *UpdatemenuPad `json:"pad,omitempty"`

	// Showactive
	// arrayOK: false
	// type: boolean
	// Highlights active dropdown item or active button if true.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.showactive
	Showactive types.BoolType `json:"showactive,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Type
	// arrayOK: false
	// default: dropdown
	// type: enumerated
	// Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.type
	Type UpdatemenuType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not the update menu is visible.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position (in normalized coordinates) of the update menu.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: right
	// type: enumerated
	// Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.xanchor
	Xanchor UpdatemenuXanchor `json:"xanchor,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position (in normalized coordinates) of the update menu.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: top
	// type: enumerated
	// Sets the update menu's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
	// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.yanchor
	Yanchor UpdatemenuYanchor `json:"yanchor,omitempty"`
}

// LayoutXaxisAutorangeoptions
type LayoutXaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	// .schema.layout.layoutAttributes.xaxis.autorangeoptions.clipmax
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	// .schema.layout.layoutAttributes.xaxis.autorangeoptions.clipmin
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	// .schema.layout.layoutAttributes.xaxis.autorangeoptions.include
	Include *types.ArrayOK[*interface{}] `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	// .schema.layout.layoutAttributes.xaxis.autorangeoptions.includesrc
	Includesrc types.StringType `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	// .schema.layout.layoutAttributes.xaxis.autorangeoptions.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	// .schema.layout.layoutAttributes.xaxis.autorangeoptions.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutXaxisMinor
type LayoutXaxisMinor struct {

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.xaxis.minor.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.xaxis.minor.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.xaxis.minor.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.xaxis.minor.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.xaxis.minor.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.xaxis.minor.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.xaxis.minor.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.xaxis.minor.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.xaxis.minor.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.xaxis.minor.tickmode
	Tickmode LayoutXaxisMinorTickmode `json:"tickmode,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.xaxis.minor.ticks
	Ticks LayoutXaxisMinorTicks `json:"ticks,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.xaxis.minor.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.xaxis.minor.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.xaxis.minor.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`
}

// LayoutXaxisRangebreak
type LayoutXaxisRangebreak struct {

	// Bounds
	// arrayOK: false
	// type: info_array
	// Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.
	// .schema.layout.layoutAttributes.xaxis.rangebreaks.items.rangebreak.bounds
	Bounds interface{} `json:"bounds,omitempty"`

	// Dvalue
	// arrayOK: false
	// type: number
	// Sets the size of each `values` item. The default is one day in milliseconds.
	// .schema.layout.layoutAttributes.xaxis.rangebreaks.items.rangebreak.dvalue
	Dvalue types.NumberType `json:"dvalue,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for *date* axis type.
	// .schema.layout.layoutAttributes.xaxis.rangebreaks.items.rangebreak.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.xaxis.rangebreaks.items.rangebreak.name
	Name types.StringType `json:"name,omitempty"`

	// Pattern
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines a pattern on the time line that generates breaks. If *day of week* - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If *hour* - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] }  or simply { bounds: ['sat', 'mon'] }   breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] }   breaks from 5pm to 8am (i.e. skips non-work hours).
	// .schema.layout.layoutAttributes.xaxis.rangebreaks.items.rangebreak.pattern
	Pattern RangebreakPattern `json:"pattern,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.xaxis.rangebreaks.items.rangebreak.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Values
	// arrayOK: false
	// type: info_array
	// Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.
	// .schema.layout.layoutAttributes.xaxis.rangebreaks.items.rangebreak.values
	Values interface{} `json:"values,omitempty"`
}

// LayoutXaxisRangeselectorButton Sets the specifications for each buttons. By default, a range selector comes with no buttons.
type LayoutXaxisRangeselectorButton struct {

	// Count
	// arrayOK: false
	// type: number
	// Sets the number of steps to take to update the range. Use with `step` to specify the update interval.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.count
	Count types.NumberType `json:"count,omitempty"`

	// Label
	// arrayOK: false
	// type: string
	// Sets the text label to appear on the button.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.label
	Label types.StringType `json:"label,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.name
	Name types.StringType `json:"name,omitempty"`

	// Step
	// arrayOK: false
	// default: month
	// type: enumerated
	// The unit of measurement that the `count` value will set the range by.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.step
	Step ButtonStep `json:"step,omitempty"`

	// Stepmode
	// arrayOK: false
	// default: backward
	// type: enumerated
	// Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year. Month and year *todate* are currently available only for the built-in (Gregorian) calendar.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.stepmode
	Stepmode ButtonStepmode `json:"stepmode,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this button is visible.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.visible
	Visible types.BoolType `json:"visible,omitempty"`
}

// LayoutXaxisRangeselectorFont Sets the font of the range selector button text.
type LayoutXaxisRangeselectorFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.lineposition
	Lineposition LayoutXaxisRangeselectorFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.style
	Style LayoutXaxisRangeselectorFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.textcase
	Textcase LayoutXaxisRangeselectorFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.variant
	Variant LayoutXaxisRangeselectorFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutXaxisRangeselector
type LayoutXaxisRangeselector struct {

	// Activecolor
	// arrayOK: false
	// type: color
	// Sets the background color of the active range selector button.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.activecolor
	Activecolor types.Color `json:"activecolor,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the range selector buttons.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the range selector.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the range selector.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Buttons
	// role: Object
	// items: LayoutXaxisRangeselectorButton
	// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons
	Buttons []LayoutXaxisRangeselectorButton `json:"buttons,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.rangeselector.font
	Font *LayoutXaxisRangeselectorFont `json:"font,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position (in normalized coordinates) of the range selector.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: left
	// type: enumerated
	// Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.xanchor
	Xanchor LayoutXaxisRangeselectorXanchor `json:"xanchor,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position (in normalized coordinates) of the range selector.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: bottom
	// type: enumerated
	// Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
	// .schema.layout.layoutAttributes.xaxis.rangeselector.yanchor
	Yanchor LayoutXaxisRangeselectorYanchor `json:"yanchor,omitempty"`
}

// LayoutXaxisRangesliderYaxis
type LayoutXaxisRangesliderYaxis struct {

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis for the rangeslider.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.yaxis.range
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// arrayOK: false
	// default: match
	// type: enumerated
	// Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If *auto*, the autorange will be used. If *fixed*, the `range` is used. If *match*, the current range of the corresponding y-axis on the main subplot is used.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.yaxis.rangemode
	Rangemode LayoutXaxisRangesliderYaxisRangemode `json:"rangemode,omitempty"`
}

// LayoutXaxisRangeslider
type LayoutXaxisRangeslider struct {

	// Autorange
	// arrayOK: false
	// type: boolean
	// Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to *false*.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.autorange
	Autorange types.BoolType `json:"autorange,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the range slider.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the border color of the range slider.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: integer
	// Sets the border width of the range slider.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.borderwidth
	Borderwidth types.IntegerType `json:"borderwidth,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.range
	Range interface{} `json:"range,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// The height of the range slider as a fraction of the total plot area height.
	// .schema.layout.layoutAttributes.xaxis.rangeslider.thickness
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`
	// .schema.layout.layoutAttributes.xaxis.rangeslider.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Yaxis
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.rangeslider.yaxis
	Yaxis *LayoutXaxisRangesliderYaxis `json:"yaxis,omitempty"`
}

// LayoutXaxisTickfont Sets the tick font.
type LayoutXaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.xaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.xaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.xaxis.tickfont.lineposition
	Lineposition LayoutXaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.xaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.xaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.xaxis.tickfont.style
	Style LayoutXaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.xaxis.tickfont.textcase
	Textcase LayoutXaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.xaxis.tickfont.variant
	Variant LayoutXaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.xaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutXaxisTickformatstop
type LayoutXaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.xaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.xaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.xaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.xaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.xaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutXaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutXaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.xaxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.xaxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.xaxis.title.font.lineposition
	Lineposition LayoutXaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.xaxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.xaxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.xaxis.title.font.style
	Style LayoutXaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.xaxis.title.font.textcase
	Textcase LayoutXaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.xaxis.title.font.variant
	Variant LayoutXaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.xaxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutXaxisTitle
type LayoutXaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.title.font
	Font *LayoutXaxisTitleFont `json:"font,omitempty"`

	// Standoff
	// arrayOK: false
	// type: number
	// Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.
	// .schema.layout.layoutAttributes.xaxis.title.standoff
	Standoff types.NumberType `json:"standoff,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.xaxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutXaxis
type LayoutXaxis struct {

	// Anchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
	// .schema.layout.layoutAttributes.xaxis.anchor
	Anchor LayoutXaxisAnchor `json:"anchor,omitempty"`

	// Automargin
	// arrayOK: false
	// default: %!s(bool=false)
	// type: flaglist
	// Determines whether long tick labels automatically grow the figure margins.
	// .schema.layout.layoutAttributes.xaxis.automargin
	Automargin LayoutXaxisAutomargin `json:"automargin,omitempty"`

	// Autorange
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	// .schema.layout.layoutAttributes.xaxis.autorange
	Autorange LayoutXaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.autorangeoptions
	Autorangeoptions *LayoutXaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotickangles
	// arrayOK: false
	// type: info_array
	// When `tickangle` is set to *auto*, it will be set to the first angle in this array that is large enough to prevent label overlap.
	// .schema.layout.layoutAttributes.xaxis.autotickangles
	Autotickangles interface{} `json:"autotickangles,omitempty"`

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	// .schema.layout.layoutAttributes.xaxis.autotypenumbers
	Autotypenumbers LayoutXaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	// .schema.layout.layoutAttributes.xaxis.calendar
	Calendar LayoutXaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.xaxis.categoryarray
	Categoryarray *types.DataArrayType `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	// .schema.layout.layoutAttributes.xaxis.categoryarraysrc
	Categoryarraysrc types.StringType `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
	// .schema.layout.layoutAttributes.xaxis.categoryorder
	Categoryorder LayoutXaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.xaxis.color
	Color types.Color `json:"color,omitempty"`

	// Constrain
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
	// .schema.layout.layoutAttributes.xaxis.constrain
	Constrain LayoutXaxisConstrain `json:"constrain,omitempty"`

	// Constraintoward
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
	// .schema.layout.layoutAttributes.xaxis.constraintoward
	Constraintoward LayoutXaxisConstraintoward `json:"constraintoward,omitempty"`

	// Dividercolor
	// arrayOK: false
	// type: color
	// Sets the color of the dividers Only has an effect on *multicategory* axes.
	// .schema.layout.layoutAttributes.xaxis.dividercolor
	Dividercolor types.Color `json:"dividercolor,omitempty"`

	// Dividerwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.
	// .schema.layout.layoutAttributes.xaxis.dividerwidth
	Dividerwidth types.NumberType `json:"dividerwidth,omitempty"`

	// Domain
	// arrayOK: false
	// type: info_array
	// Sets the domain of this axis (in plot fraction).
	// .schema.layout.layoutAttributes.xaxis.domain
	Domain interface{} `json:"domain,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.xaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.xaxis.exponentformat
	Exponentformat LayoutXaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange
	// arrayOK: false
	// type: boolean
	// Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	// .schema.layout.layoutAttributes.xaxis.fixedrange
	Fixedrange types.BoolType `json:"fixedrange,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.xaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.xaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.xaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.xaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Insiderange
	// arrayOK: false
	// type: info_array
	// Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has *inside*. Not implemented for axes with `type` *log*. This would be ignored when `range` is provided.
	// .schema.layout.layoutAttributes.xaxis.insiderange
	Insiderange interface{} `json:"insiderange,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.xaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.xaxis.layer
	Layer LayoutXaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.xaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.xaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Matches
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
	// .schema.layout.layoutAttributes.xaxis.matches
	Matches LayoutXaxisMatches `json:"matches,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	// .schema.layout.layoutAttributes.xaxis.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	// .schema.layout.layoutAttributes.xaxis.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.xaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Minor
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.minor
	Minor *LayoutXaxisMinor `json:"minor,omitempty"`

	// Mirror
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	// .schema.layout.layoutAttributes.xaxis.mirror
	Mirror LayoutXaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.xaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Overlaying
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
	// .schema.layout.layoutAttributes.xaxis.overlaying
	Overlaying LayoutXaxisOverlaying `json:"overlaying,omitempty"`

	// Position
	// arrayOK: false
	// type: number
	// Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.
	// .schema.layout.layoutAttributes.xaxis.position
	Position types.NumberType `json:"position,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	// .schema.layout.layoutAttributes.xaxis.range
	Range interface{} `json:"range,omitempty"`

	// Rangebreaks
	// role: Object
	// items: LayoutXaxisRangebreak
	// .schema.layout.layoutAttributes.xaxis.rangebreaks
	Rangebreaks []LayoutXaxisRangebreak `json:"rangebreaks,omitempty"`

	// Rangemode
	// arrayOK: false
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	// .schema.layout.layoutAttributes.xaxis.rangemode
	Rangemode LayoutXaxisRangemode `json:"rangemode,omitempty"`

	// Rangeselector
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.rangeselector
	Rangeselector *LayoutXaxisRangeselector `json:"rangeselector,omitempty"`

	// Rangeslider
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.rangeslider
	Rangeslider *LayoutXaxisRangeslider `json:"rangeslider,omitempty"`

	// Scaleanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
	// .schema.layout.layoutAttributes.xaxis.scaleanchor
	Scaleanchor LayoutXaxisScaleanchor `json:"scaleanchor,omitempty"`

	// Scaleratio
	// arrayOK: false
	// type: number
	// If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
	// .schema.layout.layoutAttributes.xaxis.scaleratio
	Scaleratio types.NumberType `json:"scaleratio,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.xaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showdividers
	// arrayOK: false
	// type: boolean
	// Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.
	// .schema.layout.layoutAttributes.xaxis.showdividers
	Showdividers types.BoolType `json:"showdividers,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.xaxis.showexponent
	Showexponent LayoutXaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.xaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.xaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest
	// .schema.layout.layoutAttributes.xaxis.showspikes
	Showspikes types.BoolType `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.xaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.xaxis.showtickprefix
	Showtickprefix LayoutXaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.xaxis.showticksuffix
	Showticksuffix LayoutXaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
	// .schema.layout.layoutAttributes.xaxis.side
	Side LayoutXaxisSide `json:"side,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the spike color. If undefined, will use the series color
	// .schema.layout.layoutAttributes.xaxis.spikecolor
	Spikecolor types.Color `json:"spikecolor,omitempty"`

	// Spikedash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.xaxis.spikedash
	Spikedash types.StringType `json:"spikedash,omitempty"`

	// Spikemode
	// arrayOK: false
	// default: toaxis
	// type: flaglist
	// Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
	// .schema.layout.layoutAttributes.xaxis.spikemode
	Spikemode LayoutXaxisSpikemode `json:"spikemode,omitempty"`

	// Spikesnap
	// arrayOK: false
	// default: hovered data
	// type: enumerated
	// Determines whether spikelines are stuck to the cursor or to the closest datapoints.
	// .schema.layout.layoutAttributes.xaxis.spikesnap
	Spikesnap LayoutXaxisSpikesnap `json:"spikesnap,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	// .schema.layout.layoutAttributes.xaxis.spikethickness
	Spikethickness types.NumberType `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.xaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.xaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.xaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.tickfont
	Tickfont *LayoutXaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.xaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutXaxisTickformatstop
	// .schema.layout.layoutAttributes.xaxis.tickformatstops
	Tickformatstops []LayoutXaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabelindex
	// arrayOK: true
	// type: integer
	// Only for axes with `type` *date* or *linear*. Instead of drawing the major tick label, draw the label for the minor tick that is n positions away from the major tick. E.g. to always draw the label for the minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date axes with `ticklabelmode` *period* if you want to label the period that ends with each major tick instead of the period that begins there.
	// .schema.layout.layoutAttributes.xaxis.ticklabelindex
	Ticklabelindex *types.ArrayOK[*types.IntegerType] `json:"ticklabelindex,omitempty"`

	// Ticklabelindexsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticklabelindex`.
	// .schema.layout.layoutAttributes.xaxis.ticklabelindexsrc
	Ticklabelindexsrc types.StringType `json:"ticklabelindexsrc,omitempty"`

	// Ticklabelmode
	// arrayOK: false
	// default: instant
	// type: enumerated
	// Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
	// .schema.layout.layoutAttributes.xaxis.ticklabelmode
	Ticklabelmode LayoutXaxisTicklabelmode `json:"ticklabelmode,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
	// .schema.layout.layoutAttributes.xaxis.ticklabeloverflow
	Ticklabeloverflow LayoutXaxisTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
	// .schema.layout.layoutAttributes.xaxis.ticklabelposition
	Ticklabelposition LayoutXaxisTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelshift
	// arrayOK: false
	// type: integer
	// Shifts the tick labels by the specified number of pixels in parallel to the axis. Positive values move the labels in the positive direction of the axis.
	// .schema.layout.layoutAttributes.xaxis.ticklabelshift
	Ticklabelshift types.IntegerType `json:"ticklabelshift,omitempty"`

	// Ticklabelstandoff
	// arrayOK: false
	// type: integer
	// Sets the standoff distance (in px) between the axis tick labels and their default position. A positive `ticklabelstandoff` moves the labels farther away from the plot area if `ticklabelposition` is *outside*, and deeper into the plot area if `ticklabelposition` is *inside*. A negative `ticklabelstandoff` works in the opposite direction, moving outside ticks towards the plot area and inside ticks towards the outside. If the negative value is large enough, inside ticks can even end up outside and vice versa.
	// .schema.layout.layoutAttributes.xaxis.ticklabelstandoff
	Ticklabelstandoff types.IntegerType `json:"ticklabelstandoff,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.xaxis.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.xaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
	// .schema.layout.layoutAttributes.xaxis.tickmode
	Tickmode LayoutXaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.xaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.xaxis.ticks
	Ticks LayoutXaxisTicks `json:"ticks,omitempty"`

	// Tickson
	// arrayOK: false
	// default: labels
	// type: enumerated
	// Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
	// .schema.layout.layoutAttributes.xaxis.tickson
	Tickson LayoutXaxisTickson `json:"tickson,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.xaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.xaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.xaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.xaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.xaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.xaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.xaxis.title
	Title *LayoutXaxisTitle `json:"title,omitempty"`

	// Type
	// arrayOK: false
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	// .schema.layout.layoutAttributes.xaxis.type
	Type LayoutXaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.xaxis.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.xaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	// .schema.layout.layoutAttributes.xaxis.zeroline
	Zeroline types.BoolType `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	// .schema.layout.layoutAttributes.xaxis.zerolinecolor
	Zerolinecolor types.Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	// .schema.layout.layoutAttributes.xaxis.zerolinewidth
	Zerolinewidth types.NumberType `json:"zerolinewidth,omitempty"`
}

// LayoutYaxisAutorangeoptions
type LayoutYaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	// .schema.layout.layoutAttributes.yaxis.autorangeoptions.clipmax
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	// .schema.layout.layoutAttributes.yaxis.autorangeoptions.clipmin
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	// .schema.layout.layoutAttributes.yaxis.autorangeoptions.include
	Include *types.ArrayOK[*interface{}] `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	// .schema.layout.layoutAttributes.yaxis.autorangeoptions.includesrc
	Includesrc types.StringType `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	// .schema.layout.layoutAttributes.yaxis.autorangeoptions.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	// .schema.layout.layoutAttributes.yaxis.autorangeoptions.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutYaxisMinor
type LayoutYaxisMinor struct {

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.yaxis.minor.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.yaxis.minor.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.yaxis.minor.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.yaxis.minor.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.yaxis.minor.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.yaxis.minor.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.yaxis.minor.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.yaxis.minor.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.yaxis.minor.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.layout.layoutAttributes.yaxis.minor.tickmode
	Tickmode LayoutYaxisMinorTickmode `json:"tickmode,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.yaxis.minor.ticks
	Ticks LayoutYaxisMinorTicks `json:"ticks,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.yaxis.minor.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.yaxis.minor.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.yaxis.minor.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`
}

// LayoutYaxisRangebreak
type LayoutYaxisRangebreak struct {

	// Bounds
	// arrayOK: false
	// type: info_array
	// Sets the lower and upper bounds of this axis rangebreak. Can be used with `pattern`.
	// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.bounds
	Bounds interface{} `json:"bounds,omitempty"`

	// Dvalue
	// arrayOK: false
	// type: number
	// Sets the size of each `values` item. The default is one day in milliseconds.
	// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.dvalue
	Dvalue types.NumberType `json:"dvalue,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether this axis rangebreak is enabled or disabled. Please note that `rangebreaks` only work for *date* axis type.
	// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.name
	Name types.StringType `json:"name,omitempty"`

	// Pattern
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines a pattern on the time line that generates breaks. If *day of week* - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If *hour* - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] }  or simply { bounds: ['sat', 'mon'] }   breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] }   breaks from 5pm to 8am (i.e. skips non-work hours).
	// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.pattern
	Pattern RangebreakPattern `json:"pattern,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Values
	// arrayOK: false
	// type: info_array
	// Sets the coordinate values corresponding to the rangebreaks. An alternative to `bounds`. Use `dvalue` to set the size of the values along the axis.
	// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.values
	Values interface{} `json:"values,omitempty"`
}

// LayoutYaxisTickfont Sets the tick font.
type LayoutYaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.yaxis.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.yaxis.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.yaxis.tickfont.lineposition
	Lineposition LayoutYaxisTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.yaxis.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.yaxis.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.yaxis.tickfont.style
	Style LayoutYaxisTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.yaxis.tickfont.textcase
	Textcase LayoutYaxisTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.yaxis.tickfont.variant
	Variant LayoutYaxisTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.yaxis.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutYaxisTickformatstop
type LayoutYaxisTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.layout.layoutAttributes.yaxis.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.layout.layoutAttributes.yaxis.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.layout.layoutAttributes.yaxis.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.layout.layoutAttributes.yaxis.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.layout.layoutAttributes.yaxis.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// LayoutYaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutYaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.layout.layoutAttributes.yaxis.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.layout.layoutAttributes.yaxis.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.layout.layoutAttributes.yaxis.title.font.lineposition
	Lineposition LayoutYaxisTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.layout.layoutAttributes.yaxis.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.layout.layoutAttributes.yaxis.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.layout.layoutAttributes.yaxis.title.font.style
	Style LayoutYaxisTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.layout.layoutAttributes.yaxis.title.font.textcase
	Textcase LayoutYaxisTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.layout.layoutAttributes.yaxis.title.font.variant
	Variant LayoutYaxisTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.layout.layoutAttributes.yaxis.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// LayoutYaxisTitle
type LayoutYaxisTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.yaxis.title.font
	Font *LayoutYaxisTitleFont `json:"font,omitempty"`

	// Standoff
	// arrayOK: false
	// type: number
	// Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.
	// .schema.layout.layoutAttributes.yaxis.title.standoff
	Standoff types.NumberType `json:"standoff,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.layout.layoutAttributes.yaxis.title.text
	Text types.StringType `json:"text,omitempty"`
}

// LayoutYaxis
type LayoutYaxis struct {

	// Anchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
	// .schema.layout.layoutAttributes.yaxis.anchor
	Anchor LayoutYaxisAnchor `json:"anchor,omitempty"`

	// Automargin
	// arrayOK: false
	// default: %!s(bool=false)
	// type: flaglist
	// Determines whether long tick labels automatically grow the figure margins.
	// .schema.layout.layoutAttributes.yaxis.automargin
	Automargin LayoutYaxisAutomargin `json:"automargin,omitempty"`

	// Autorange
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	// .schema.layout.layoutAttributes.yaxis.autorange
	Autorange LayoutYaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.yaxis.autorangeoptions
	Autorangeoptions *LayoutYaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autoshift
	// arrayOK: false
	// type: boolean
	// Automatically reposition the axis to avoid overlap with other axes with the same `overlaying` value. This repositioning will account for any `shift` amount applied to other axes on the same side with `autoshift` is set to true. Only has an effect if `anchor` is set to *free*.
	// .schema.layout.layoutAttributes.yaxis.autoshift
	Autoshift types.BoolType `json:"autoshift,omitempty"`

	// Autotickangles
	// arrayOK: false
	// type: info_array
	// When `tickangle` is set to *auto*, it will be set to the first angle in this array that is large enough to prevent label overlap.
	// .schema.layout.layoutAttributes.yaxis.autotickangles
	Autotickangles interface{} `json:"autotickangles,omitempty"`

	// Autotypenumbers
	// arrayOK: false
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	// .schema.layout.layoutAttributes.yaxis.autotypenumbers
	Autotypenumbers LayoutYaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	// .schema.layout.layoutAttributes.yaxis.calendar
	Calendar LayoutYaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.yaxis.categoryarray
	Categoryarray *types.DataArrayType `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	// .schema.layout.layoutAttributes.yaxis.categoryarraysrc
	Categoryarraysrc types.StringType `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// arrayOK: false
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
	// .schema.layout.layoutAttributes.yaxis.categoryorder
	Categoryorder LayoutYaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	// .schema.layout.layoutAttributes.yaxis.color
	Color types.Color `json:"color,omitempty"`

	// Constrain
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
	// .schema.layout.layoutAttributes.yaxis.constrain
	Constrain LayoutYaxisConstrain `json:"constrain,omitempty"`

	// Constraintoward
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
	// .schema.layout.layoutAttributes.yaxis.constraintoward
	Constraintoward LayoutYaxisConstraintoward `json:"constraintoward,omitempty"`

	// Dividercolor
	// arrayOK: false
	// type: color
	// Sets the color of the dividers Only has an effect on *multicategory* axes.
	// .schema.layout.layoutAttributes.yaxis.dividercolor
	Dividercolor types.Color `json:"dividercolor,omitempty"`

	// Dividerwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.
	// .schema.layout.layoutAttributes.yaxis.dividerwidth
	Dividerwidth types.NumberType `json:"dividerwidth,omitempty"`

	// Domain
	// arrayOK: false
	// type: info_array
	// Sets the domain of this axis (in plot fraction).
	// .schema.layout.layoutAttributes.yaxis.domain
	Domain interface{} `json:"domain,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.layout.layoutAttributes.yaxis.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.layout.layoutAttributes.yaxis.exponentformat
	Exponentformat LayoutYaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange
	// arrayOK: false
	// type: boolean
	// Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	// .schema.layout.layoutAttributes.yaxis.fixedrange
	Fixedrange types.BoolType `json:"fixedrange,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	// .schema.layout.layoutAttributes.yaxis.gridcolor
	Gridcolor types.Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.yaxis.griddash
	Griddash types.StringType `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	// .schema.layout.layoutAttributes.yaxis.gridwidth
	Gridwidth types.NumberType `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.yaxis.hoverformat
	Hoverformat types.StringType `json:"hoverformat,omitempty"`

	// Insiderange
	// arrayOK: false
	// type: info_array
	// Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has *inside*. Not implemented for axes with `type` *log*. This would be ignored when `range` is provided.
	// .schema.layout.layoutAttributes.yaxis.insiderange
	Insiderange interface{} `json:"insiderange,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.layout.layoutAttributes.yaxis.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// arrayOK: false
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	// .schema.layout.layoutAttributes.yaxis.layer
	Layer LayoutYaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.layout.layoutAttributes.yaxis.linecolor
	Linecolor types.Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.layout.layoutAttributes.yaxis.linewidth
	Linewidth types.NumberType `json:"linewidth,omitempty"`

	// Matches
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
	// .schema.layout.layoutAttributes.yaxis.matches
	Matches LayoutYaxisMatches `json:"matches,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	// .schema.layout.layoutAttributes.yaxis.maxallowed
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	// .schema.layout.layoutAttributes.yaxis.minallowed
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.layout.layoutAttributes.yaxis.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Minor
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.yaxis.minor
	Minor *LayoutYaxisMinor `json:"minor,omitempty"`

	// Mirror
	// arrayOK: false
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	// .schema.layout.layoutAttributes.yaxis.mirror
	Mirror LayoutYaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.layout.layoutAttributes.yaxis.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Overlaying
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
	// .schema.layout.layoutAttributes.yaxis.overlaying
	Overlaying LayoutYaxisOverlaying `json:"overlaying,omitempty"`

	// Position
	// arrayOK: false
	// type: number
	// Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.
	// .schema.layout.layoutAttributes.yaxis.position
	Position types.NumberType `json:"position,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	// .schema.layout.layoutAttributes.yaxis.range
	Range interface{} `json:"range,omitempty"`

	// Rangebreaks
	// role: Object
	// items: LayoutYaxisRangebreak
	// .schema.layout.layoutAttributes.yaxis.rangebreaks
	Rangebreaks []LayoutYaxisRangebreak `json:"rangebreaks,omitempty"`

	// Rangemode
	// arrayOK: false
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	// .schema.layout.layoutAttributes.yaxis.rangemode
	Rangemode LayoutYaxisRangemode `json:"rangemode,omitempty"`

	// Scaleanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
	// .schema.layout.layoutAttributes.yaxis.scaleanchor
	Scaleanchor LayoutYaxisScaleanchor `json:"scaleanchor,omitempty"`

	// Scaleratio
	// arrayOK: false
	// type: number
	// If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
	// .schema.layout.layoutAttributes.yaxis.scaleratio
	Scaleratio types.NumberType `json:"scaleratio,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.layout.layoutAttributes.yaxis.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Shift
	// arrayOK: false
	// type: number
	// Moves the axis a given number of pixels from where it would have been otherwise. Accepts both positive and negative values, which will shift the axis either right or left, respectively. If `autoshift` is set to true, then this defaults to a padding of -3 if `side` is set to *left*. and defaults to +3 if `side` is set to *right*. Defaults to 0 if `autoshift` is set to false. Only has an effect if `anchor` is set to *free*.
	// .schema.layout.layoutAttributes.yaxis.shift
	Shift types.NumberType `json:"shift,omitempty"`

	// Showdividers
	// arrayOK: false
	// type: boolean
	// Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.
	// .schema.layout.layoutAttributes.yaxis.showdividers
	Showdividers types.BoolType `json:"showdividers,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.layout.layoutAttributes.yaxis.showexponent
	Showexponent LayoutYaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	// .schema.layout.layoutAttributes.yaxis.showgrid
	Showgrid types.BoolType `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	// .schema.layout.layoutAttributes.yaxis.showline
	Showline types.BoolType `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest
	// .schema.layout.layoutAttributes.yaxis.showspikes
	Showspikes types.BoolType `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.layout.layoutAttributes.yaxis.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.layout.layoutAttributes.yaxis.showtickprefix
	Showtickprefix LayoutYaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.layout.layoutAttributes.yaxis.showticksuffix
	Showticksuffix LayoutYaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
	// .schema.layout.layoutAttributes.yaxis.side
	Side LayoutYaxisSide `json:"side,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the spike color. If undefined, will use the series color
	// .schema.layout.layoutAttributes.yaxis.spikecolor
	Spikecolor types.Color `json:"spikecolor,omitempty"`

	// Spikedash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.layout.layoutAttributes.yaxis.spikedash
	Spikedash types.StringType `json:"spikedash,omitempty"`

	// Spikemode
	// arrayOK: false
	// default: toaxis
	// type: flaglist
	// Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
	// .schema.layout.layoutAttributes.yaxis.spikemode
	Spikemode LayoutYaxisSpikemode `json:"spikemode,omitempty"`

	// Spikesnap
	// arrayOK: false
	// default: hovered data
	// type: enumerated
	// Determines whether spikelines are stuck to the cursor or to the closest datapoints.
	// .schema.layout.layoutAttributes.yaxis.spikesnap
	Spikesnap LayoutYaxisSpikesnap `json:"spikesnap,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	// .schema.layout.layoutAttributes.yaxis.spikethickness
	Spikethickness types.NumberType `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.layout.layoutAttributes.yaxis.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.layout.layoutAttributes.yaxis.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.layout.layoutAttributes.yaxis.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.yaxis.tickfont
	Tickfont *LayoutYaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.layout.layoutAttributes.yaxis.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: LayoutYaxisTickformatstop
	// .schema.layout.layoutAttributes.yaxis.tickformatstops
	Tickformatstops []LayoutYaxisTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabelindex
	// arrayOK: true
	// type: integer
	// Only for axes with `type` *date* or *linear*. Instead of drawing the major tick label, draw the label for the minor tick that is n positions away from the major tick. E.g. to always draw the label for the minor tick before each major tick, choose `ticklabelindex` -1. This is useful for date axes with `ticklabelmode` *period* if you want to label the period that ends with each major tick instead of the period that begins there.
	// .schema.layout.layoutAttributes.yaxis.ticklabelindex
	Ticklabelindex *types.ArrayOK[*types.IntegerType] `json:"ticklabelindex,omitempty"`

	// Ticklabelindexsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticklabelindex`.
	// .schema.layout.layoutAttributes.yaxis.ticklabelindexsrc
	Ticklabelindexsrc types.StringType `json:"ticklabelindexsrc,omitempty"`

	// Ticklabelmode
	// arrayOK: false
	// default: instant
	// type: enumerated
	// Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
	// .schema.layout.layoutAttributes.yaxis.ticklabelmode
	Ticklabelmode LayoutYaxisTicklabelmode `json:"ticklabelmode,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
	// .schema.layout.layoutAttributes.yaxis.ticklabeloverflow
	Ticklabeloverflow LayoutYaxisTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
	// .schema.layout.layoutAttributes.yaxis.ticklabelposition
	Ticklabelposition LayoutYaxisTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelshift
	// arrayOK: false
	// type: integer
	// Shifts the tick labels by the specified number of pixels in parallel to the axis. Positive values move the labels in the positive direction of the axis.
	// .schema.layout.layoutAttributes.yaxis.ticklabelshift
	Ticklabelshift types.IntegerType `json:"ticklabelshift,omitempty"`

	// Ticklabelstandoff
	// arrayOK: false
	// type: integer
	// Sets the standoff distance (in px) between the axis tick labels and their default position. A positive `ticklabelstandoff` moves the labels farther away from the plot area if `ticklabelposition` is *outside*, and deeper into the plot area if `ticklabelposition` is *inside*. A negative `ticklabelstandoff` works in the opposite direction, moving outside ticks towards the plot area and inside ticks towards the outside. If the negative value is large enough, inside ticks can even end up outside and vice versa.
	// .schema.layout.layoutAttributes.yaxis.ticklabelstandoff
	Ticklabelstandoff types.IntegerType `json:"ticklabelstandoff,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.layout.layoutAttributes.yaxis.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.layout.layoutAttributes.yaxis.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
	// .schema.layout.layoutAttributes.yaxis.tickmode
	Tickmode LayoutYaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.layout.layoutAttributes.yaxis.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.layout.layoutAttributes.yaxis.ticks
	Ticks LayoutYaxisTicks `json:"ticks,omitempty"`

	// Tickson
	// arrayOK: false
	// default: labels
	// type: enumerated
	// Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
	// .schema.layout.layoutAttributes.yaxis.tickson
	Tickson LayoutYaxisTickson `json:"tickson,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.layout.layoutAttributes.yaxis.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.yaxis.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.layout.layoutAttributes.yaxis.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.layout.layoutAttributes.yaxis.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.layout.layoutAttributes.yaxis.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.layout.layoutAttributes.yaxis.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.layout.layoutAttributes.yaxis.title
	Title *LayoutYaxisTitle `json:"title,omitempty"`

	// Type
	// arrayOK: false
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	// .schema.layout.layoutAttributes.yaxis.type
	Type LayoutYaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.
	// .schema.layout.layoutAttributes.yaxis.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	// .schema.layout.layoutAttributes.yaxis.visible
	Visible types.BoolType `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	// .schema.layout.layoutAttributes.yaxis.zeroline
	Zeroline types.BoolType `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	// .schema.layout.layoutAttributes.yaxis.zerolinecolor
	Zerolinecolor types.Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	// .schema.layout.layoutAttributes.yaxis.zerolinewidth
	Zerolinewidth types.NumberType `json:"zerolinewidth,omitempty"`
}

// AnnotationAlign Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
// .schema.layout.layoutAttributes.annotations.items.annotation.align
type AnnotationAlign string

const (
	AnnotationAlignLeft   AnnotationAlign = "left"
	AnnotationAlignCenter AnnotationAlign = "center"
	AnnotationAlignRight  AnnotationAlign = "right"
)

// AnnotationAxref Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis. In order for absolute positioning of the arrow to work, *axref* must be exactly the same as *xref*, otherwise *axref* will revert to *pixel* (explained next). For relative positioning, *axref* can be set to *pixel*, in which case the *ax* value is specified in pixels relative to *x*. Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.
// .schema.layout.layoutAttributes.annotations.items.annotation.axref
type AnnotationAxref string

const (
	AnnotationAxrefPixel                                                                                                                   AnnotationAxref = "pixel"
	AnnotationAxrefSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash AnnotationAxref = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// AnnotationAyref Indicates in what coordinates the tail of the annotation (ax,ay) is specified. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis. In order for absolute positioning of the arrow to work, *ayref* must be exactly the same as *yref*, otherwise *ayref* will revert to *pixel* (explained next). For relative positioning, *ayref* can be set to *pixel*, in which case the *ay* value is specified in pixels relative to *y*. Absolute positioning is useful for trendline annotations which should continue to indicate the correct trend when zoomed. Relative positioning is useful for specifying the text offset for an annotated point.
// .schema.layout.layoutAttributes.annotations.items.annotation.ayref
type AnnotationAyref string

const (
	AnnotationAyrefPixel                                                                                                                   AnnotationAyref = "pixel"
	AnnotationAyrefSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash AnnotationAyref = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// AnnotationClicktoshow Makes this annotation respond to clicks on the plot. If you click a data point that exactly matches the `x` and `y` values of this annotation, and it is hidden (visible: false), it will appear. In *onoff* mode, you must click the same point again to make it disappear, so if you click multiple points, you can show multiple annotations. In *onout* mode, a click anywhere else in the plot (on another data point or not) will hide this annotation. If you need to show/hide this annotation in response to different `x` or `y` values, you can set `xclick` and/or `yclick`. This is useful for example to label the side of a bar. To label markers though, `standoff` is preferred over `xclick` and `yclick`.
// .schema.layout.layoutAttributes.annotations.items.annotation.clicktoshow
type AnnotationClicktoshow interface{}

var (
	AnnotationClicktoshowFalse AnnotationClicktoshow = false
	AnnotationClicktoshowOnoff AnnotationClicktoshow = "onoff"
	AnnotationClicktoshowOnout AnnotationClicktoshow = "onout"
)

// AnnotationFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.annotations.items.annotation.font.style
type AnnotationFontStyle string

const (
	AnnotationFontStyleNormal AnnotationFontStyle = "normal"
	AnnotationFontStyleItalic AnnotationFontStyle = "italic"
)

// AnnotationFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.annotations.items.annotation.font.textcase
type AnnotationFontTextcase string

const (
	AnnotationFontTextcaseNormal   AnnotationFontTextcase = "normal"
	AnnotationFontTextcaseWordCaps AnnotationFontTextcase = "word caps"
	AnnotationFontTextcaseUpper    AnnotationFontTextcase = "upper"
	AnnotationFontTextcaseLower    AnnotationFontTextcase = "lower"
)

// AnnotationFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.annotations.items.annotation.font.variant
type AnnotationFontVariant string

const (
	AnnotationFontVariantNormal        AnnotationFontVariant = "normal"
	AnnotationFontVariantSmallCaps     AnnotationFontVariant = "small-caps"
	AnnotationFontVariantAllSmallCaps  AnnotationFontVariant = "all-small-caps"
	AnnotationFontVariantAllPetiteCaps AnnotationFontVariant = "all-petite-caps"
	AnnotationFontVariantPetiteCaps    AnnotationFontVariant = "petite-caps"
	AnnotationFontVariantUnicase       AnnotationFontVariant = "unicase"
)

// AnnotationHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.style
type AnnotationHoverlabelFontStyle string

const (
	AnnotationHoverlabelFontStyleNormal AnnotationHoverlabelFontStyle = "normal"
	AnnotationHoverlabelFontStyleItalic AnnotationHoverlabelFontStyle = "italic"
)

// AnnotationHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.scene.annotations.items.annotation.hoverlabel.font.textcase
type AnnotationHoverlabelFontTextcase string

const (
	AnnotationHoverlabelFontTextcaseNormal   AnnotationHoverlabelFontTextcase = "normal"
	AnnotationHoverlabelFontTextcaseWordCaps AnnotationHoverlabelFontTextcase = "word caps"
	AnnotationHoverlabelFontTextcaseUpper    AnnotationHoverlabelFontTextcase = "upper"
	AnnotationHoverlabelFontTextcaseLower    AnnotationHoverlabelFontTextcase = "lower"
)

// AnnotationHoverlabelFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.variant
type AnnotationHoverlabelFontVariant string

const (
	AnnotationHoverlabelFontVariantNormal        AnnotationHoverlabelFontVariant = "normal"
	AnnotationHoverlabelFontVariantSmallCaps     AnnotationHoverlabelFontVariant = "small-caps"
	AnnotationHoverlabelFontVariantAllSmallCaps  AnnotationHoverlabelFontVariant = "all-small-caps"
	AnnotationHoverlabelFontVariantAllPetiteCaps AnnotationHoverlabelFontVariant = "all-petite-caps"
	AnnotationHoverlabelFontVariantPetiteCaps    AnnotationHoverlabelFontVariant = "petite-caps"
	AnnotationHoverlabelFontVariantUnicase       AnnotationHoverlabelFontVariant = "unicase"
)

// AnnotationValign Sets the vertical alignment of the `text` within the box. Has an effect only if an explicit height is set to override the text height.
// .schema.layout.layoutAttributes.annotations.items.annotation.valign
type AnnotationValign string

const (
	AnnotationValignTop    AnnotationValign = "top"
	AnnotationValignMiddle AnnotationValign = "middle"
	AnnotationValignBottom AnnotationValign = "bottom"
)

// AnnotationXanchor Sets the text box's horizontal position anchor This anchor binds the `x` position to the *left*, *center* or *right* of the annotation. For example, if `x` is set to 1, `xref` to *paper* and `xanchor` to *right* then the right-most portion of the annotation lines up with the right-most edge of the plotting area. If *auto*, the anchor is equivalent to *center* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
// .schema.layout.layoutAttributes.scene.annotations.items.annotation.xanchor
type AnnotationXanchor string

const (
	AnnotationXanchorAuto   AnnotationXanchor = "auto"
	AnnotationXanchorLeft   AnnotationXanchor = "left"
	AnnotationXanchorCenter AnnotationXanchor = "center"
	AnnotationXanchorRight  AnnotationXanchor = "right"
)

// AnnotationXref Sets the annotation's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
// .schema.layout.layoutAttributes.annotations.items.annotation.xref
type AnnotationXref string

const (
	AnnotationXrefPaper                                                                                                                   AnnotationXref = "paper"
	AnnotationXrefSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash AnnotationXref = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// AnnotationYanchor Sets the text box's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the annotation. For example, if `y` is set to 1, `yref` to *paper* and `yanchor` to *top* then the top-most portion of the annotation lines up with the top-most edge of the plotting area. If *auto*, the anchor is equivalent to *middle* for data-referenced annotations or if there is an arrow, whereas for paper-referenced with no arrow, the anchor picked corresponds to the closest side.
// .schema.layout.layoutAttributes.scene.annotations.items.annotation.yanchor
type AnnotationYanchor string

const (
	AnnotationYanchorAuto   AnnotationYanchor = "auto"
	AnnotationYanchorTop    AnnotationYanchor = "top"
	AnnotationYanchorMiddle AnnotationYanchor = "middle"
	AnnotationYanchorBottom AnnotationYanchor = "bottom"
)

// AnnotationYref Sets the annotation's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
// .schema.layout.layoutAttributes.annotations.items.annotation.yref
type AnnotationYref string

const (
	AnnotationYrefPaper                                                                                                                   AnnotationYref = "paper"
	AnnotationYrefSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash AnnotationYref = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// ButtonMethod Sets the Plotly method to be called on click. If the `skip` method is used, the API updatemenu will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to updatemenu events manually via JavaScript.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.buttons.items.button.method
type ButtonMethod string

const (
	ButtonMethodRestyle  ButtonMethod = "restyle"
	ButtonMethodRelayout ButtonMethod = "relayout"
	ButtonMethodAnimate  ButtonMethod = "animate"
	ButtonMethodUpdate   ButtonMethod = "update"
	ButtonMethodSkip     ButtonMethod = "skip"
)

// ButtonStep The unit of measurement that the `count` value will set the range by.
// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.step
type ButtonStep string

const (
	ButtonStepMonth  ButtonStep = "month"
	ButtonStepYear   ButtonStep = "year"
	ButtonStepDay    ButtonStep = "day"
	ButtonStepHour   ButtonStep = "hour"
	ButtonStepMinute ButtonStep = "minute"
	ButtonStepSecond ButtonStep = "second"
	ButtonStepAll    ButtonStep = "all"
)

// ButtonStepmode Sets the range update mode. If *backward*, the range update shifts the start of range back *count* times *step* milliseconds. If *todate*, the range update shifts the start of range back to the first timestamp from *count* times *step* milliseconds back. For example, with `step` set to *year* and `count` set to *1* the range update shifts the start of the range back to January 01 of the current year. Month and year *todate* are currently available only for the built-in (Gregorian) calendar.
// .schema.layout.layoutAttributes.xaxis.rangeselector.buttons.items.button.stepmode
type ButtonStepmode string

const (
	ButtonStepmodeBackward ButtonStepmode = "backward"
	ButtonStepmodeTodate   ButtonStepmode = "todate"
)

// ImageLayer Specifies whether images are drawn below or above traces. When `xref` and `yref` are both set to `paper`, image is drawn below the entire plot area.
// .schema.layout.layoutAttributes.images.items.image.layer
type ImageLayer string

const (
	ImageLayerBelow ImageLayer = "below"
	ImageLayerAbove ImageLayer = "above"
)

// ImageSizing Specifies which dimension of the image to constrain.
// .schema.layout.layoutAttributes.images.items.image.sizing
type ImageSizing string

const (
	ImageSizingFill    ImageSizing = "fill"
	ImageSizingContain ImageSizing = "contain"
	ImageSizingStretch ImageSizing = "stretch"
)

// ImageXanchor Sets the anchor for the x position
// .schema.layout.layoutAttributes.images.items.image.xanchor
type ImageXanchor string

const (
	ImageXanchorLeft   ImageXanchor = "left"
	ImageXanchorCenter ImageXanchor = "center"
	ImageXanchorRight  ImageXanchor = "right"
)

// ImageXref Sets the images's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
// .schema.layout.layoutAttributes.images.items.image.xref
type ImageXref string

const (
	ImageXrefPaper                                                                                                                   ImageXref = "paper"
	ImageXrefSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash ImageXref = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// ImageYanchor Sets the anchor for the y position.
// .schema.layout.layoutAttributes.images.items.image.yanchor
type ImageYanchor string

const (
	ImageYanchorTop    ImageYanchor = "top"
	ImageYanchorMiddle ImageYanchor = "middle"
	ImageYanchorBottom ImageYanchor = "bottom"
)

// ImageYref Sets the images's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
// .schema.layout.layoutAttributes.images.items.image.yref
type ImageYref string

const (
	ImageYrefPaper                                                                                                                   ImageYref = "paper"
	ImageYrefSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash ImageYref = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayerSourcetype Sets the source type for this layer, that is the type of the layer data.
// .schema.layout.layoutAttributes.mapbox.layers.items.layer.sourcetype
type LayerSourcetype string

const (
	LayerSourcetypeGeojson LayerSourcetype = "geojson"
	LayerSourcetypeVector  LayerSourcetype = "vector"
	LayerSourcetypeRaster  LayerSourcetype = "raster"
	LayerSourcetypeImage   LayerSourcetype = "image"
)

// LayerSymbolPlacement Sets the symbol and/or text placement (mapbox.layer.layout.symbol-placement). If `placement` is *point*, the label is placed where the geometry is located If `placement` is *line*, the label is placed along the line of the geometry If `placement` is *line-center*, the label is placed on the center of the geometry
// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.placement
type LayerSymbolPlacement string

const (
	LayerSymbolPlacementPoint      LayerSymbolPlacement = "point"
	LayerSymbolPlacementLine       LayerSymbolPlacement = "line"
	LayerSymbolPlacementLineCenter LayerSymbolPlacement = "line-center"
)

// LayerSymbolTextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textfont.style
type LayerSymbolTextfontStyle string

const (
	LayerSymbolTextfontStyleNormal LayerSymbolTextfontStyle = "normal"
	LayerSymbolTextfontStyleItalic LayerSymbolTextfontStyle = "italic"
)

// LayerSymbolTextposition Sets the positions of the `text` elements with respects to the (x,y) coordinates.
// .schema.layout.layoutAttributes.mapbox.layers.items.layer.symbol.textposition
type LayerSymbolTextposition string

const (
	LayerSymbolTextpositionTopLeft      LayerSymbolTextposition = "top left"
	LayerSymbolTextpositionTopCenter    LayerSymbolTextposition = "top center"
	LayerSymbolTextpositionTopRight     LayerSymbolTextposition = "top right"
	LayerSymbolTextpositionMiddleLeft   LayerSymbolTextposition = "middle left"
	LayerSymbolTextpositionMiddleCenter LayerSymbolTextposition = "middle center"
	LayerSymbolTextpositionMiddleRight  LayerSymbolTextposition = "middle right"
	LayerSymbolTextpositionBottomLeft   LayerSymbolTextposition = "bottom left"
	LayerSymbolTextpositionBottomCenter LayerSymbolTextposition = "bottom center"
	LayerSymbolTextpositionBottomRight  LayerSymbolTextposition = "bottom right"
)

// LayerType Sets the layer type, that is the how the layer data set in `source` will be rendered With `sourcetype` set to *geojson*, the following values are allowed: *circle*, *line*, *fill* and *symbol*. but note that *line* and *fill* are not compatible with Point GeoJSON geometries. With `sourcetype` set to *vector*, the following values are allowed:  *circle*, *line*, *fill* and *symbol*. With `sourcetype` set to *raster* or `*image*`, only the *raster* value is allowed.
// .schema.layout.layoutAttributes.mapbox.layers.items.layer.type
type LayerType string

const (
	LayerTypeCircle LayerType = "circle"
	LayerTypeLine   LayerType = "line"
	LayerTypeFill   LayerType = "fill"
	LayerTypeSymbol LayerType = "symbol"
	LayerTypeRaster LayerType = "raster"
)

// LayoutAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.
// .schema.layout.layoutAttributes.autotypenumbers
type LayoutAutotypenumbers string

const (
	LayoutAutotypenumbersConvertTypes LayoutAutotypenumbers = "convert types"
	LayoutAutotypenumbersStrict       LayoutAutotypenumbers = "strict"
)

// LayoutBarmode Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
// .schema.traces.histogram.layoutAttributes.barmode
type LayoutBarmode string

const (
	HistogramBarmodeStack    LayoutBarmode = "stack"
	HistogramBarmodeGroup    LayoutBarmode = "group"
	HistogramBarmodeOverlay  LayoutBarmode = "overlay"
	HistogramBarmodeRelative LayoutBarmode = "relative"
	BarpolarBarmodeStack     LayoutBarmode = "stack"
	BarpolarBarmodeOverlay   LayoutBarmode = "overlay"
	BarBarmodeStack          LayoutBarmode = "stack"
	BarBarmodeGroup          LayoutBarmode = "group"
	BarBarmodeOverlay        LayoutBarmode = "overlay"
	BarBarmodeRelative       LayoutBarmode = "relative"
)

// LayoutBarnorm Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divided by the sum of all values at that location coordinate. *percent* is the same but multiplied by 100 to show percentages.
// .schema.traces.histogram.layoutAttributes.barnorm
type LayoutBarnorm string

const (
	HistogramBarnormEmpty    LayoutBarnorm = ""
	HistogramBarnormFraction LayoutBarnorm = "fraction"
	HistogramBarnormPercent  LayoutBarnorm = "percent"
	BarBarnormEmpty          LayoutBarnorm = ""
	BarBarnormFraction       LayoutBarnorm = "fraction"
	BarBarnormPercent        LayoutBarnorm = "percent"
)

// LayoutBoxmode Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes. Has no effect on traces that have *width* set.
// .schema.traces.candlestick.layoutAttributes.boxmode
type LayoutBoxmode string

const (
	CandlestickBoxmodeGroup   LayoutBoxmode = "group"
	CandlestickBoxmodeOverlay LayoutBoxmode = "overlay"
	BoxBoxmodeGroup           LayoutBoxmode = "group"
	BoxBoxmodeOverlay         LayoutBoxmode = "overlay"
)

// LayoutCalendar Sets the default calendar system to use for interpreting and displaying dates throughout the plot.
// .schema.layout.layoutAttributes.calendar
type LayoutCalendar string

const (
	LayoutCalendarChinese    LayoutCalendar = "chinese"
	LayoutCalendarCoptic     LayoutCalendar = "coptic"
	LayoutCalendarDiscworld  LayoutCalendar = "discworld"
	LayoutCalendarEthiopian  LayoutCalendar = "ethiopian"
	LayoutCalendarGregorian  LayoutCalendar = "gregorian"
	LayoutCalendarHebrew     LayoutCalendar = "hebrew"
	LayoutCalendarIslamic    LayoutCalendar = "islamic"
	LayoutCalendarJalali     LayoutCalendar = "jalali"
	LayoutCalendarJulian     LayoutCalendar = "julian"
	LayoutCalendarMayan      LayoutCalendar = "mayan"
	LayoutCalendarNanakshahi LayoutCalendar = "nanakshahi"
	LayoutCalendarNepali     LayoutCalendar = "nepali"
	LayoutCalendarPersian    LayoutCalendar = "persian"
	LayoutCalendarTaiwan     LayoutCalendar = "taiwan"
	LayoutCalendarThai       LayoutCalendar = "thai"
	LayoutCalendarUmmalqura  LayoutCalendar = "ummalqura"
)

// LayoutColoraxisColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.coloraxis.colorbar.exponentformat
type LayoutColoraxisColorbarExponentformat string

const (
	LayoutColoraxisColorbarExponentformatNone  LayoutColoraxisColorbarExponentformat = "none"
	LayoutColoraxisColorbarExponentformatE1    LayoutColoraxisColorbarExponentformat = "e"
	LayoutColoraxisColorbarExponentformatE2    LayoutColoraxisColorbarExponentformat = "E"
	LayoutColoraxisColorbarExponentformatPower LayoutColoraxisColorbarExponentformat = "power"
	LayoutColoraxisColorbarExponentformatSI    LayoutColoraxisColorbarExponentformat = "SI"
	LayoutColoraxisColorbarExponentformatB     LayoutColoraxisColorbarExponentformat = "B"
)

// LayoutColoraxisColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
// .schema.layout.layoutAttributes.coloraxis.colorbar.lenmode
type LayoutColoraxisColorbarLenmode string

const (
	LayoutColoraxisColorbarLenmodeFraction LayoutColoraxisColorbarLenmode = "fraction"
	LayoutColoraxisColorbarLenmodePixels   LayoutColoraxisColorbarLenmode = "pixels"
)

// LayoutColoraxisColorbarOrientation Sets the orientation of the colorbar.
// .schema.layout.layoutAttributes.coloraxis.colorbar.orientation
type LayoutColoraxisColorbarOrientation string

const (
	LayoutColoraxisColorbarOrientationH LayoutColoraxisColorbarOrientation = "h"
	LayoutColoraxisColorbarOrientationV LayoutColoraxisColorbarOrientation = "v"
)

// LayoutColoraxisColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.coloraxis.colorbar.showexponent
type LayoutColoraxisColorbarShowexponent string

const (
	LayoutColoraxisColorbarShowexponentAll   LayoutColoraxisColorbarShowexponent = "all"
	LayoutColoraxisColorbarShowexponentFirst LayoutColoraxisColorbarShowexponent = "first"
	LayoutColoraxisColorbarShowexponentLast  LayoutColoraxisColorbarShowexponent = "last"
	LayoutColoraxisColorbarShowexponentNone  LayoutColoraxisColorbarShowexponent = "none"
)

// LayoutColoraxisColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.coloraxis.colorbar.showtickprefix
type LayoutColoraxisColorbarShowtickprefix string

const (
	LayoutColoraxisColorbarShowtickprefixAll   LayoutColoraxisColorbarShowtickprefix = "all"
	LayoutColoraxisColorbarShowtickprefixFirst LayoutColoraxisColorbarShowtickprefix = "first"
	LayoutColoraxisColorbarShowtickprefixLast  LayoutColoraxisColorbarShowtickprefix = "last"
	LayoutColoraxisColorbarShowtickprefixNone  LayoutColoraxisColorbarShowtickprefix = "none"
)

// LayoutColoraxisColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.coloraxis.colorbar.showticksuffix
type LayoutColoraxisColorbarShowticksuffix string

const (
	LayoutColoraxisColorbarShowticksuffixAll   LayoutColoraxisColorbarShowticksuffix = "all"
	LayoutColoraxisColorbarShowticksuffixFirst LayoutColoraxisColorbarShowticksuffix = "first"
	LayoutColoraxisColorbarShowticksuffixLast  LayoutColoraxisColorbarShowticksuffix = "last"
	LayoutColoraxisColorbarShowticksuffixNone  LayoutColoraxisColorbarShowticksuffix = "none"
)

// LayoutColoraxisColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
// .schema.layout.layoutAttributes.coloraxis.colorbar.thicknessmode
type LayoutColoraxisColorbarThicknessmode string

const (
	LayoutColoraxisColorbarThicknessmodeFraction LayoutColoraxisColorbarThicknessmode = "fraction"
	LayoutColoraxisColorbarThicknessmodePixels   LayoutColoraxisColorbarThicknessmode = "pixels"
)

// LayoutColoraxisColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.style
type LayoutColoraxisColorbarTickfontStyle string

const (
	LayoutColoraxisColorbarTickfontStyleNormal LayoutColoraxisColorbarTickfontStyle = "normal"
	LayoutColoraxisColorbarTickfontStyleItalic LayoutColoraxisColorbarTickfontStyle = "italic"
)

// LayoutColoraxisColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.textcase
type LayoutColoraxisColorbarTickfontTextcase string

const (
	LayoutColoraxisColorbarTickfontTextcaseNormal   LayoutColoraxisColorbarTickfontTextcase = "normal"
	LayoutColoraxisColorbarTickfontTextcaseWordCaps LayoutColoraxisColorbarTickfontTextcase = "word caps"
	LayoutColoraxisColorbarTickfontTextcaseUpper    LayoutColoraxisColorbarTickfontTextcase = "upper"
	LayoutColoraxisColorbarTickfontTextcaseLower    LayoutColoraxisColorbarTickfontTextcase = "lower"
)

// LayoutColoraxisColorbarTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.variant
type LayoutColoraxisColorbarTickfontVariant string

const (
	LayoutColoraxisColorbarTickfontVariantNormal        LayoutColoraxisColorbarTickfontVariant = "normal"
	LayoutColoraxisColorbarTickfontVariantSmallCaps     LayoutColoraxisColorbarTickfontVariant = "small-caps"
	LayoutColoraxisColorbarTickfontVariantAllSmallCaps  LayoutColoraxisColorbarTickfontVariant = "all-small-caps"
	LayoutColoraxisColorbarTickfontVariantAllPetiteCaps LayoutColoraxisColorbarTickfontVariant = "all-petite-caps"
	LayoutColoraxisColorbarTickfontVariantPetiteCaps    LayoutColoraxisColorbarTickfontVariant = "petite-caps"
	LayoutColoraxisColorbarTickfontVariantUnicase       LayoutColoraxisColorbarTickfontVariant = "unicase"
)

// LayoutColoraxisColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
// .schema.layout.layoutAttributes.coloraxis.colorbar.ticklabeloverflow
type LayoutColoraxisColorbarTicklabeloverflow string

const (
	LayoutColoraxisColorbarTicklabeloverflowAllow          LayoutColoraxisColorbarTicklabeloverflow = "allow"
	LayoutColoraxisColorbarTicklabeloverflowHidePastDiv    LayoutColoraxisColorbarTicklabeloverflow = "hide past div"
	LayoutColoraxisColorbarTicklabeloverflowHidePastDomain LayoutColoraxisColorbarTicklabeloverflow = "hide past domain"
)

// LayoutColoraxisColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
// .schema.layout.layoutAttributes.coloraxis.colorbar.ticklabelposition
type LayoutColoraxisColorbarTicklabelposition string

const (
	LayoutColoraxisColorbarTicklabelpositionOutside       LayoutColoraxisColorbarTicklabelposition = "outside"
	LayoutColoraxisColorbarTicklabelpositionInside        LayoutColoraxisColorbarTicklabelposition = "inside"
	LayoutColoraxisColorbarTicklabelpositionOutsideTop    LayoutColoraxisColorbarTicklabelposition = "outside top"
	LayoutColoraxisColorbarTicklabelpositionInsideTop     LayoutColoraxisColorbarTicklabelposition = "inside top"
	LayoutColoraxisColorbarTicklabelpositionOutsideLeft   LayoutColoraxisColorbarTicklabelposition = "outside left"
	LayoutColoraxisColorbarTicklabelpositionInsideLeft    LayoutColoraxisColorbarTicklabelposition = "inside left"
	LayoutColoraxisColorbarTicklabelpositionOutsideRight  LayoutColoraxisColorbarTicklabelposition = "outside right"
	LayoutColoraxisColorbarTicklabelpositionInsideRight   LayoutColoraxisColorbarTicklabelposition = "inside right"
	LayoutColoraxisColorbarTicklabelpositionOutsideBottom LayoutColoraxisColorbarTicklabelposition = "outside bottom"
	LayoutColoraxisColorbarTicklabelpositionInsideBottom  LayoutColoraxisColorbarTicklabelposition = "inside bottom"
)

// LayoutColoraxisColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.coloraxis.colorbar.tickmode
type LayoutColoraxisColorbarTickmode string

const (
	LayoutColoraxisColorbarTickmodeAuto   LayoutColoraxisColorbarTickmode = "auto"
	LayoutColoraxisColorbarTickmodeLinear LayoutColoraxisColorbarTickmode = "linear"
	LayoutColoraxisColorbarTickmodeArray  LayoutColoraxisColorbarTickmode = "array"
)

// LayoutColoraxisColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.coloraxis.colorbar.ticks
type LayoutColoraxisColorbarTicks string

const (
	LayoutColoraxisColorbarTicksOutside LayoutColoraxisColorbarTicks = "outside"
	LayoutColoraxisColorbarTicksInside  LayoutColoraxisColorbarTicks = "inside"
	LayoutColoraxisColorbarTicksEmpty   LayoutColoraxisColorbarTicks = ""
)

// LayoutColoraxisColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.style
type LayoutColoraxisColorbarTitleFontStyle string

const (
	LayoutColoraxisColorbarTitleFontStyleNormal LayoutColoraxisColorbarTitleFontStyle = "normal"
	LayoutColoraxisColorbarTitleFontStyleItalic LayoutColoraxisColorbarTitleFontStyle = "italic"
)

// LayoutColoraxisColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.textcase
type LayoutColoraxisColorbarTitleFontTextcase string

const (
	LayoutColoraxisColorbarTitleFontTextcaseNormal   LayoutColoraxisColorbarTitleFontTextcase = "normal"
	LayoutColoraxisColorbarTitleFontTextcaseWordCaps LayoutColoraxisColorbarTitleFontTextcase = "word caps"
	LayoutColoraxisColorbarTitleFontTextcaseUpper    LayoutColoraxisColorbarTitleFontTextcase = "upper"
	LayoutColoraxisColorbarTitleFontTextcaseLower    LayoutColoraxisColorbarTitleFontTextcase = "lower"
)

// LayoutColoraxisColorbarTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.variant
type LayoutColoraxisColorbarTitleFontVariant string

const (
	LayoutColoraxisColorbarTitleFontVariantNormal        LayoutColoraxisColorbarTitleFontVariant = "normal"
	LayoutColoraxisColorbarTitleFontVariantSmallCaps     LayoutColoraxisColorbarTitleFontVariant = "small-caps"
	LayoutColoraxisColorbarTitleFontVariantAllSmallCaps  LayoutColoraxisColorbarTitleFontVariant = "all-small-caps"
	LayoutColoraxisColorbarTitleFontVariantAllPetiteCaps LayoutColoraxisColorbarTitleFontVariant = "all-petite-caps"
	LayoutColoraxisColorbarTitleFontVariantPetiteCaps    LayoutColoraxisColorbarTitleFontVariant = "petite-caps"
	LayoutColoraxisColorbarTitleFontVariantUnicase       LayoutColoraxisColorbarTitleFontVariant = "unicase"
)

// LayoutColoraxisColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
// .schema.layout.layoutAttributes.coloraxis.colorbar.title.side
type LayoutColoraxisColorbarTitleSide string

const (
	LayoutColoraxisColorbarTitleSideRight  LayoutColoraxisColorbarTitleSide = "right"
	LayoutColoraxisColorbarTitleSideTop    LayoutColoraxisColorbarTitleSide = "top"
	LayoutColoraxisColorbarTitleSideBottom LayoutColoraxisColorbarTitleSide = "bottom"
)

// LayoutColoraxisColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
// .schema.layout.layoutAttributes.coloraxis.colorbar.xanchor
type LayoutColoraxisColorbarXanchor string

const (
	LayoutColoraxisColorbarXanchorLeft   LayoutColoraxisColorbarXanchor = "left"
	LayoutColoraxisColorbarXanchorCenter LayoutColoraxisColorbarXanchor = "center"
	LayoutColoraxisColorbarXanchorRight  LayoutColoraxisColorbarXanchor = "right"
)

// LayoutColoraxisColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
// .schema.layout.layoutAttributes.coloraxis.colorbar.xref
type LayoutColoraxisColorbarXref string

const (
	LayoutColoraxisColorbarXrefContainer LayoutColoraxisColorbarXref = "container"
	LayoutColoraxisColorbarXrefPaper     LayoutColoraxisColorbarXref = "paper"
)

// LayoutColoraxisColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
// .schema.layout.layoutAttributes.coloraxis.colorbar.yanchor
type LayoutColoraxisColorbarYanchor string

const (
	LayoutColoraxisColorbarYanchorTop    LayoutColoraxisColorbarYanchor = "top"
	LayoutColoraxisColorbarYanchorMiddle LayoutColoraxisColorbarYanchor = "middle"
	LayoutColoraxisColorbarYanchorBottom LayoutColoraxisColorbarYanchor = "bottom"
)

// LayoutColoraxisColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
// .schema.layout.layoutAttributes.coloraxis.colorbar.yref
type LayoutColoraxisColorbarYref string

const (
	LayoutColoraxisColorbarYrefContainer LayoutColoraxisColorbarYref = "container"
	LayoutColoraxisColorbarYrefPaper     LayoutColoraxisColorbarYref = "paper"
)

// LayoutDragmode Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.
// .schema.layout.layoutAttributes.dragmode
type LayoutDragmode interface{}

var (
	LayoutDragmodeZoom           LayoutDragmode = "zoom"
	LayoutDragmodePan            LayoutDragmode = "pan"
	LayoutDragmodeSelect         LayoutDragmode = "select"
	LayoutDragmodeLasso          LayoutDragmode = "lasso"
	LayoutDragmodeDrawclosedpath LayoutDragmode = "drawclosedpath"
	LayoutDragmodeDrawopenpath   LayoutDragmode = "drawopenpath"
	LayoutDragmodeDrawline       LayoutDragmode = "drawline"
	LayoutDragmodeDrawrect       LayoutDragmode = "drawrect"
	LayoutDragmodeDrawcircle     LayoutDragmode = "drawcircle"
	LayoutDragmodeOrbit          LayoutDragmode = "orbit"
	LayoutDragmodeTurntable      LayoutDragmode = "turntable"
	LayoutDragmodeFalse          LayoutDragmode = false
)

// LayoutFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.font.style
type LayoutFontStyle string

const (
	LayoutFontStyleNormal LayoutFontStyle = "normal"
	LayoutFontStyleItalic LayoutFontStyle = "italic"
)

// LayoutFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.font.textcase
type LayoutFontTextcase string

const (
	LayoutFontTextcaseNormal   LayoutFontTextcase = "normal"
	LayoutFontTextcaseWordCaps LayoutFontTextcase = "word caps"
	LayoutFontTextcaseUpper    LayoutFontTextcase = "upper"
	LayoutFontTextcaseLower    LayoutFontTextcase = "lower"
)

// LayoutFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.font.variant
type LayoutFontVariant string

const (
	LayoutFontVariantNormal        LayoutFontVariant = "normal"
	LayoutFontVariantSmallCaps     LayoutFontVariant = "small-caps"
	LayoutFontVariantAllSmallCaps  LayoutFontVariant = "all-small-caps"
	LayoutFontVariantAllPetiteCaps LayoutFontVariant = "all-petite-caps"
	LayoutFontVariantPetiteCaps    LayoutFontVariant = "petite-caps"
	LayoutFontVariantUnicase       LayoutFontVariant = "unicase"
)

// LayoutFunnelmode Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
// .schema.traces.funnel.layoutAttributes.funnelmode
type LayoutFunnelmode string

const (
	FunnelFunnelmodeStack   LayoutFunnelmode = "stack"
	FunnelFunnelmodeGroup   LayoutFunnelmode = "group"
	FunnelFunnelmodeOverlay LayoutFunnelmode = "overlay"
)

// LayoutGeoFitbounds Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If *locations*, only the trace's visible locations are considered in the `fitbounds` computations. If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to *false*.
// .schema.layout.layoutAttributes.geo.fitbounds
type LayoutGeoFitbounds interface{}

var (
	LayoutGeoFitboundsFalse     LayoutGeoFitbounds = false
	LayoutGeoFitboundsLocations LayoutGeoFitbounds = "locations"
	LayoutGeoFitboundsGeojson   LayoutGeoFitbounds = "geojson"
)

// LayoutGeoProjectionType Sets the projection type.
// .schema.layout.layoutAttributes.geo.projection.type
type LayoutGeoProjectionType string

const (
	LayoutGeoProjectionTypeAiry                     LayoutGeoProjectionType = "airy"
	LayoutGeoProjectionTypeAitoff                   LayoutGeoProjectionType = "aitoff"
	LayoutGeoProjectionTypeAlbers                   LayoutGeoProjectionType = "albers"
	LayoutGeoProjectionTypeAlbersUsa                LayoutGeoProjectionType = "albers usa"
	LayoutGeoProjectionTypeAugust                   LayoutGeoProjectionType = "august"
	LayoutGeoProjectionTypeAzimuthalEqualArea       LayoutGeoProjectionType = "azimuthal equal area"
	LayoutGeoProjectionTypeAzimuthalEquidistant     LayoutGeoProjectionType = "azimuthal equidistant"
	LayoutGeoProjectionTypeBaker                    LayoutGeoProjectionType = "baker"
	LayoutGeoProjectionTypeBertin1953               LayoutGeoProjectionType = "bertin1953"
	LayoutGeoProjectionTypeBoggs                    LayoutGeoProjectionType = "boggs"
	LayoutGeoProjectionTypeBonne                    LayoutGeoProjectionType = "bonne"
	LayoutGeoProjectionTypeBottomley                LayoutGeoProjectionType = "bottomley"
	LayoutGeoProjectionTypeBromley                  LayoutGeoProjectionType = "bromley"
	LayoutGeoProjectionTypeCollignon                LayoutGeoProjectionType = "collignon"
	LayoutGeoProjectionTypeConicConformal           LayoutGeoProjectionType = "conic conformal"
	LayoutGeoProjectionTypeConicEqualArea           LayoutGeoProjectionType = "conic equal area"
	LayoutGeoProjectionTypeConicEquidistant         LayoutGeoProjectionType = "conic equidistant"
	LayoutGeoProjectionTypeCraig                    LayoutGeoProjectionType = "craig"
	LayoutGeoProjectionTypeCraster                  LayoutGeoProjectionType = "craster"
	LayoutGeoProjectionTypeCylindricalEqualArea     LayoutGeoProjectionType = "cylindrical equal area"
	LayoutGeoProjectionTypeCylindricalStereographic LayoutGeoProjectionType = "cylindrical stereographic"
	LayoutGeoProjectionTypeEckert1                  LayoutGeoProjectionType = "eckert1"
	LayoutGeoProjectionTypeEckert2                  LayoutGeoProjectionType = "eckert2"
	LayoutGeoProjectionTypeEckert3                  LayoutGeoProjectionType = "eckert3"
	LayoutGeoProjectionTypeEckert4                  LayoutGeoProjectionType = "eckert4"
	LayoutGeoProjectionTypeEckert5                  LayoutGeoProjectionType = "eckert5"
	LayoutGeoProjectionTypeEckert6                  LayoutGeoProjectionType = "eckert6"
	LayoutGeoProjectionTypeEisenlohr                LayoutGeoProjectionType = "eisenlohr"
	LayoutGeoProjectionTypeEqualEarth               LayoutGeoProjectionType = "equal earth"
	LayoutGeoProjectionTypeEquirectangular          LayoutGeoProjectionType = "equirectangular"
	LayoutGeoProjectionTypeFahey                    LayoutGeoProjectionType = "fahey"
	LayoutGeoProjectionTypeFoucaut                  LayoutGeoProjectionType = "foucaut"
	LayoutGeoProjectionTypeFoucautSinusoidal        LayoutGeoProjectionType = "foucaut sinusoidal"
	LayoutGeoProjectionTypeGinzburg4                LayoutGeoProjectionType = "ginzburg4"
	LayoutGeoProjectionTypeGinzburg5                LayoutGeoProjectionType = "ginzburg5"
	LayoutGeoProjectionTypeGinzburg6                LayoutGeoProjectionType = "ginzburg6"
	LayoutGeoProjectionTypeGinzburg8                LayoutGeoProjectionType = "ginzburg8"
	LayoutGeoProjectionTypeGinzburg9                LayoutGeoProjectionType = "ginzburg9"
	LayoutGeoProjectionTypeGnomonic                 LayoutGeoProjectionType = "gnomonic"
	LayoutGeoProjectionTypeGringorten               LayoutGeoProjectionType = "gringorten"
	LayoutGeoProjectionTypeGringortenQuincuncial    LayoutGeoProjectionType = "gringorten quincuncial"
	LayoutGeoProjectionTypeGuyou                    LayoutGeoProjectionType = "guyou"
	LayoutGeoProjectionTypeHammer                   LayoutGeoProjectionType = "hammer"
	LayoutGeoProjectionTypeHill                     LayoutGeoProjectionType = "hill"
	LayoutGeoProjectionTypeHomolosine               LayoutGeoProjectionType = "homolosine"
	LayoutGeoProjectionTypeHufnagel                 LayoutGeoProjectionType = "hufnagel"
	LayoutGeoProjectionTypeHyperelliptical          LayoutGeoProjectionType = "hyperelliptical"
	LayoutGeoProjectionTypeKavrayskiy7              LayoutGeoProjectionType = "kavrayskiy7"
	LayoutGeoProjectionTypeLagrange                 LayoutGeoProjectionType = "lagrange"
	LayoutGeoProjectionTypeLarrivee                 LayoutGeoProjectionType = "larrivee"
	LayoutGeoProjectionTypeLaskowski                LayoutGeoProjectionType = "laskowski"
	LayoutGeoProjectionTypeLoximuthal               LayoutGeoProjectionType = "loximuthal"
	LayoutGeoProjectionTypeMercator                 LayoutGeoProjectionType = "mercator"
	LayoutGeoProjectionTypeMiller                   LayoutGeoProjectionType = "miller"
	LayoutGeoProjectionTypeMollweide                LayoutGeoProjectionType = "mollweide"
	LayoutGeoProjectionTypeMtFlatPolarParabolic     LayoutGeoProjectionType = "mt flat polar parabolic"
	LayoutGeoProjectionTypeMtFlatPolarQuartic       LayoutGeoProjectionType = "mt flat polar quartic"
	LayoutGeoProjectionTypeMtFlatPolarSinusoidal    LayoutGeoProjectionType = "mt flat polar sinusoidal"
	LayoutGeoProjectionTypeNaturalEarth             LayoutGeoProjectionType = "natural earth"
	LayoutGeoProjectionTypeNaturalEarth1            LayoutGeoProjectionType = "natural earth1"
	LayoutGeoProjectionTypeNaturalEarth2            LayoutGeoProjectionType = "natural earth2"
	LayoutGeoProjectionTypeNellHammer               LayoutGeoProjectionType = "nell hammer"
	LayoutGeoProjectionTypeNicolosi                 LayoutGeoProjectionType = "nicolosi"
	LayoutGeoProjectionTypeOrthographic             LayoutGeoProjectionType = "orthographic"
	LayoutGeoProjectionTypePatterson                LayoutGeoProjectionType = "patterson"
	LayoutGeoProjectionTypePeirceQuincuncial        LayoutGeoProjectionType = "peirce quincuncial"
	LayoutGeoProjectionTypePolyconic                LayoutGeoProjectionType = "polyconic"
	LayoutGeoProjectionTypeRectangularPolyconic     LayoutGeoProjectionType = "rectangular polyconic"
	LayoutGeoProjectionTypeRobinson                 LayoutGeoProjectionType = "robinson"
	LayoutGeoProjectionTypeSatellite                LayoutGeoProjectionType = "satellite"
	LayoutGeoProjectionTypeSinuMollweide            LayoutGeoProjectionType = "sinu mollweide"
	LayoutGeoProjectionTypeSinusoidal               LayoutGeoProjectionType = "sinusoidal"
	LayoutGeoProjectionTypeStereographic            LayoutGeoProjectionType = "stereographic"
	LayoutGeoProjectionTypeTimes                    LayoutGeoProjectionType = "times"
	LayoutGeoProjectionTypeTransverseMercator       LayoutGeoProjectionType = "transverse mercator"
	LayoutGeoProjectionTypeVanDerGrinten            LayoutGeoProjectionType = "van der grinten"
	LayoutGeoProjectionTypeVanDerGrinten2           LayoutGeoProjectionType = "van der grinten2"
	LayoutGeoProjectionTypeVanDerGrinten3           LayoutGeoProjectionType = "van der grinten3"
	LayoutGeoProjectionTypeVanDerGrinten4           LayoutGeoProjectionType = "van der grinten4"
	LayoutGeoProjectionTypeWagner4                  LayoutGeoProjectionType = "wagner4"
	LayoutGeoProjectionTypeWagner6                  LayoutGeoProjectionType = "wagner6"
	LayoutGeoProjectionTypeWiechel                  LayoutGeoProjectionType = "wiechel"
	LayoutGeoProjectionTypeWinkelTripel             LayoutGeoProjectionType = "winkel tripel"
	LayoutGeoProjectionTypeWinkel3                  LayoutGeoProjectionType = "winkel3"
)

// LayoutGeoResolution Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.
// .schema.layout.layoutAttributes.geo.resolution
type LayoutGeoResolution interface{}

var (
	LayoutGeoResolutionNumber110 LayoutGeoResolution = 110
	LayoutGeoResolutionNumber50  LayoutGeoResolution = 50
)

// LayoutGeoScope Set the scope of the map.
// .schema.layout.layoutAttributes.geo.scope
type LayoutGeoScope string

const (
	LayoutGeoScopeAfrica       LayoutGeoScope = "africa"
	LayoutGeoScopeAsia         LayoutGeoScope = "asia"
	LayoutGeoScopeEurope       LayoutGeoScope = "europe"
	LayoutGeoScopeNorthAmerica LayoutGeoScope = "north america"
	LayoutGeoScopeSouthAmerica LayoutGeoScope = "south america"
	LayoutGeoScopeUsa          LayoutGeoScope = "usa"
	LayoutGeoScopeWorld        LayoutGeoScope = "world"
)

// LayoutGridPattern If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.
// .schema.layout.layoutAttributes.grid.pattern
type LayoutGridPattern string

const (
	LayoutGridPatternIndependent LayoutGridPattern = "independent"
	LayoutGridPatternCoupled     LayoutGridPattern = "coupled"
)

// LayoutGridRoworder Is the first row the top or the bottom? Note that columns are always enumerated from left to right.
// .schema.layout.layoutAttributes.grid.roworder
type LayoutGridRoworder string

const (
	LayoutGridRoworderTopToBottom LayoutGridRoworder = "top to bottom"
	LayoutGridRoworderBottomToTop LayoutGridRoworder = "bottom to top"
)

// LayoutGridXside Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.
// .schema.layout.layoutAttributes.grid.xside
type LayoutGridXside string

const (
	LayoutGridXsideBottom     LayoutGridXside = "bottom"
	LayoutGridXsideBottomPlot LayoutGridXside = "bottom plot"
	LayoutGridXsideTopPlot    LayoutGridXside = "top plot"
	LayoutGridXsideTop        LayoutGridXside = "top"
)

// LayoutGridYside Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.
// .schema.layout.layoutAttributes.grid.yside
type LayoutGridYside string

const (
	LayoutGridYsideLeft      LayoutGridYside = "left"
	LayoutGridYsideLeftPlot  LayoutGridYside = "left plot"
	LayoutGridYsideRightPlot LayoutGridYside = "right plot"
	LayoutGridYsideRight     LayoutGridYside = "right"
)

// LayoutHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
// .schema.layout.layoutAttributes.hoverlabel.align
type LayoutHoverlabelAlign string

const (
	LayoutHoverlabelAlignLeft  LayoutHoverlabelAlign = "left"
	LayoutHoverlabelAlignRight LayoutHoverlabelAlign = "right"
	LayoutHoverlabelAlignAuto  LayoutHoverlabelAlign = "auto"
)

// LayoutHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.hoverlabel.font.style
type LayoutHoverlabelFontStyle string

const (
	LayoutHoverlabelFontStyleNormal LayoutHoverlabelFontStyle = "normal"
	LayoutHoverlabelFontStyleItalic LayoutHoverlabelFontStyle = "italic"
)

// LayoutHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.hoverlabel.font.textcase
type LayoutHoverlabelFontTextcase string

const (
	LayoutHoverlabelFontTextcaseNormal   LayoutHoverlabelFontTextcase = "normal"
	LayoutHoverlabelFontTextcaseWordCaps LayoutHoverlabelFontTextcase = "word caps"
	LayoutHoverlabelFontTextcaseUpper    LayoutHoverlabelFontTextcase = "upper"
	LayoutHoverlabelFontTextcaseLower    LayoutHoverlabelFontTextcase = "lower"
)

// LayoutHoverlabelFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.hoverlabel.font.variant
type LayoutHoverlabelFontVariant string

const (
	LayoutHoverlabelFontVariantNormal        LayoutHoverlabelFontVariant = "normal"
	LayoutHoverlabelFontVariantSmallCaps     LayoutHoverlabelFontVariant = "small-caps"
	LayoutHoverlabelFontVariantAllSmallCaps  LayoutHoverlabelFontVariant = "all-small-caps"
	LayoutHoverlabelFontVariantAllPetiteCaps LayoutHoverlabelFontVariant = "all-petite-caps"
	LayoutHoverlabelFontVariantPetiteCaps    LayoutHoverlabelFontVariant = "petite-caps"
	LayoutHoverlabelFontVariantUnicase       LayoutHoverlabelFontVariant = "unicase"
)

// LayoutHoverlabelGrouptitlefontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.style
type LayoutHoverlabelGrouptitlefontStyle string

const (
	LayoutHoverlabelGrouptitlefontStyleNormal LayoutHoverlabelGrouptitlefontStyle = "normal"
	LayoutHoverlabelGrouptitlefontStyleItalic LayoutHoverlabelGrouptitlefontStyle = "italic"
)

// LayoutHoverlabelGrouptitlefontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.textcase
type LayoutHoverlabelGrouptitlefontTextcase string

const (
	LayoutHoverlabelGrouptitlefontTextcaseNormal   LayoutHoverlabelGrouptitlefontTextcase = "normal"
	LayoutHoverlabelGrouptitlefontTextcaseWordCaps LayoutHoverlabelGrouptitlefontTextcase = "word caps"
	LayoutHoverlabelGrouptitlefontTextcaseUpper    LayoutHoverlabelGrouptitlefontTextcase = "upper"
	LayoutHoverlabelGrouptitlefontTextcaseLower    LayoutHoverlabelGrouptitlefontTextcase = "lower"
)

// LayoutHoverlabelGrouptitlefontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.variant
type LayoutHoverlabelGrouptitlefontVariant string

const (
	LayoutHoverlabelGrouptitlefontVariantNormal        LayoutHoverlabelGrouptitlefontVariant = "normal"
	LayoutHoverlabelGrouptitlefontVariantSmallCaps     LayoutHoverlabelGrouptitlefontVariant = "small-caps"
	LayoutHoverlabelGrouptitlefontVariantAllSmallCaps  LayoutHoverlabelGrouptitlefontVariant = "all-small-caps"
	LayoutHoverlabelGrouptitlefontVariantAllPetiteCaps LayoutHoverlabelGrouptitlefontVariant = "all-petite-caps"
	LayoutHoverlabelGrouptitlefontVariantPetiteCaps    LayoutHoverlabelGrouptitlefontVariant = "petite-caps"
	LayoutHoverlabelGrouptitlefontVariantUnicase       LayoutHoverlabelGrouptitlefontVariant = "unicase"
)

// LayoutHovermode Determines the mode of hover interactions. If *closest*, a single hoverlabel will appear for the *closest* point within the `hoverdistance`. If *x* (or *y*), multiple hoverlabels will appear for multiple points at the *closest* x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If *x unified* (or *y unified*), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.
// .schema.layout.layoutAttributes.hovermode
type LayoutHovermode interface{}

var (
	LayoutHovermodeX        LayoutHovermode = "x"
	LayoutHovermodeY        LayoutHovermode = "y"
	LayoutHovermodeClosest  LayoutHovermode = "closest"
	LayoutHovermodeFalse    LayoutHovermode = false
	LayoutHovermodeXUnified LayoutHovermode = "x unified"
	LayoutHovermodeYUnified LayoutHovermode = "y unified"
)

// LayoutHoversubplots Determines expansion of hover effects to other subplots If *single* just the axis pair of the primary point is included without overlaying subplots. If *overlaying* all subplots using the main axis and occupying the same space are included. If *axis*, also include stacked subplots using the same axis when `hovermode` is set to *x*, *x unified*, *y* or *y unified*.
// .schema.layout.layoutAttributes.hoversubplots
type LayoutHoversubplots string

const (
	LayoutHoversubplotsSingle     LayoutHoversubplots = "single"
	LayoutHoversubplotsOverlaying LayoutHoversubplots = "overlaying"
	LayoutHoversubplotsAxis       LayoutHoversubplots = "axis"
)

// LayoutLegendEntrywidthmode Determines what entrywidth means.
// .schema.layout.layoutAttributes.legend.entrywidthmode
type LayoutLegendEntrywidthmode string

const (
	LayoutLegendEntrywidthmodeFraction LayoutLegendEntrywidthmode = "fraction"
	LayoutLegendEntrywidthmodePixels   LayoutLegendEntrywidthmode = "pixels"
)

// LayoutLegendFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.legend.font.style
type LayoutLegendFontStyle string

const (
	LayoutLegendFontStyleNormal LayoutLegendFontStyle = "normal"
	LayoutLegendFontStyleItalic LayoutLegendFontStyle = "italic"
)

// LayoutLegendFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.legend.font.textcase
type LayoutLegendFontTextcase string

const (
	LayoutLegendFontTextcaseNormal   LayoutLegendFontTextcase = "normal"
	LayoutLegendFontTextcaseWordCaps LayoutLegendFontTextcase = "word caps"
	LayoutLegendFontTextcaseUpper    LayoutLegendFontTextcase = "upper"
	LayoutLegendFontTextcaseLower    LayoutLegendFontTextcase = "lower"
)

// LayoutLegendFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.legend.font.variant
type LayoutLegendFontVariant string

const (
	LayoutLegendFontVariantNormal        LayoutLegendFontVariant = "normal"
	LayoutLegendFontVariantSmallCaps     LayoutLegendFontVariant = "small-caps"
	LayoutLegendFontVariantAllSmallCaps  LayoutLegendFontVariant = "all-small-caps"
	LayoutLegendFontVariantAllPetiteCaps LayoutLegendFontVariant = "all-petite-caps"
	LayoutLegendFontVariantPetiteCaps    LayoutLegendFontVariant = "petite-caps"
	LayoutLegendFontVariantUnicase       LayoutLegendFontVariant = "unicase"
)

// LayoutLegendGroupclick Determines the behavior on legend group item click. *toggleitem* toggles the visibility of the individual item clicked on the graph. *togglegroup* toggles the visibility of all items in the same legendgroup as the item clicked on the graph.
// .schema.layout.layoutAttributes.legend.groupclick
type LayoutLegendGroupclick string

const (
	LayoutLegendGroupclickToggleitem  LayoutLegendGroupclick = "toggleitem"
	LayoutLegendGroupclickTogglegroup LayoutLegendGroupclick = "togglegroup"
)

// LayoutLegendGrouptitlefontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.legend.grouptitlefont.style
type LayoutLegendGrouptitlefontStyle string

const (
	LayoutLegendGrouptitlefontStyleNormal LayoutLegendGrouptitlefontStyle = "normal"
	LayoutLegendGrouptitlefontStyleItalic LayoutLegendGrouptitlefontStyle = "italic"
)

// LayoutLegendGrouptitlefontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.legend.grouptitlefont.textcase
type LayoutLegendGrouptitlefontTextcase string

const (
	LayoutLegendGrouptitlefontTextcaseNormal   LayoutLegendGrouptitlefontTextcase = "normal"
	LayoutLegendGrouptitlefontTextcaseWordCaps LayoutLegendGrouptitlefontTextcase = "word caps"
	LayoutLegendGrouptitlefontTextcaseUpper    LayoutLegendGrouptitlefontTextcase = "upper"
	LayoutLegendGrouptitlefontTextcaseLower    LayoutLegendGrouptitlefontTextcase = "lower"
)

// LayoutLegendGrouptitlefontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.legend.grouptitlefont.variant
type LayoutLegendGrouptitlefontVariant string

const (
	LayoutLegendGrouptitlefontVariantNormal        LayoutLegendGrouptitlefontVariant = "normal"
	LayoutLegendGrouptitlefontVariantSmallCaps     LayoutLegendGrouptitlefontVariant = "small-caps"
	LayoutLegendGrouptitlefontVariantAllSmallCaps  LayoutLegendGrouptitlefontVariant = "all-small-caps"
	LayoutLegendGrouptitlefontVariantAllPetiteCaps LayoutLegendGrouptitlefontVariant = "all-petite-caps"
	LayoutLegendGrouptitlefontVariantPetiteCaps    LayoutLegendGrouptitlefontVariant = "petite-caps"
	LayoutLegendGrouptitlefontVariantUnicase       LayoutLegendGrouptitlefontVariant = "unicase"
)

// LayoutLegendItemclick Determines the behavior on legend item click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item click interactions.
// .schema.layout.layoutAttributes.legend.itemclick
type LayoutLegendItemclick interface{}

var (
	LayoutLegendItemclickToggle       LayoutLegendItemclick = "toggle"
	LayoutLegendItemclickToggleothers LayoutLegendItemclick = "toggleothers"
	LayoutLegendItemclickFalse        LayoutLegendItemclick = false
)

// LayoutLegendItemdoubleclick Determines the behavior on legend item double-click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item double-click interactions.
// .schema.layout.layoutAttributes.legend.itemdoubleclick
type LayoutLegendItemdoubleclick interface{}

var (
	LayoutLegendItemdoubleclickToggle       LayoutLegendItemdoubleclick = "toggle"
	LayoutLegendItemdoubleclickToggleothers LayoutLegendItemdoubleclick = "toggleothers"
	LayoutLegendItemdoubleclickFalse        LayoutLegendItemdoubleclick = false
)

// LayoutLegendItemsizing Determines if the legend items symbols scale with their corresponding *trace* attributes or remain *constant* independent of the symbol size on the graph.
// .schema.layout.layoutAttributes.legend.itemsizing
type LayoutLegendItemsizing string

const (
	LayoutLegendItemsizingTrace    LayoutLegendItemsizing = "trace"
	LayoutLegendItemsizingConstant LayoutLegendItemsizing = "constant"
)

// LayoutLegendOrientation Sets the orientation of the legend.
// .schema.layout.layoutAttributes.legend.orientation
type LayoutLegendOrientation string

const (
	LayoutLegendOrientationV LayoutLegendOrientation = "v"
	LayoutLegendOrientationH LayoutLegendOrientation = "h"
)

// LayoutLegendTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.legend.title.font.style
type LayoutLegendTitleFontStyle string

const (
	LayoutLegendTitleFontStyleNormal LayoutLegendTitleFontStyle = "normal"
	LayoutLegendTitleFontStyleItalic LayoutLegendTitleFontStyle = "italic"
)

// LayoutLegendTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.legend.title.font.textcase
type LayoutLegendTitleFontTextcase string

const (
	LayoutLegendTitleFontTextcaseNormal   LayoutLegendTitleFontTextcase = "normal"
	LayoutLegendTitleFontTextcaseWordCaps LayoutLegendTitleFontTextcase = "word caps"
	LayoutLegendTitleFontTextcaseUpper    LayoutLegendTitleFontTextcase = "upper"
	LayoutLegendTitleFontTextcaseLower    LayoutLegendTitleFontTextcase = "lower"
)

// LayoutLegendTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.legend.title.font.variant
type LayoutLegendTitleFontVariant string

const (
	LayoutLegendTitleFontVariantNormal        LayoutLegendTitleFontVariant = "normal"
	LayoutLegendTitleFontVariantSmallCaps     LayoutLegendTitleFontVariant = "small-caps"
	LayoutLegendTitleFontVariantAllSmallCaps  LayoutLegendTitleFontVariant = "all-small-caps"
	LayoutLegendTitleFontVariantAllPetiteCaps LayoutLegendTitleFontVariant = "all-petite-caps"
	LayoutLegendTitleFontVariantPetiteCaps    LayoutLegendTitleFontVariant = "petite-caps"
	LayoutLegendTitleFontVariantUnicase       LayoutLegendTitleFontVariant = "unicase"
)

// LayoutLegendTitleSide Determines the location of legend's title with respect to the legend items. Defaulted to *top* with `orientation` is *h*. Defaulted to *left* with `orientation` is *v*. The *top left* options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.
// .schema.layout.layoutAttributes.legend.title.side
type LayoutLegendTitleSide string

const (
	LayoutLegendTitleSideTop       LayoutLegendTitleSide = "top"
	LayoutLegendTitleSideLeft      LayoutLegendTitleSide = "left"
	LayoutLegendTitleSideTopLeft   LayoutLegendTitleSide = "top left"
	LayoutLegendTitleSideTopCenter LayoutLegendTitleSide = "top center"
	LayoutLegendTitleSideTopRight  LayoutLegendTitleSide = "top right"
)

// LayoutLegendValign Sets the vertical alignment of the symbols with respect to their associated text.
// .schema.layout.layoutAttributes.legend.valign
type LayoutLegendValign string

const (
	LayoutLegendValignTop    LayoutLegendValign = "top"
	LayoutLegendValignMiddle LayoutLegendValign = "middle"
	LayoutLegendValignBottom LayoutLegendValign = "bottom"
)

// LayoutLegendXanchor Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend. Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.
// .schema.layout.layoutAttributes.legend.xanchor
type LayoutLegendXanchor string

const (
	LayoutLegendXanchorAuto   LayoutLegendXanchor = "auto"
	LayoutLegendXanchorLeft   LayoutLegendXanchor = "left"
	LayoutLegendXanchorCenter LayoutLegendXanchor = "center"
	LayoutLegendXanchorRight  LayoutLegendXanchor = "right"
)

// LayoutLegendXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
// .schema.layout.layoutAttributes.legend.xref
type LayoutLegendXref string

const (
	LayoutLegendXrefContainer LayoutLegendXref = "container"
	LayoutLegendXrefPaper     LayoutLegendXref = "paper"
)

// LayoutLegendYanchor Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.
// .schema.layout.layoutAttributes.legend.yanchor
type LayoutLegendYanchor string

const (
	LayoutLegendYanchorAuto   LayoutLegendYanchor = "auto"
	LayoutLegendYanchorTop    LayoutLegendYanchor = "top"
	LayoutLegendYanchorMiddle LayoutLegendYanchor = "middle"
	LayoutLegendYanchorBottom LayoutLegendYanchor = "bottom"
)

// LayoutLegendYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
// .schema.layout.layoutAttributes.legend.yref
type LayoutLegendYref string

const (
	LayoutLegendYrefContainer LayoutLegendYref = "container"
	LayoutLegendYrefPaper     LayoutLegendYref = "paper"
)

// LayoutModebarOrientation Sets the orientation of the modebar.
// .schema.layout.layoutAttributes.modebar.orientation
type LayoutModebarOrientation string

const (
	LayoutModebarOrientationV LayoutModebarOrientation = "v"
	LayoutModebarOrientationH LayoutModebarOrientation = "h"
)

// LayoutNewselectionMode Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.
// .schema.layout.layoutAttributes.newselection.mode
type LayoutNewselectionMode string

const (
	LayoutNewselectionModeImmediate LayoutNewselectionMode = "immediate"
	LayoutNewselectionModeGradual   LayoutNewselectionMode = "gradual"
)

// LayoutNewshapeDrawdirection When `dragmode` is set to *drawrect*, *drawline* or *drawcircle* this limits the drag to be horizontal, vertical or diagonal. Using *diagonal* there is no limit e.g. in drawing lines in any direction. *ortho* limits the draw to be either horizontal or vertical. *horizontal* allows horizontal extend. *vertical* allows vertical extend.
// .schema.layout.layoutAttributes.newshape.drawdirection
type LayoutNewshapeDrawdirection string

const (
	LayoutNewshapeDrawdirectionOrtho      LayoutNewshapeDrawdirection = "ortho"
	LayoutNewshapeDrawdirectionHorizontal LayoutNewshapeDrawdirection = "horizontal"
	LayoutNewshapeDrawdirectionVertical   LayoutNewshapeDrawdirection = "vertical"
	LayoutNewshapeDrawdirectionDiagonal   LayoutNewshapeDrawdirection = "diagonal"
)

// LayoutNewshapeFillrule Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
// .schema.layout.layoutAttributes.newshape.fillrule
type LayoutNewshapeFillrule string

const (
	LayoutNewshapeFillruleEvenodd LayoutNewshapeFillrule = "evenodd"
	LayoutNewshapeFillruleNonzero LayoutNewshapeFillrule = "nonzero"
)

// LayoutNewshapeLabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.newshape.label.font.style
type LayoutNewshapeLabelFontStyle string

const (
	LayoutNewshapeLabelFontStyleNormal LayoutNewshapeLabelFontStyle = "normal"
	LayoutNewshapeLabelFontStyleItalic LayoutNewshapeLabelFontStyle = "italic"
)

// LayoutNewshapeLabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.newshape.label.font.textcase
type LayoutNewshapeLabelFontTextcase string

const (
	LayoutNewshapeLabelFontTextcaseNormal   LayoutNewshapeLabelFontTextcase = "normal"
	LayoutNewshapeLabelFontTextcaseWordCaps LayoutNewshapeLabelFontTextcase = "word caps"
	LayoutNewshapeLabelFontTextcaseUpper    LayoutNewshapeLabelFontTextcase = "upper"
	LayoutNewshapeLabelFontTextcaseLower    LayoutNewshapeLabelFontTextcase = "lower"
)

// LayoutNewshapeLabelFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.newshape.label.font.variant
type LayoutNewshapeLabelFontVariant string

const (
	LayoutNewshapeLabelFontVariantNormal        LayoutNewshapeLabelFontVariant = "normal"
	LayoutNewshapeLabelFontVariantSmallCaps     LayoutNewshapeLabelFontVariant = "small-caps"
	LayoutNewshapeLabelFontVariantAllSmallCaps  LayoutNewshapeLabelFontVariant = "all-small-caps"
	LayoutNewshapeLabelFontVariantAllPetiteCaps LayoutNewshapeLabelFontVariant = "all-petite-caps"
	LayoutNewshapeLabelFontVariantPetiteCaps    LayoutNewshapeLabelFontVariant = "petite-caps"
	LayoutNewshapeLabelFontVariantUnicase       LayoutNewshapeLabelFontVariant = "unicase"
)

// LayoutNewshapeLabelTextposition Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are *top left*, *top center*, *top right*, *middle left*, *middle center*, *middle right*, *bottom left*, *bottom center*, and *bottom right*. Supported values for lines are *start*, *middle*, and *end*. Default: *middle center* for rectangles, circles, and paths; *middle* for lines.
// .schema.layout.layoutAttributes.newshape.label.textposition
type LayoutNewshapeLabelTextposition string

const (
	LayoutNewshapeLabelTextpositionTopLeft      LayoutNewshapeLabelTextposition = "top left"
	LayoutNewshapeLabelTextpositionTopCenter    LayoutNewshapeLabelTextposition = "top center"
	LayoutNewshapeLabelTextpositionTopRight     LayoutNewshapeLabelTextposition = "top right"
	LayoutNewshapeLabelTextpositionMiddleLeft   LayoutNewshapeLabelTextposition = "middle left"
	LayoutNewshapeLabelTextpositionMiddleCenter LayoutNewshapeLabelTextposition = "middle center"
	LayoutNewshapeLabelTextpositionMiddleRight  LayoutNewshapeLabelTextposition = "middle right"
	LayoutNewshapeLabelTextpositionBottomLeft   LayoutNewshapeLabelTextposition = "bottom left"
	LayoutNewshapeLabelTextpositionBottomCenter LayoutNewshapeLabelTextposition = "bottom center"
	LayoutNewshapeLabelTextpositionBottomRight  LayoutNewshapeLabelTextposition = "bottom right"
	LayoutNewshapeLabelTextpositionStart        LayoutNewshapeLabelTextposition = "start"
	LayoutNewshapeLabelTextpositionMiddle       LayoutNewshapeLabelTextposition = "middle"
	LayoutNewshapeLabelTextpositionEnd          LayoutNewshapeLabelTextposition = "end"
)

// LayoutNewshapeLabelXanchor Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the *left*, *center* or *right* of the label text. For example, if `textposition` is set to *top right* and `xanchor` to *right* then the right-most portion of the label text lines up with the right-most edge of the new shape.
// .schema.layout.layoutAttributes.newshape.label.xanchor
type LayoutNewshapeLabelXanchor string

const (
	LayoutNewshapeLabelXanchorAuto   LayoutNewshapeLabelXanchor = "auto"
	LayoutNewshapeLabelXanchorLeft   LayoutNewshapeLabelXanchor = "left"
	LayoutNewshapeLabelXanchorCenter LayoutNewshapeLabelXanchor = "center"
	LayoutNewshapeLabelXanchorRight  LayoutNewshapeLabelXanchor = "right"
)

// LayoutNewshapeLabelYanchor Sets the label's vertical position anchor This anchor binds the specified `textposition` to the *top*, *middle* or *bottom* of the label text. For example, if `textposition` is set to *top right* and `yanchor` to *top* then the top-most portion of the label text lines up with the top-most edge of the new shape.
// .schema.layout.layoutAttributes.newshape.label.yanchor
type LayoutNewshapeLabelYanchor string

const (
	LayoutNewshapeLabelYanchorTop    LayoutNewshapeLabelYanchor = "top"
	LayoutNewshapeLabelYanchorMiddle LayoutNewshapeLabelYanchor = "middle"
	LayoutNewshapeLabelYanchorBottom LayoutNewshapeLabelYanchor = "bottom"
)

// LayoutNewshapeLayer Specifies whether new shapes are drawn below gridlines (*below*), between gridlines and traces (*between*) or above traces (*above*).
// .schema.layout.layoutAttributes.newshape.layer
type LayoutNewshapeLayer string

const (
	LayoutNewshapeLayerBelow   LayoutNewshapeLayer = "below"
	LayoutNewshapeLayerAbove   LayoutNewshapeLayer = "above"
	LayoutNewshapeLayerBetween LayoutNewshapeLayer = "between"
)

// LayoutNewshapeLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.style
type LayoutNewshapeLegendgrouptitleFontStyle string

const (
	LayoutNewshapeLegendgrouptitleFontStyleNormal LayoutNewshapeLegendgrouptitleFontStyle = "normal"
	LayoutNewshapeLegendgrouptitleFontStyleItalic LayoutNewshapeLegendgrouptitleFontStyle = "italic"
)

// LayoutNewshapeLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.textcase
type LayoutNewshapeLegendgrouptitleFontTextcase string

const (
	LayoutNewshapeLegendgrouptitleFontTextcaseNormal   LayoutNewshapeLegendgrouptitleFontTextcase = "normal"
	LayoutNewshapeLegendgrouptitleFontTextcaseWordCaps LayoutNewshapeLegendgrouptitleFontTextcase = "word caps"
	LayoutNewshapeLegendgrouptitleFontTextcaseUpper    LayoutNewshapeLegendgrouptitleFontTextcase = "upper"
	LayoutNewshapeLegendgrouptitleFontTextcaseLower    LayoutNewshapeLegendgrouptitleFontTextcase = "lower"
)

// LayoutNewshapeLegendgrouptitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.variant
type LayoutNewshapeLegendgrouptitleFontVariant string

const (
	LayoutNewshapeLegendgrouptitleFontVariantNormal        LayoutNewshapeLegendgrouptitleFontVariant = "normal"
	LayoutNewshapeLegendgrouptitleFontVariantSmallCaps     LayoutNewshapeLegendgrouptitleFontVariant = "small-caps"
	LayoutNewshapeLegendgrouptitleFontVariantAllSmallCaps  LayoutNewshapeLegendgrouptitleFontVariant = "all-small-caps"
	LayoutNewshapeLegendgrouptitleFontVariantAllPetiteCaps LayoutNewshapeLegendgrouptitleFontVariant = "all-petite-caps"
	LayoutNewshapeLegendgrouptitleFontVariantPetiteCaps    LayoutNewshapeLegendgrouptitleFontVariant = "petite-caps"
	LayoutNewshapeLegendgrouptitleFontVariantUnicase       LayoutNewshapeLegendgrouptitleFontVariant = "unicase"
)

// LayoutNewshapeVisible Determines whether or not new shape is visible. If *legendonly*, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).
// .schema.layout.layoutAttributes.newshape.visible
type LayoutNewshapeVisible interface{}

var (
	LayoutNewshapeVisibleTrue       LayoutNewshapeVisible = true
	LayoutNewshapeVisibleFalse      LayoutNewshapeVisible = false
	LayoutNewshapeVisibleLegendonly LayoutNewshapeVisible = "legendonly"
)

// LayoutPolarAngularaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
// .schema.layout.layoutAttributes.polar.angularaxis.autotypenumbers
type LayoutPolarAngularaxisAutotypenumbers string

const (
	LayoutPolarAngularaxisAutotypenumbersConvertTypes LayoutPolarAngularaxisAutotypenumbers = "convert types"
	LayoutPolarAngularaxisAutotypenumbersStrict       LayoutPolarAngularaxisAutotypenumbers = "strict"
)

// LayoutPolarAngularaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
// .schema.layout.layoutAttributes.polar.angularaxis.categoryorder
type LayoutPolarAngularaxisCategoryorder string

const (
	LayoutPolarAngularaxisCategoryorderTrace                   LayoutPolarAngularaxisCategoryorder = "trace"
	LayoutPolarAngularaxisCategoryorderCategoryAscending       LayoutPolarAngularaxisCategoryorder = "category ascending"
	LayoutPolarAngularaxisCategoryorderCategoryDescending      LayoutPolarAngularaxisCategoryorder = "category descending"
	LayoutPolarAngularaxisCategoryorderArray                   LayoutPolarAngularaxisCategoryorder = "array"
	LayoutPolarAngularaxisCategoryorderTotalAscending          LayoutPolarAngularaxisCategoryorder = "total ascending"
	LayoutPolarAngularaxisCategoryorderTotalDescending         LayoutPolarAngularaxisCategoryorder = "total descending"
	LayoutPolarAngularaxisCategoryorderMinAscending            LayoutPolarAngularaxisCategoryorder = "min ascending"
	LayoutPolarAngularaxisCategoryorderMinDescending           LayoutPolarAngularaxisCategoryorder = "min descending"
	LayoutPolarAngularaxisCategoryorderMaxAscending            LayoutPolarAngularaxisCategoryorder = "max ascending"
	LayoutPolarAngularaxisCategoryorderMaxDescending           LayoutPolarAngularaxisCategoryorder = "max descending"
	LayoutPolarAngularaxisCategoryorderSumAscending            LayoutPolarAngularaxisCategoryorder = "sum ascending"
	LayoutPolarAngularaxisCategoryorderSumDescending           LayoutPolarAngularaxisCategoryorder = "sum descending"
	LayoutPolarAngularaxisCategoryorderMeanAscending           LayoutPolarAngularaxisCategoryorder = "mean ascending"
	LayoutPolarAngularaxisCategoryorderMeanDescending          LayoutPolarAngularaxisCategoryorder = "mean descending"
	LayoutPolarAngularaxisCategoryorderGeometricMeanAscending  LayoutPolarAngularaxisCategoryorder = "geometric mean ascending"
	LayoutPolarAngularaxisCategoryorderGeometricMeanDescending LayoutPolarAngularaxisCategoryorder = "geometric mean descending"
	LayoutPolarAngularaxisCategoryorderMedianAscending         LayoutPolarAngularaxisCategoryorder = "median ascending"
	LayoutPolarAngularaxisCategoryorderMedianDescending        LayoutPolarAngularaxisCategoryorder = "median descending"
)

// LayoutPolarAngularaxisDirection Sets the direction corresponding to positive angles.
// .schema.layout.layoutAttributes.polar.angularaxis.direction
type LayoutPolarAngularaxisDirection string

const (
	LayoutPolarAngularaxisDirectionCounterclockwise LayoutPolarAngularaxisDirection = "counterclockwise"
	LayoutPolarAngularaxisDirectionClockwise        LayoutPolarAngularaxisDirection = "clockwise"
)

// LayoutPolarAngularaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.polar.angularaxis.exponentformat
type LayoutPolarAngularaxisExponentformat string

const (
	LayoutPolarAngularaxisExponentformatNone  LayoutPolarAngularaxisExponentformat = "none"
	LayoutPolarAngularaxisExponentformatE1    LayoutPolarAngularaxisExponentformat = "e"
	LayoutPolarAngularaxisExponentformatE2    LayoutPolarAngularaxisExponentformat = "E"
	LayoutPolarAngularaxisExponentformatPower LayoutPolarAngularaxisExponentformat = "power"
	LayoutPolarAngularaxisExponentformatSI    LayoutPolarAngularaxisExponentformat = "SI"
	LayoutPolarAngularaxisExponentformatB     LayoutPolarAngularaxisExponentformat = "B"
)

// LayoutPolarAngularaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.polar.angularaxis.layer
type LayoutPolarAngularaxisLayer string

const (
	LayoutPolarAngularaxisLayerAboveTraces LayoutPolarAngularaxisLayer = "above traces"
	LayoutPolarAngularaxisLayerBelowTraces LayoutPolarAngularaxisLayer = "below traces"
)

// LayoutPolarAngularaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.polar.angularaxis.showexponent
type LayoutPolarAngularaxisShowexponent string

const (
	LayoutPolarAngularaxisShowexponentAll   LayoutPolarAngularaxisShowexponent = "all"
	LayoutPolarAngularaxisShowexponentFirst LayoutPolarAngularaxisShowexponent = "first"
	LayoutPolarAngularaxisShowexponentLast  LayoutPolarAngularaxisShowexponent = "last"
	LayoutPolarAngularaxisShowexponentNone  LayoutPolarAngularaxisShowexponent = "none"
)

// LayoutPolarAngularaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.polar.angularaxis.showtickprefix
type LayoutPolarAngularaxisShowtickprefix string

const (
	LayoutPolarAngularaxisShowtickprefixAll   LayoutPolarAngularaxisShowtickprefix = "all"
	LayoutPolarAngularaxisShowtickprefixFirst LayoutPolarAngularaxisShowtickprefix = "first"
	LayoutPolarAngularaxisShowtickprefixLast  LayoutPolarAngularaxisShowtickprefix = "last"
	LayoutPolarAngularaxisShowtickprefixNone  LayoutPolarAngularaxisShowtickprefix = "none"
)

// LayoutPolarAngularaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.polar.angularaxis.showticksuffix
type LayoutPolarAngularaxisShowticksuffix string

const (
	LayoutPolarAngularaxisShowticksuffixAll   LayoutPolarAngularaxisShowticksuffix = "all"
	LayoutPolarAngularaxisShowticksuffixFirst LayoutPolarAngularaxisShowticksuffix = "first"
	LayoutPolarAngularaxisShowticksuffixLast  LayoutPolarAngularaxisShowticksuffix = "last"
	LayoutPolarAngularaxisShowticksuffixNone  LayoutPolarAngularaxisShowticksuffix = "none"
)

// LayoutPolarAngularaxisThetaunit Sets the format unit of the formatted *theta* values. Has an effect only when `angularaxis.type` is *linear*.
// .schema.layout.layoutAttributes.polar.angularaxis.thetaunit
type LayoutPolarAngularaxisThetaunit string

const (
	LayoutPolarAngularaxisThetaunitRadians LayoutPolarAngularaxisThetaunit = "radians"
	LayoutPolarAngularaxisThetaunitDegrees LayoutPolarAngularaxisThetaunit = "degrees"
)

// LayoutPolarAngularaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.style
type LayoutPolarAngularaxisTickfontStyle string

const (
	LayoutPolarAngularaxisTickfontStyleNormal LayoutPolarAngularaxisTickfontStyle = "normal"
	LayoutPolarAngularaxisTickfontStyleItalic LayoutPolarAngularaxisTickfontStyle = "italic"
)

// LayoutPolarAngularaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.textcase
type LayoutPolarAngularaxisTickfontTextcase string

const (
	LayoutPolarAngularaxisTickfontTextcaseNormal   LayoutPolarAngularaxisTickfontTextcase = "normal"
	LayoutPolarAngularaxisTickfontTextcaseWordCaps LayoutPolarAngularaxisTickfontTextcase = "word caps"
	LayoutPolarAngularaxisTickfontTextcaseUpper    LayoutPolarAngularaxisTickfontTextcase = "upper"
	LayoutPolarAngularaxisTickfontTextcaseLower    LayoutPolarAngularaxisTickfontTextcase = "lower"
)

// LayoutPolarAngularaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.variant
type LayoutPolarAngularaxisTickfontVariant string

const (
	LayoutPolarAngularaxisTickfontVariantNormal        LayoutPolarAngularaxisTickfontVariant = "normal"
	LayoutPolarAngularaxisTickfontVariantSmallCaps     LayoutPolarAngularaxisTickfontVariant = "small-caps"
	LayoutPolarAngularaxisTickfontVariantAllSmallCaps  LayoutPolarAngularaxisTickfontVariant = "all-small-caps"
	LayoutPolarAngularaxisTickfontVariantAllPetiteCaps LayoutPolarAngularaxisTickfontVariant = "all-petite-caps"
	LayoutPolarAngularaxisTickfontVariantPetiteCaps    LayoutPolarAngularaxisTickfontVariant = "petite-caps"
	LayoutPolarAngularaxisTickfontVariantUnicase       LayoutPolarAngularaxisTickfontVariant = "unicase"
)

// LayoutPolarAngularaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.polar.angularaxis.tickmode
type LayoutPolarAngularaxisTickmode string

const (
	LayoutPolarAngularaxisTickmodeAuto   LayoutPolarAngularaxisTickmode = "auto"
	LayoutPolarAngularaxisTickmodeLinear LayoutPolarAngularaxisTickmode = "linear"
	LayoutPolarAngularaxisTickmodeArray  LayoutPolarAngularaxisTickmode = "array"
)

// LayoutPolarAngularaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.polar.angularaxis.ticks
type LayoutPolarAngularaxisTicks string

const (
	LayoutPolarAngularaxisTicksOutside LayoutPolarAngularaxisTicks = "outside"
	LayoutPolarAngularaxisTicksInside  LayoutPolarAngularaxisTicks = "inside"
	LayoutPolarAngularaxisTicksEmpty   LayoutPolarAngularaxisTicks = ""
)

// LayoutPolarAngularaxisType Sets the angular axis type. If *linear*, set `thetaunit` to determine the unit in which axis value are shown. If *category, use `period` to set the number of integer coordinates around polar axis.
// .schema.layout.layoutAttributes.polar.angularaxis.type
type LayoutPolarAngularaxisType string

const (
	LayoutPolarAngularaxisTypeHyphenHyphen LayoutPolarAngularaxisType = "-"
	LayoutPolarAngularaxisTypeLinear       LayoutPolarAngularaxisType = "linear"
	LayoutPolarAngularaxisTypeCategory     LayoutPolarAngularaxisType = "category"
)

// LayoutPolarGridshape Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).
// .schema.layout.layoutAttributes.polar.gridshape
type LayoutPolarGridshape string

const (
	LayoutPolarGridshapeCircular LayoutPolarGridshape = "circular"
	LayoutPolarGridshapeLinear   LayoutPolarGridshape = "linear"
)

// LayoutPolarRadialaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
// .schema.layout.layoutAttributes.polar.radialaxis.autorange
type LayoutPolarRadialaxisAutorange interface{}

var (
	LayoutPolarRadialaxisAutorangeTrue        LayoutPolarRadialaxisAutorange = true
	LayoutPolarRadialaxisAutorangeFalse       LayoutPolarRadialaxisAutorange = false
	LayoutPolarRadialaxisAutorangeReversed    LayoutPolarRadialaxisAutorange = "reversed"
	LayoutPolarRadialaxisAutorangeMinReversed LayoutPolarRadialaxisAutorange = "min reversed"
	LayoutPolarRadialaxisAutorangeMaxReversed LayoutPolarRadialaxisAutorange = "max reversed"
	LayoutPolarRadialaxisAutorangeMin         LayoutPolarRadialaxisAutorange = "min"
	LayoutPolarRadialaxisAutorangeMax         LayoutPolarRadialaxisAutorange = "max"
)

// LayoutPolarRadialaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
// .schema.layout.layoutAttributes.polar.radialaxis.autotypenumbers
type LayoutPolarRadialaxisAutotypenumbers string

const (
	LayoutPolarRadialaxisAutotypenumbersConvertTypes LayoutPolarRadialaxisAutotypenumbers = "convert types"
	LayoutPolarRadialaxisAutotypenumbersStrict       LayoutPolarRadialaxisAutotypenumbers = "strict"
)

// LayoutPolarRadialaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
// .schema.layout.layoutAttributes.polar.radialaxis.calendar
type LayoutPolarRadialaxisCalendar string

const (
	LayoutPolarRadialaxisCalendarChinese    LayoutPolarRadialaxisCalendar = "chinese"
	LayoutPolarRadialaxisCalendarCoptic     LayoutPolarRadialaxisCalendar = "coptic"
	LayoutPolarRadialaxisCalendarDiscworld  LayoutPolarRadialaxisCalendar = "discworld"
	LayoutPolarRadialaxisCalendarEthiopian  LayoutPolarRadialaxisCalendar = "ethiopian"
	LayoutPolarRadialaxisCalendarGregorian  LayoutPolarRadialaxisCalendar = "gregorian"
	LayoutPolarRadialaxisCalendarHebrew     LayoutPolarRadialaxisCalendar = "hebrew"
	LayoutPolarRadialaxisCalendarIslamic    LayoutPolarRadialaxisCalendar = "islamic"
	LayoutPolarRadialaxisCalendarJalali     LayoutPolarRadialaxisCalendar = "jalali"
	LayoutPolarRadialaxisCalendarJulian     LayoutPolarRadialaxisCalendar = "julian"
	LayoutPolarRadialaxisCalendarMayan      LayoutPolarRadialaxisCalendar = "mayan"
	LayoutPolarRadialaxisCalendarNanakshahi LayoutPolarRadialaxisCalendar = "nanakshahi"
	LayoutPolarRadialaxisCalendarNepali     LayoutPolarRadialaxisCalendar = "nepali"
	LayoutPolarRadialaxisCalendarPersian    LayoutPolarRadialaxisCalendar = "persian"
	LayoutPolarRadialaxisCalendarTaiwan     LayoutPolarRadialaxisCalendar = "taiwan"
	LayoutPolarRadialaxisCalendarThai       LayoutPolarRadialaxisCalendar = "thai"
	LayoutPolarRadialaxisCalendarUmmalqura  LayoutPolarRadialaxisCalendar = "ummalqura"
)

// LayoutPolarRadialaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
// .schema.layout.layoutAttributes.polar.radialaxis.categoryorder
type LayoutPolarRadialaxisCategoryorder string

const (
	LayoutPolarRadialaxisCategoryorderTrace                   LayoutPolarRadialaxisCategoryorder = "trace"
	LayoutPolarRadialaxisCategoryorderCategoryAscending       LayoutPolarRadialaxisCategoryorder = "category ascending"
	LayoutPolarRadialaxisCategoryorderCategoryDescending      LayoutPolarRadialaxisCategoryorder = "category descending"
	LayoutPolarRadialaxisCategoryorderArray                   LayoutPolarRadialaxisCategoryorder = "array"
	LayoutPolarRadialaxisCategoryorderTotalAscending          LayoutPolarRadialaxisCategoryorder = "total ascending"
	LayoutPolarRadialaxisCategoryorderTotalDescending         LayoutPolarRadialaxisCategoryorder = "total descending"
	LayoutPolarRadialaxisCategoryorderMinAscending            LayoutPolarRadialaxisCategoryorder = "min ascending"
	LayoutPolarRadialaxisCategoryorderMinDescending           LayoutPolarRadialaxisCategoryorder = "min descending"
	LayoutPolarRadialaxisCategoryorderMaxAscending            LayoutPolarRadialaxisCategoryorder = "max ascending"
	LayoutPolarRadialaxisCategoryorderMaxDescending           LayoutPolarRadialaxisCategoryorder = "max descending"
	LayoutPolarRadialaxisCategoryorderSumAscending            LayoutPolarRadialaxisCategoryorder = "sum ascending"
	LayoutPolarRadialaxisCategoryorderSumDescending           LayoutPolarRadialaxisCategoryorder = "sum descending"
	LayoutPolarRadialaxisCategoryorderMeanAscending           LayoutPolarRadialaxisCategoryorder = "mean ascending"
	LayoutPolarRadialaxisCategoryorderMeanDescending          LayoutPolarRadialaxisCategoryorder = "mean descending"
	LayoutPolarRadialaxisCategoryorderGeometricMeanAscending  LayoutPolarRadialaxisCategoryorder = "geometric mean ascending"
	LayoutPolarRadialaxisCategoryorderGeometricMeanDescending LayoutPolarRadialaxisCategoryorder = "geometric mean descending"
	LayoutPolarRadialaxisCategoryorderMedianAscending         LayoutPolarRadialaxisCategoryorder = "median ascending"
	LayoutPolarRadialaxisCategoryorderMedianDescending        LayoutPolarRadialaxisCategoryorder = "median descending"
)

// LayoutPolarRadialaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.polar.radialaxis.exponentformat
type LayoutPolarRadialaxisExponentformat string

const (
	LayoutPolarRadialaxisExponentformatNone  LayoutPolarRadialaxisExponentformat = "none"
	LayoutPolarRadialaxisExponentformatE1    LayoutPolarRadialaxisExponentformat = "e"
	LayoutPolarRadialaxisExponentformatE2    LayoutPolarRadialaxisExponentformat = "E"
	LayoutPolarRadialaxisExponentformatPower LayoutPolarRadialaxisExponentformat = "power"
	LayoutPolarRadialaxisExponentformatSI    LayoutPolarRadialaxisExponentformat = "SI"
	LayoutPolarRadialaxisExponentformatB     LayoutPolarRadialaxisExponentformat = "B"
)

// LayoutPolarRadialaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.polar.radialaxis.layer
type LayoutPolarRadialaxisLayer string

const (
	LayoutPolarRadialaxisLayerAboveTraces LayoutPolarRadialaxisLayer = "above traces"
	LayoutPolarRadialaxisLayerBelowTraces LayoutPolarRadialaxisLayer = "below traces"
)

// LayoutPolarRadialaxisRangemode If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. If *normal*, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).
// .schema.layout.layoutAttributes.polar.radialaxis.rangemode
type LayoutPolarRadialaxisRangemode string

const (
	LayoutPolarRadialaxisRangemodeTozero      LayoutPolarRadialaxisRangemode = "tozero"
	LayoutPolarRadialaxisRangemodeNonnegative LayoutPolarRadialaxisRangemode = "nonnegative"
	LayoutPolarRadialaxisRangemodeNormal      LayoutPolarRadialaxisRangemode = "normal"
)

// LayoutPolarRadialaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.polar.radialaxis.showexponent
type LayoutPolarRadialaxisShowexponent string

const (
	LayoutPolarRadialaxisShowexponentAll   LayoutPolarRadialaxisShowexponent = "all"
	LayoutPolarRadialaxisShowexponentFirst LayoutPolarRadialaxisShowexponent = "first"
	LayoutPolarRadialaxisShowexponentLast  LayoutPolarRadialaxisShowexponent = "last"
	LayoutPolarRadialaxisShowexponentNone  LayoutPolarRadialaxisShowexponent = "none"
)

// LayoutPolarRadialaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.polar.radialaxis.showtickprefix
type LayoutPolarRadialaxisShowtickprefix string

const (
	LayoutPolarRadialaxisShowtickprefixAll   LayoutPolarRadialaxisShowtickprefix = "all"
	LayoutPolarRadialaxisShowtickprefixFirst LayoutPolarRadialaxisShowtickprefix = "first"
	LayoutPolarRadialaxisShowtickprefixLast  LayoutPolarRadialaxisShowtickprefix = "last"
	LayoutPolarRadialaxisShowtickprefixNone  LayoutPolarRadialaxisShowtickprefix = "none"
)

// LayoutPolarRadialaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.polar.radialaxis.showticksuffix
type LayoutPolarRadialaxisShowticksuffix string

const (
	LayoutPolarRadialaxisShowticksuffixAll   LayoutPolarRadialaxisShowticksuffix = "all"
	LayoutPolarRadialaxisShowticksuffixFirst LayoutPolarRadialaxisShowticksuffix = "first"
	LayoutPolarRadialaxisShowticksuffixLast  LayoutPolarRadialaxisShowticksuffix = "last"
	LayoutPolarRadialaxisShowticksuffixNone  LayoutPolarRadialaxisShowticksuffix = "none"
)

// LayoutPolarRadialaxisSide Determines on which side of radial axis line the tick and tick labels appear.
// .schema.layout.layoutAttributes.polar.radialaxis.side
type LayoutPolarRadialaxisSide string

const (
	LayoutPolarRadialaxisSideClockwise        LayoutPolarRadialaxisSide = "clockwise"
	LayoutPolarRadialaxisSideCounterclockwise LayoutPolarRadialaxisSide = "counterclockwise"
)

// LayoutPolarRadialaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.style
type LayoutPolarRadialaxisTickfontStyle string

const (
	LayoutPolarRadialaxisTickfontStyleNormal LayoutPolarRadialaxisTickfontStyle = "normal"
	LayoutPolarRadialaxisTickfontStyleItalic LayoutPolarRadialaxisTickfontStyle = "italic"
)

// LayoutPolarRadialaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.textcase
type LayoutPolarRadialaxisTickfontTextcase string

const (
	LayoutPolarRadialaxisTickfontTextcaseNormal   LayoutPolarRadialaxisTickfontTextcase = "normal"
	LayoutPolarRadialaxisTickfontTextcaseWordCaps LayoutPolarRadialaxisTickfontTextcase = "word caps"
	LayoutPolarRadialaxisTickfontTextcaseUpper    LayoutPolarRadialaxisTickfontTextcase = "upper"
	LayoutPolarRadialaxisTickfontTextcaseLower    LayoutPolarRadialaxisTickfontTextcase = "lower"
)

// LayoutPolarRadialaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.variant
type LayoutPolarRadialaxisTickfontVariant string

const (
	LayoutPolarRadialaxisTickfontVariantNormal        LayoutPolarRadialaxisTickfontVariant = "normal"
	LayoutPolarRadialaxisTickfontVariantSmallCaps     LayoutPolarRadialaxisTickfontVariant = "small-caps"
	LayoutPolarRadialaxisTickfontVariantAllSmallCaps  LayoutPolarRadialaxisTickfontVariant = "all-small-caps"
	LayoutPolarRadialaxisTickfontVariantAllPetiteCaps LayoutPolarRadialaxisTickfontVariant = "all-petite-caps"
	LayoutPolarRadialaxisTickfontVariantPetiteCaps    LayoutPolarRadialaxisTickfontVariant = "petite-caps"
	LayoutPolarRadialaxisTickfontVariantUnicase       LayoutPolarRadialaxisTickfontVariant = "unicase"
)

// LayoutPolarRadialaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.polar.radialaxis.tickmode
type LayoutPolarRadialaxisTickmode string

const (
	LayoutPolarRadialaxisTickmodeAuto   LayoutPolarRadialaxisTickmode = "auto"
	LayoutPolarRadialaxisTickmodeLinear LayoutPolarRadialaxisTickmode = "linear"
	LayoutPolarRadialaxisTickmodeArray  LayoutPolarRadialaxisTickmode = "array"
)

// LayoutPolarRadialaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.polar.radialaxis.ticks
type LayoutPolarRadialaxisTicks string

const (
	LayoutPolarRadialaxisTicksOutside LayoutPolarRadialaxisTicks = "outside"
	LayoutPolarRadialaxisTicksInside  LayoutPolarRadialaxisTicks = "inside"
	LayoutPolarRadialaxisTicksEmpty   LayoutPolarRadialaxisTicks = ""
)

// LayoutPolarRadialaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.polar.radialaxis.title.font.style
type LayoutPolarRadialaxisTitleFontStyle string

const (
	LayoutPolarRadialaxisTitleFontStyleNormal LayoutPolarRadialaxisTitleFontStyle = "normal"
	LayoutPolarRadialaxisTitleFontStyleItalic LayoutPolarRadialaxisTitleFontStyle = "italic"
)

// LayoutPolarRadialaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.polar.radialaxis.title.font.textcase
type LayoutPolarRadialaxisTitleFontTextcase string

const (
	LayoutPolarRadialaxisTitleFontTextcaseNormal   LayoutPolarRadialaxisTitleFontTextcase = "normal"
	LayoutPolarRadialaxisTitleFontTextcaseWordCaps LayoutPolarRadialaxisTitleFontTextcase = "word caps"
	LayoutPolarRadialaxisTitleFontTextcaseUpper    LayoutPolarRadialaxisTitleFontTextcase = "upper"
	LayoutPolarRadialaxisTitleFontTextcaseLower    LayoutPolarRadialaxisTitleFontTextcase = "lower"
)

// LayoutPolarRadialaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.polar.radialaxis.title.font.variant
type LayoutPolarRadialaxisTitleFontVariant string

const (
	LayoutPolarRadialaxisTitleFontVariantNormal        LayoutPolarRadialaxisTitleFontVariant = "normal"
	LayoutPolarRadialaxisTitleFontVariantSmallCaps     LayoutPolarRadialaxisTitleFontVariant = "small-caps"
	LayoutPolarRadialaxisTitleFontVariantAllSmallCaps  LayoutPolarRadialaxisTitleFontVariant = "all-small-caps"
	LayoutPolarRadialaxisTitleFontVariantAllPetiteCaps LayoutPolarRadialaxisTitleFontVariant = "all-petite-caps"
	LayoutPolarRadialaxisTitleFontVariantPetiteCaps    LayoutPolarRadialaxisTitleFontVariant = "petite-caps"
	LayoutPolarRadialaxisTitleFontVariantUnicase       LayoutPolarRadialaxisTitleFontVariant = "unicase"
)

// LayoutPolarRadialaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
// .schema.layout.layoutAttributes.polar.radialaxis.type
type LayoutPolarRadialaxisType string

const (
	LayoutPolarRadialaxisTypeHyphenHyphen LayoutPolarRadialaxisType = "-"
	LayoutPolarRadialaxisTypeLinear       LayoutPolarRadialaxisType = "linear"
	LayoutPolarRadialaxisTypeLog          LayoutPolarRadialaxisType = "log"
	LayoutPolarRadialaxisTypeDate         LayoutPolarRadialaxisType = "date"
	LayoutPolarRadialaxisTypeCategory     LayoutPolarRadialaxisType = "category"
)

// LayoutScattermode Determines how scatter points at the same location coordinate are displayed on the graph. With *group*, the scatter points are plotted next to one another centered around the shared location. With *overlay*, the scatter points are plotted over one another, you might need to reduce *opacity* to see multiple scatter points.
// .schema.traces.scatter.layoutAttributes.scattermode
type LayoutScattermode string

const (
	ScatterScattermodeGroup   LayoutScattermode = "group"
	ScatterScattermodeOverlay LayoutScattermode = "overlay"
)

// LayoutSceneAspectmode If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.
// .schema.layout.layoutAttributes.scene.aspectmode
type LayoutSceneAspectmode string

const (
	LayoutSceneAspectmodeAuto   LayoutSceneAspectmode = "auto"
	LayoutSceneAspectmodeCube   LayoutSceneAspectmode = "cube"
	LayoutSceneAspectmodeData   LayoutSceneAspectmode = "data"
	LayoutSceneAspectmodeManual LayoutSceneAspectmode = "manual"
)

// LayoutSceneCameraProjectionType Sets the projection type. The projection type could be either *perspective* or *orthographic*. The default is *perspective*.
// .schema.layout.layoutAttributes.scene.camera.projection.type
type LayoutSceneCameraProjectionType string

const (
	LayoutSceneCameraProjectionTypePerspective  LayoutSceneCameraProjectionType = "perspective"
	LayoutSceneCameraProjectionTypeOrthographic LayoutSceneCameraProjectionType = "orthographic"
)

// LayoutSceneDragmode Determines the mode of drag interactions for this scene.
// .schema.layout.layoutAttributes.scene.dragmode
type LayoutSceneDragmode interface{}

var (
	LayoutSceneDragmodeOrbit     LayoutSceneDragmode = "orbit"
	LayoutSceneDragmodeTurntable LayoutSceneDragmode = "turntable"
	LayoutSceneDragmodeZoom      LayoutSceneDragmode = "zoom"
	LayoutSceneDragmodePan       LayoutSceneDragmode = "pan"
	LayoutSceneDragmodeFalse     LayoutSceneDragmode = false
)

// LayoutSceneHovermode Determines the mode of hover interactions for this scene.
// .schema.layout.layoutAttributes.scene.hovermode
type LayoutSceneHovermode interface{}

var (
	LayoutSceneHovermodeClosest LayoutSceneHovermode = "closest"
	LayoutSceneHovermodeFalse   LayoutSceneHovermode = false
)

// LayoutSceneXaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
// .schema.layout.layoutAttributes.scene.xaxis.autorange
type LayoutSceneXaxisAutorange interface{}

var (
	LayoutSceneXaxisAutorangeTrue        LayoutSceneXaxisAutorange = true
	LayoutSceneXaxisAutorangeFalse       LayoutSceneXaxisAutorange = false
	LayoutSceneXaxisAutorangeReversed    LayoutSceneXaxisAutorange = "reversed"
	LayoutSceneXaxisAutorangeMinReversed LayoutSceneXaxisAutorange = "min reversed"
	LayoutSceneXaxisAutorangeMaxReversed LayoutSceneXaxisAutorange = "max reversed"
	LayoutSceneXaxisAutorangeMin         LayoutSceneXaxisAutorange = "min"
	LayoutSceneXaxisAutorangeMax         LayoutSceneXaxisAutorange = "max"
)

// LayoutSceneXaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
// .schema.layout.layoutAttributes.scene.xaxis.autotypenumbers
type LayoutSceneXaxisAutotypenumbers string

const (
	LayoutSceneXaxisAutotypenumbersConvertTypes LayoutSceneXaxisAutotypenumbers = "convert types"
	LayoutSceneXaxisAutotypenumbersStrict       LayoutSceneXaxisAutotypenumbers = "strict"
)

// LayoutSceneXaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
// .schema.layout.layoutAttributes.scene.xaxis.calendar
type LayoutSceneXaxisCalendar string

const (
	LayoutSceneXaxisCalendarChinese    LayoutSceneXaxisCalendar = "chinese"
	LayoutSceneXaxisCalendarCoptic     LayoutSceneXaxisCalendar = "coptic"
	LayoutSceneXaxisCalendarDiscworld  LayoutSceneXaxisCalendar = "discworld"
	LayoutSceneXaxisCalendarEthiopian  LayoutSceneXaxisCalendar = "ethiopian"
	LayoutSceneXaxisCalendarGregorian  LayoutSceneXaxisCalendar = "gregorian"
	LayoutSceneXaxisCalendarHebrew     LayoutSceneXaxisCalendar = "hebrew"
	LayoutSceneXaxisCalendarIslamic    LayoutSceneXaxisCalendar = "islamic"
	LayoutSceneXaxisCalendarJalali     LayoutSceneXaxisCalendar = "jalali"
	LayoutSceneXaxisCalendarJulian     LayoutSceneXaxisCalendar = "julian"
	LayoutSceneXaxisCalendarMayan      LayoutSceneXaxisCalendar = "mayan"
	LayoutSceneXaxisCalendarNanakshahi LayoutSceneXaxisCalendar = "nanakshahi"
	LayoutSceneXaxisCalendarNepali     LayoutSceneXaxisCalendar = "nepali"
	LayoutSceneXaxisCalendarPersian    LayoutSceneXaxisCalendar = "persian"
	LayoutSceneXaxisCalendarTaiwan     LayoutSceneXaxisCalendar = "taiwan"
	LayoutSceneXaxisCalendarThai       LayoutSceneXaxisCalendar = "thai"
	LayoutSceneXaxisCalendarUmmalqura  LayoutSceneXaxisCalendar = "ummalqura"
)

// LayoutSceneXaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
// .schema.layout.layoutAttributes.scene.xaxis.categoryorder
type LayoutSceneXaxisCategoryorder string

const (
	LayoutSceneXaxisCategoryorderTrace                   LayoutSceneXaxisCategoryorder = "trace"
	LayoutSceneXaxisCategoryorderCategoryAscending       LayoutSceneXaxisCategoryorder = "category ascending"
	LayoutSceneXaxisCategoryorderCategoryDescending      LayoutSceneXaxisCategoryorder = "category descending"
	LayoutSceneXaxisCategoryorderArray                   LayoutSceneXaxisCategoryorder = "array"
	LayoutSceneXaxisCategoryorderTotalAscending          LayoutSceneXaxisCategoryorder = "total ascending"
	LayoutSceneXaxisCategoryorderTotalDescending         LayoutSceneXaxisCategoryorder = "total descending"
	LayoutSceneXaxisCategoryorderMinAscending            LayoutSceneXaxisCategoryorder = "min ascending"
	LayoutSceneXaxisCategoryorderMinDescending           LayoutSceneXaxisCategoryorder = "min descending"
	LayoutSceneXaxisCategoryorderMaxAscending            LayoutSceneXaxisCategoryorder = "max ascending"
	LayoutSceneXaxisCategoryorderMaxDescending           LayoutSceneXaxisCategoryorder = "max descending"
	LayoutSceneXaxisCategoryorderSumAscending            LayoutSceneXaxisCategoryorder = "sum ascending"
	LayoutSceneXaxisCategoryorderSumDescending           LayoutSceneXaxisCategoryorder = "sum descending"
	LayoutSceneXaxisCategoryorderMeanAscending           LayoutSceneXaxisCategoryorder = "mean ascending"
	LayoutSceneXaxisCategoryorderMeanDescending          LayoutSceneXaxisCategoryorder = "mean descending"
	LayoutSceneXaxisCategoryorderGeometricMeanAscending  LayoutSceneXaxisCategoryorder = "geometric mean ascending"
	LayoutSceneXaxisCategoryorderGeometricMeanDescending LayoutSceneXaxisCategoryorder = "geometric mean descending"
	LayoutSceneXaxisCategoryorderMedianAscending         LayoutSceneXaxisCategoryorder = "median ascending"
	LayoutSceneXaxisCategoryorderMedianDescending        LayoutSceneXaxisCategoryorder = "median descending"
)

// LayoutSceneXaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.scene.xaxis.exponentformat
type LayoutSceneXaxisExponentformat string

const (
	LayoutSceneXaxisExponentformatNone  LayoutSceneXaxisExponentformat = "none"
	LayoutSceneXaxisExponentformatE1    LayoutSceneXaxisExponentformat = "e"
	LayoutSceneXaxisExponentformatE2    LayoutSceneXaxisExponentformat = "E"
	LayoutSceneXaxisExponentformatPower LayoutSceneXaxisExponentformat = "power"
	LayoutSceneXaxisExponentformatSI    LayoutSceneXaxisExponentformat = "SI"
	LayoutSceneXaxisExponentformatB     LayoutSceneXaxisExponentformat = "B"
)

// LayoutSceneXaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
// .schema.layout.layoutAttributes.scene.xaxis.mirror
type LayoutSceneXaxisMirror interface{}

var (
	LayoutSceneXaxisMirrorTrue     LayoutSceneXaxisMirror = true
	LayoutSceneXaxisMirrorTicks    LayoutSceneXaxisMirror = "ticks"
	LayoutSceneXaxisMirrorFalse    LayoutSceneXaxisMirror = false
	LayoutSceneXaxisMirrorAll      LayoutSceneXaxisMirror = "all"
	LayoutSceneXaxisMirrorAllticks LayoutSceneXaxisMirror = "allticks"
)

// LayoutSceneXaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
// .schema.layout.layoutAttributes.scene.xaxis.rangemode
type LayoutSceneXaxisRangemode string

const (
	LayoutSceneXaxisRangemodeNormal      LayoutSceneXaxisRangemode = "normal"
	LayoutSceneXaxisRangemodeTozero      LayoutSceneXaxisRangemode = "tozero"
	LayoutSceneXaxisRangemodeNonnegative LayoutSceneXaxisRangemode = "nonnegative"
)

// LayoutSceneXaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.scene.xaxis.showexponent
type LayoutSceneXaxisShowexponent string

const (
	LayoutSceneXaxisShowexponentAll   LayoutSceneXaxisShowexponent = "all"
	LayoutSceneXaxisShowexponentFirst LayoutSceneXaxisShowexponent = "first"
	LayoutSceneXaxisShowexponentLast  LayoutSceneXaxisShowexponent = "last"
	LayoutSceneXaxisShowexponentNone  LayoutSceneXaxisShowexponent = "none"
)

// LayoutSceneXaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.scene.xaxis.showtickprefix
type LayoutSceneXaxisShowtickprefix string

const (
	LayoutSceneXaxisShowtickprefixAll   LayoutSceneXaxisShowtickprefix = "all"
	LayoutSceneXaxisShowtickprefixFirst LayoutSceneXaxisShowtickprefix = "first"
	LayoutSceneXaxisShowtickprefixLast  LayoutSceneXaxisShowtickprefix = "last"
	LayoutSceneXaxisShowtickprefixNone  LayoutSceneXaxisShowtickprefix = "none"
)

// LayoutSceneXaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.scene.xaxis.showticksuffix
type LayoutSceneXaxisShowticksuffix string

const (
	LayoutSceneXaxisShowticksuffixAll   LayoutSceneXaxisShowticksuffix = "all"
	LayoutSceneXaxisShowticksuffixFirst LayoutSceneXaxisShowticksuffix = "first"
	LayoutSceneXaxisShowticksuffixLast  LayoutSceneXaxisShowticksuffix = "last"
	LayoutSceneXaxisShowticksuffixNone  LayoutSceneXaxisShowticksuffix = "none"
)

// LayoutSceneXaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.scene.xaxis.tickfont.style
type LayoutSceneXaxisTickfontStyle string

const (
	LayoutSceneXaxisTickfontStyleNormal LayoutSceneXaxisTickfontStyle = "normal"
	LayoutSceneXaxisTickfontStyleItalic LayoutSceneXaxisTickfontStyle = "italic"
)

// LayoutSceneXaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.scene.xaxis.tickfont.textcase
type LayoutSceneXaxisTickfontTextcase string

const (
	LayoutSceneXaxisTickfontTextcaseNormal   LayoutSceneXaxisTickfontTextcase = "normal"
	LayoutSceneXaxisTickfontTextcaseWordCaps LayoutSceneXaxisTickfontTextcase = "word caps"
	LayoutSceneXaxisTickfontTextcaseUpper    LayoutSceneXaxisTickfontTextcase = "upper"
	LayoutSceneXaxisTickfontTextcaseLower    LayoutSceneXaxisTickfontTextcase = "lower"
)

// LayoutSceneXaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.scene.xaxis.tickfont.variant
type LayoutSceneXaxisTickfontVariant string

const (
	LayoutSceneXaxisTickfontVariantNormal        LayoutSceneXaxisTickfontVariant = "normal"
	LayoutSceneXaxisTickfontVariantSmallCaps     LayoutSceneXaxisTickfontVariant = "small-caps"
	LayoutSceneXaxisTickfontVariantAllSmallCaps  LayoutSceneXaxisTickfontVariant = "all-small-caps"
	LayoutSceneXaxisTickfontVariantAllPetiteCaps LayoutSceneXaxisTickfontVariant = "all-petite-caps"
	LayoutSceneXaxisTickfontVariantPetiteCaps    LayoutSceneXaxisTickfontVariant = "petite-caps"
	LayoutSceneXaxisTickfontVariantUnicase       LayoutSceneXaxisTickfontVariant = "unicase"
)

// LayoutSceneXaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.scene.xaxis.tickmode
type LayoutSceneXaxisTickmode string

const (
	LayoutSceneXaxisTickmodeAuto   LayoutSceneXaxisTickmode = "auto"
	LayoutSceneXaxisTickmodeLinear LayoutSceneXaxisTickmode = "linear"
	LayoutSceneXaxisTickmodeArray  LayoutSceneXaxisTickmode = "array"
)

// LayoutSceneXaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.scene.xaxis.ticks
type LayoutSceneXaxisTicks string

const (
	LayoutSceneXaxisTicksOutside LayoutSceneXaxisTicks = "outside"
	LayoutSceneXaxisTicksInside  LayoutSceneXaxisTicks = "inside"
	LayoutSceneXaxisTicksEmpty   LayoutSceneXaxisTicks = ""
)

// LayoutSceneXaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.scene.xaxis.title.font.style
type LayoutSceneXaxisTitleFontStyle string

const (
	LayoutSceneXaxisTitleFontStyleNormal LayoutSceneXaxisTitleFontStyle = "normal"
	LayoutSceneXaxisTitleFontStyleItalic LayoutSceneXaxisTitleFontStyle = "italic"
)

// LayoutSceneXaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.scene.xaxis.title.font.textcase
type LayoutSceneXaxisTitleFontTextcase string

const (
	LayoutSceneXaxisTitleFontTextcaseNormal   LayoutSceneXaxisTitleFontTextcase = "normal"
	LayoutSceneXaxisTitleFontTextcaseWordCaps LayoutSceneXaxisTitleFontTextcase = "word caps"
	LayoutSceneXaxisTitleFontTextcaseUpper    LayoutSceneXaxisTitleFontTextcase = "upper"
	LayoutSceneXaxisTitleFontTextcaseLower    LayoutSceneXaxisTitleFontTextcase = "lower"
)

// LayoutSceneXaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.scene.xaxis.title.font.variant
type LayoutSceneXaxisTitleFontVariant string

const (
	LayoutSceneXaxisTitleFontVariantNormal        LayoutSceneXaxisTitleFontVariant = "normal"
	LayoutSceneXaxisTitleFontVariantSmallCaps     LayoutSceneXaxisTitleFontVariant = "small-caps"
	LayoutSceneXaxisTitleFontVariantAllSmallCaps  LayoutSceneXaxisTitleFontVariant = "all-small-caps"
	LayoutSceneXaxisTitleFontVariantAllPetiteCaps LayoutSceneXaxisTitleFontVariant = "all-petite-caps"
	LayoutSceneXaxisTitleFontVariantPetiteCaps    LayoutSceneXaxisTitleFontVariant = "petite-caps"
	LayoutSceneXaxisTitleFontVariantUnicase       LayoutSceneXaxisTitleFontVariant = "unicase"
)

// LayoutSceneXaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
// .schema.layout.layoutAttributes.scene.xaxis.type
type LayoutSceneXaxisType string

const (
	LayoutSceneXaxisTypeHyphenHyphen LayoutSceneXaxisType = "-"
	LayoutSceneXaxisTypeLinear       LayoutSceneXaxisType = "linear"
	LayoutSceneXaxisTypeLog          LayoutSceneXaxisType = "log"
	LayoutSceneXaxisTypeDate         LayoutSceneXaxisType = "date"
	LayoutSceneXaxisTypeCategory     LayoutSceneXaxisType = "category"
)

// LayoutSceneYaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
// .schema.layout.layoutAttributes.scene.yaxis.autorange
type LayoutSceneYaxisAutorange interface{}

var (
	LayoutSceneYaxisAutorangeTrue        LayoutSceneYaxisAutorange = true
	LayoutSceneYaxisAutorangeFalse       LayoutSceneYaxisAutorange = false
	LayoutSceneYaxisAutorangeReversed    LayoutSceneYaxisAutorange = "reversed"
	LayoutSceneYaxisAutorangeMinReversed LayoutSceneYaxisAutorange = "min reversed"
	LayoutSceneYaxisAutorangeMaxReversed LayoutSceneYaxisAutorange = "max reversed"
	LayoutSceneYaxisAutorangeMin         LayoutSceneYaxisAutorange = "min"
	LayoutSceneYaxisAutorangeMax         LayoutSceneYaxisAutorange = "max"
)

// LayoutSceneYaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
// .schema.layout.layoutAttributes.scene.yaxis.autotypenumbers
type LayoutSceneYaxisAutotypenumbers string

const (
	LayoutSceneYaxisAutotypenumbersConvertTypes LayoutSceneYaxisAutotypenumbers = "convert types"
	LayoutSceneYaxisAutotypenumbersStrict       LayoutSceneYaxisAutotypenumbers = "strict"
)

// LayoutSceneYaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
// .schema.layout.layoutAttributes.scene.yaxis.calendar
type LayoutSceneYaxisCalendar string

const (
	LayoutSceneYaxisCalendarChinese    LayoutSceneYaxisCalendar = "chinese"
	LayoutSceneYaxisCalendarCoptic     LayoutSceneYaxisCalendar = "coptic"
	LayoutSceneYaxisCalendarDiscworld  LayoutSceneYaxisCalendar = "discworld"
	LayoutSceneYaxisCalendarEthiopian  LayoutSceneYaxisCalendar = "ethiopian"
	LayoutSceneYaxisCalendarGregorian  LayoutSceneYaxisCalendar = "gregorian"
	LayoutSceneYaxisCalendarHebrew     LayoutSceneYaxisCalendar = "hebrew"
	LayoutSceneYaxisCalendarIslamic    LayoutSceneYaxisCalendar = "islamic"
	LayoutSceneYaxisCalendarJalali     LayoutSceneYaxisCalendar = "jalali"
	LayoutSceneYaxisCalendarJulian     LayoutSceneYaxisCalendar = "julian"
	LayoutSceneYaxisCalendarMayan      LayoutSceneYaxisCalendar = "mayan"
	LayoutSceneYaxisCalendarNanakshahi LayoutSceneYaxisCalendar = "nanakshahi"
	LayoutSceneYaxisCalendarNepali     LayoutSceneYaxisCalendar = "nepali"
	LayoutSceneYaxisCalendarPersian    LayoutSceneYaxisCalendar = "persian"
	LayoutSceneYaxisCalendarTaiwan     LayoutSceneYaxisCalendar = "taiwan"
	LayoutSceneYaxisCalendarThai       LayoutSceneYaxisCalendar = "thai"
	LayoutSceneYaxisCalendarUmmalqura  LayoutSceneYaxisCalendar = "ummalqura"
)

// LayoutSceneYaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
// .schema.layout.layoutAttributes.scene.yaxis.categoryorder
type LayoutSceneYaxisCategoryorder string

const (
	LayoutSceneYaxisCategoryorderTrace                   LayoutSceneYaxisCategoryorder = "trace"
	LayoutSceneYaxisCategoryorderCategoryAscending       LayoutSceneYaxisCategoryorder = "category ascending"
	LayoutSceneYaxisCategoryorderCategoryDescending      LayoutSceneYaxisCategoryorder = "category descending"
	LayoutSceneYaxisCategoryorderArray                   LayoutSceneYaxisCategoryorder = "array"
	LayoutSceneYaxisCategoryorderTotalAscending          LayoutSceneYaxisCategoryorder = "total ascending"
	LayoutSceneYaxisCategoryorderTotalDescending         LayoutSceneYaxisCategoryorder = "total descending"
	LayoutSceneYaxisCategoryorderMinAscending            LayoutSceneYaxisCategoryorder = "min ascending"
	LayoutSceneYaxisCategoryorderMinDescending           LayoutSceneYaxisCategoryorder = "min descending"
	LayoutSceneYaxisCategoryorderMaxAscending            LayoutSceneYaxisCategoryorder = "max ascending"
	LayoutSceneYaxisCategoryorderMaxDescending           LayoutSceneYaxisCategoryorder = "max descending"
	LayoutSceneYaxisCategoryorderSumAscending            LayoutSceneYaxisCategoryorder = "sum ascending"
	LayoutSceneYaxisCategoryorderSumDescending           LayoutSceneYaxisCategoryorder = "sum descending"
	LayoutSceneYaxisCategoryorderMeanAscending           LayoutSceneYaxisCategoryorder = "mean ascending"
	LayoutSceneYaxisCategoryorderMeanDescending          LayoutSceneYaxisCategoryorder = "mean descending"
	LayoutSceneYaxisCategoryorderGeometricMeanAscending  LayoutSceneYaxisCategoryorder = "geometric mean ascending"
	LayoutSceneYaxisCategoryorderGeometricMeanDescending LayoutSceneYaxisCategoryorder = "geometric mean descending"
	LayoutSceneYaxisCategoryorderMedianAscending         LayoutSceneYaxisCategoryorder = "median ascending"
	LayoutSceneYaxisCategoryorderMedianDescending        LayoutSceneYaxisCategoryorder = "median descending"
)

// LayoutSceneYaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.scene.yaxis.exponentformat
type LayoutSceneYaxisExponentformat string

const (
	LayoutSceneYaxisExponentformatNone  LayoutSceneYaxisExponentformat = "none"
	LayoutSceneYaxisExponentformatE1    LayoutSceneYaxisExponentformat = "e"
	LayoutSceneYaxisExponentformatE2    LayoutSceneYaxisExponentformat = "E"
	LayoutSceneYaxisExponentformatPower LayoutSceneYaxisExponentformat = "power"
	LayoutSceneYaxisExponentformatSI    LayoutSceneYaxisExponentformat = "SI"
	LayoutSceneYaxisExponentformatB     LayoutSceneYaxisExponentformat = "B"
)

// LayoutSceneYaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
// .schema.layout.layoutAttributes.scene.yaxis.mirror
type LayoutSceneYaxisMirror interface{}

var (
	LayoutSceneYaxisMirrorTrue     LayoutSceneYaxisMirror = true
	LayoutSceneYaxisMirrorTicks    LayoutSceneYaxisMirror = "ticks"
	LayoutSceneYaxisMirrorFalse    LayoutSceneYaxisMirror = false
	LayoutSceneYaxisMirrorAll      LayoutSceneYaxisMirror = "all"
	LayoutSceneYaxisMirrorAllticks LayoutSceneYaxisMirror = "allticks"
)

// LayoutSceneYaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
// .schema.layout.layoutAttributes.scene.yaxis.rangemode
type LayoutSceneYaxisRangemode string

const (
	LayoutSceneYaxisRangemodeNormal      LayoutSceneYaxisRangemode = "normal"
	LayoutSceneYaxisRangemodeTozero      LayoutSceneYaxisRangemode = "tozero"
	LayoutSceneYaxisRangemodeNonnegative LayoutSceneYaxisRangemode = "nonnegative"
)

// LayoutSceneYaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.scene.yaxis.showexponent
type LayoutSceneYaxisShowexponent string

const (
	LayoutSceneYaxisShowexponentAll   LayoutSceneYaxisShowexponent = "all"
	LayoutSceneYaxisShowexponentFirst LayoutSceneYaxisShowexponent = "first"
	LayoutSceneYaxisShowexponentLast  LayoutSceneYaxisShowexponent = "last"
	LayoutSceneYaxisShowexponentNone  LayoutSceneYaxisShowexponent = "none"
)

// LayoutSceneYaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.scene.yaxis.showtickprefix
type LayoutSceneYaxisShowtickprefix string

const (
	LayoutSceneYaxisShowtickprefixAll   LayoutSceneYaxisShowtickprefix = "all"
	LayoutSceneYaxisShowtickprefixFirst LayoutSceneYaxisShowtickprefix = "first"
	LayoutSceneYaxisShowtickprefixLast  LayoutSceneYaxisShowtickprefix = "last"
	LayoutSceneYaxisShowtickprefixNone  LayoutSceneYaxisShowtickprefix = "none"
)

// LayoutSceneYaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.scene.yaxis.showticksuffix
type LayoutSceneYaxisShowticksuffix string

const (
	LayoutSceneYaxisShowticksuffixAll   LayoutSceneYaxisShowticksuffix = "all"
	LayoutSceneYaxisShowticksuffixFirst LayoutSceneYaxisShowticksuffix = "first"
	LayoutSceneYaxisShowticksuffixLast  LayoutSceneYaxisShowticksuffix = "last"
	LayoutSceneYaxisShowticksuffixNone  LayoutSceneYaxisShowticksuffix = "none"
)

// LayoutSceneYaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.scene.yaxis.tickfont.style
type LayoutSceneYaxisTickfontStyle string

const (
	LayoutSceneYaxisTickfontStyleNormal LayoutSceneYaxisTickfontStyle = "normal"
	LayoutSceneYaxisTickfontStyleItalic LayoutSceneYaxisTickfontStyle = "italic"
)

// LayoutSceneYaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.scene.yaxis.tickfont.textcase
type LayoutSceneYaxisTickfontTextcase string

const (
	LayoutSceneYaxisTickfontTextcaseNormal   LayoutSceneYaxisTickfontTextcase = "normal"
	LayoutSceneYaxisTickfontTextcaseWordCaps LayoutSceneYaxisTickfontTextcase = "word caps"
	LayoutSceneYaxisTickfontTextcaseUpper    LayoutSceneYaxisTickfontTextcase = "upper"
	LayoutSceneYaxisTickfontTextcaseLower    LayoutSceneYaxisTickfontTextcase = "lower"
)

// LayoutSceneYaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.scene.yaxis.tickfont.variant
type LayoutSceneYaxisTickfontVariant string

const (
	LayoutSceneYaxisTickfontVariantNormal        LayoutSceneYaxisTickfontVariant = "normal"
	LayoutSceneYaxisTickfontVariantSmallCaps     LayoutSceneYaxisTickfontVariant = "small-caps"
	LayoutSceneYaxisTickfontVariantAllSmallCaps  LayoutSceneYaxisTickfontVariant = "all-small-caps"
	LayoutSceneYaxisTickfontVariantAllPetiteCaps LayoutSceneYaxisTickfontVariant = "all-petite-caps"
	LayoutSceneYaxisTickfontVariantPetiteCaps    LayoutSceneYaxisTickfontVariant = "petite-caps"
	LayoutSceneYaxisTickfontVariantUnicase       LayoutSceneYaxisTickfontVariant = "unicase"
)

// LayoutSceneYaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.scene.yaxis.tickmode
type LayoutSceneYaxisTickmode string

const (
	LayoutSceneYaxisTickmodeAuto   LayoutSceneYaxisTickmode = "auto"
	LayoutSceneYaxisTickmodeLinear LayoutSceneYaxisTickmode = "linear"
	LayoutSceneYaxisTickmodeArray  LayoutSceneYaxisTickmode = "array"
)

// LayoutSceneYaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.scene.yaxis.ticks
type LayoutSceneYaxisTicks string

const (
	LayoutSceneYaxisTicksOutside LayoutSceneYaxisTicks = "outside"
	LayoutSceneYaxisTicksInside  LayoutSceneYaxisTicks = "inside"
	LayoutSceneYaxisTicksEmpty   LayoutSceneYaxisTicks = ""
)

// LayoutSceneYaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.scene.yaxis.title.font.style
type LayoutSceneYaxisTitleFontStyle string

const (
	LayoutSceneYaxisTitleFontStyleNormal LayoutSceneYaxisTitleFontStyle = "normal"
	LayoutSceneYaxisTitleFontStyleItalic LayoutSceneYaxisTitleFontStyle = "italic"
)

// LayoutSceneYaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.scene.yaxis.title.font.textcase
type LayoutSceneYaxisTitleFontTextcase string

const (
	LayoutSceneYaxisTitleFontTextcaseNormal   LayoutSceneYaxisTitleFontTextcase = "normal"
	LayoutSceneYaxisTitleFontTextcaseWordCaps LayoutSceneYaxisTitleFontTextcase = "word caps"
	LayoutSceneYaxisTitleFontTextcaseUpper    LayoutSceneYaxisTitleFontTextcase = "upper"
	LayoutSceneYaxisTitleFontTextcaseLower    LayoutSceneYaxisTitleFontTextcase = "lower"
)

// LayoutSceneYaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.scene.yaxis.title.font.variant
type LayoutSceneYaxisTitleFontVariant string

const (
	LayoutSceneYaxisTitleFontVariantNormal        LayoutSceneYaxisTitleFontVariant = "normal"
	LayoutSceneYaxisTitleFontVariantSmallCaps     LayoutSceneYaxisTitleFontVariant = "small-caps"
	LayoutSceneYaxisTitleFontVariantAllSmallCaps  LayoutSceneYaxisTitleFontVariant = "all-small-caps"
	LayoutSceneYaxisTitleFontVariantAllPetiteCaps LayoutSceneYaxisTitleFontVariant = "all-petite-caps"
	LayoutSceneYaxisTitleFontVariantPetiteCaps    LayoutSceneYaxisTitleFontVariant = "petite-caps"
	LayoutSceneYaxisTitleFontVariantUnicase       LayoutSceneYaxisTitleFontVariant = "unicase"
)

// LayoutSceneYaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
// .schema.layout.layoutAttributes.scene.yaxis.type
type LayoutSceneYaxisType string

const (
	LayoutSceneYaxisTypeHyphenHyphen LayoutSceneYaxisType = "-"
	LayoutSceneYaxisTypeLinear       LayoutSceneYaxisType = "linear"
	LayoutSceneYaxisTypeLog          LayoutSceneYaxisType = "log"
	LayoutSceneYaxisTypeDate         LayoutSceneYaxisType = "date"
	LayoutSceneYaxisTypeCategory     LayoutSceneYaxisType = "category"
)

// LayoutSceneZaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
// .schema.layout.layoutAttributes.scene.zaxis.autorange
type LayoutSceneZaxisAutorange interface{}

var (
	LayoutSceneZaxisAutorangeTrue        LayoutSceneZaxisAutorange = true
	LayoutSceneZaxisAutorangeFalse       LayoutSceneZaxisAutorange = false
	LayoutSceneZaxisAutorangeReversed    LayoutSceneZaxisAutorange = "reversed"
	LayoutSceneZaxisAutorangeMinReversed LayoutSceneZaxisAutorange = "min reversed"
	LayoutSceneZaxisAutorangeMaxReversed LayoutSceneZaxisAutorange = "max reversed"
	LayoutSceneZaxisAutorangeMin         LayoutSceneZaxisAutorange = "min"
	LayoutSceneZaxisAutorangeMax         LayoutSceneZaxisAutorange = "max"
)

// LayoutSceneZaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
// .schema.layout.layoutAttributes.scene.zaxis.autotypenumbers
type LayoutSceneZaxisAutotypenumbers string

const (
	LayoutSceneZaxisAutotypenumbersConvertTypes LayoutSceneZaxisAutotypenumbers = "convert types"
	LayoutSceneZaxisAutotypenumbersStrict       LayoutSceneZaxisAutotypenumbers = "strict"
)

// LayoutSceneZaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
// .schema.layout.layoutAttributes.scene.zaxis.calendar
type LayoutSceneZaxisCalendar string

const (
	LayoutSceneZaxisCalendarChinese    LayoutSceneZaxisCalendar = "chinese"
	LayoutSceneZaxisCalendarCoptic     LayoutSceneZaxisCalendar = "coptic"
	LayoutSceneZaxisCalendarDiscworld  LayoutSceneZaxisCalendar = "discworld"
	LayoutSceneZaxisCalendarEthiopian  LayoutSceneZaxisCalendar = "ethiopian"
	LayoutSceneZaxisCalendarGregorian  LayoutSceneZaxisCalendar = "gregorian"
	LayoutSceneZaxisCalendarHebrew     LayoutSceneZaxisCalendar = "hebrew"
	LayoutSceneZaxisCalendarIslamic    LayoutSceneZaxisCalendar = "islamic"
	LayoutSceneZaxisCalendarJalali     LayoutSceneZaxisCalendar = "jalali"
	LayoutSceneZaxisCalendarJulian     LayoutSceneZaxisCalendar = "julian"
	LayoutSceneZaxisCalendarMayan      LayoutSceneZaxisCalendar = "mayan"
	LayoutSceneZaxisCalendarNanakshahi LayoutSceneZaxisCalendar = "nanakshahi"
	LayoutSceneZaxisCalendarNepali     LayoutSceneZaxisCalendar = "nepali"
	LayoutSceneZaxisCalendarPersian    LayoutSceneZaxisCalendar = "persian"
	LayoutSceneZaxisCalendarTaiwan     LayoutSceneZaxisCalendar = "taiwan"
	LayoutSceneZaxisCalendarThai       LayoutSceneZaxisCalendar = "thai"
	LayoutSceneZaxisCalendarUmmalqura  LayoutSceneZaxisCalendar = "ummalqura"
)

// LayoutSceneZaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
// .schema.layout.layoutAttributes.scene.zaxis.categoryorder
type LayoutSceneZaxisCategoryorder string

const (
	LayoutSceneZaxisCategoryorderTrace                   LayoutSceneZaxisCategoryorder = "trace"
	LayoutSceneZaxisCategoryorderCategoryAscending       LayoutSceneZaxisCategoryorder = "category ascending"
	LayoutSceneZaxisCategoryorderCategoryDescending      LayoutSceneZaxisCategoryorder = "category descending"
	LayoutSceneZaxisCategoryorderArray                   LayoutSceneZaxisCategoryorder = "array"
	LayoutSceneZaxisCategoryorderTotalAscending          LayoutSceneZaxisCategoryorder = "total ascending"
	LayoutSceneZaxisCategoryorderTotalDescending         LayoutSceneZaxisCategoryorder = "total descending"
	LayoutSceneZaxisCategoryorderMinAscending            LayoutSceneZaxisCategoryorder = "min ascending"
	LayoutSceneZaxisCategoryorderMinDescending           LayoutSceneZaxisCategoryorder = "min descending"
	LayoutSceneZaxisCategoryorderMaxAscending            LayoutSceneZaxisCategoryorder = "max ascending"
	LayoutSceneZaxisCategoryorderMaxDescending           LayoutSceneZaxisCategoryorder = "max descending"
	LayoutSceneZaxisCategoryorderSumAscending            LayoutSceneZaxisCategoryorder = "sum ascending"
	LayoutSceneZaxisCategoryorderSumDescending           LayoutSceneZaxisCategoryorder = "sum descending"
	LayoutSceneZaxisCategoryorderMeanAscending           LayoutSceneZaxisCategoryorder = "mean ascending"
	LayoutSceneZaxisCategoryorderMeanDescending          LayoutSceneZaxisCategoryorder = "mean descending"
	LayoutSceneZaxisCategoryorderGeometricMeanAscending  LayoutSceneZaxisCategoryorder = "geometric mean ascending"
	LayoutSceneZaxisCategoryorderGeometricMeanDescending LayoutSceneZaxisCategoryorder = "geometric mean descending"
	LayoutSceneZaxisCategoryorderMedianAscending         LayoutSceneZaxisCategoryorder = "median ascending"
	LayoutSceneZaxisCategoryorderMedianDescending        LayoutSceneZaxisCategoryorder = "median descending"
)

// LayoutSceneZaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.scene.zaxis.exponentformat
type LayoutSceneZaxisExponentformat string

const (
	LayoutSceneZaxisExponentformatNone  LayoutSceneZaxisExponentformat = "none"
	LayoutSceneZaxisExponentformatE1    LayoutSceneZaxisExponentformat = "e"
	LayoutSceneZaxisExponentformatE2    LayoutSceneZaxisExponentformat = "E"
	LayoutSceneZaxisExponentformatPower LayoutSceneZaxisExponentformat = "power"
	LayoutSceneZaxisExponentformatSI    LayoutSceneZaxisExponentformat = "SI"
	LayoutSceneZaxisExponentformatB     LayoutSceneZaxisExponentformat = "B"
)

// LayoutSceneZaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
// .schema.layout.layoutAttributes.scene.zaxis.mirror
type LayoutSceneZaxisMirror interface{}

var (
	LayoutSceneZaxisMirrorTrue     LayoutSceneZaxisMirror = true
	LayoutSceneZaxisMirrorTicks    LayoutSceneZaxisMirror = "ticks"
	LayoutSceneZaxisMirrorFalse    LayoutSceneZaxisMirror = false
	LayoutSceneZaxisMirrorAll      LayoutSceneZaxisMirror = "all"
	LayoutSceneZaxisMirrorAllticks LayoutSceneZaxisMirror = "allticks"
)

// LayoutSceneZaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
// .schema.layout.layoutAttributes.scene.zaxis.rangemode
type LayoutSceneZaxisRangemode string

const (
	LayoutSceneZaxisRangemodeNormal      LayoutSceneZaxisRangemode = "normal"
	LayoutSceneZaxisRangemodeTozero      LayoutSceneZaxisRangemode = "tozero"
	LayoutSceneZaxisRangemodeNonnegative LayoutSceneZaxisRangemode = "nonnegative"
)

// LayoutSceneZaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.scene.zaxis.showexponent
type LayoutSceneZaxisShowexponent string

const (
	LayoutSceneZaxisShowexponentAll   LayoutSceneZaxisShowexponent = "all"
	LayoutSceneZaxisShowexponentFirst LayoutSceneZaxisShowexponent = "first"
	LayoutSceneZaxisShowexponentLast  LayoutSceneZaxisShowexponent = "last"
	LayoutSceneZaxisShowexponentNone  LayoutSceneZaxisShowexponent = "none"
)

// LayoutSceneZaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.scene.zaxis.showtickprefix
type LayoutSceneZaxisShowtickprefix string

const (
	LayoutSceneZaxisShowtickprefixAll   LayoutSceneZaxisShowtickprefix = "all"
	LayoutSceneZaxisShowtickprefixFirst LayoutSceneZaxisShowtickprefix = "first"
	LayoutSceneZaxisShowtickprefixLast  LayoutSceneZaxisShowtickprefix = "last"
	LayoutSceneZaxisShowtickprefixNone  LayoutSceneZaxisShowtickprefix = "none"
)

// LayoutSceneZaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.scene.zaxis.showticksuffix
type LayoutSceneZaxisShowticksuffix string

const (
	LayoutSceneZaxisShowticksuffixAll   LayoutSceneZaxisShowticksuffix = "all"
	LayoutSceneZaxisShowticksuffixFirst LayoutSceneZaxisShowticksuffix = "first"
	LayoutSceneZaxisShowticksuffixLast  LayoutSceneZaxisShowticksuffix = "last"
	LayoutSceneZaxisShowticksuffixNone  LayoutSceneZaxisShowticksuffix = "none"
)

// LayoutSceneZaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.scene.zaxis.tickfont.style
type LayoutSceneZaxisTickfontStyle string

const (
	LayoutSceneZaxisTickfontStyleNormal LayoutSceneZaxisTickfontStyle = "normal"
	LayoutSceneZaxisTickfontStyleItalic LayoutSceneZaxisTickfontStyle = "italic"
)

// LayoutSceneZaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.scene.zaxis.tickfont.textcase
type LayoutSceneZaxisTickfontTextcase string

const (
	LayoutSceneZaxisTickfontTextcaseNormal   LayoutSceneZaxisTickfontTextcase = "normal"
	LayoutSceneZaxisTickfontTextcaseWordCaps LayoutSceneZaxisTickfontTextcase = "word caps"
	LayoutSceneZaxisTickfontTextcaseUpper    LayoutSceneZaxisTickfontTextcase = "upper"
	LayoutSceneZaxisTickfontTextcaseLower    LayoutSceneZaxisTickfontTextcase = "lower"
)

// LayoutSceneZaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.scene.zaxis.tickfont.variant
type LayoutSceneZaxisTickfontVariant string

const (
	LayoutSceneZaxisTickfontVariantNormal        LayoutSceneZaxisTickfontVariant = "normal"
	LayoutSceneZaxisTickfontVariantSmallCaps     LayoutSceneZaxisTickfontVariant = "small-caps"
	LayoutSceneZaxisTickfontVariantAllSmallCaps  LayoutSceneZaxisTickfontVariant = "all-small-caps"
	LayoutSceneZaxisTickfontVariantAllPetiteCaps LayoutSceneZaxisTickfontVariant = "all-petite-caps"
	LayoutSceneZaxisTickfontVariantPetiteCaps    LayoutSceneZaxisTickfontVariant = "petite-caps"
	LayoutSceneZaxisTickfontVariantUnicase       LayoutSceneZaxisTickfontVariant = "unicase"
)

// LayoutSceneZaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.scene.zaxis.tickmode
type LayoutSceneZaxisTickmode string

const (
	LayoutSceneZaxisTickmodeAuto   LayoutSceneZaxisTickmode = "auto"
	LayoutSceneZaxisTickmodeLinear LayoutSceneZaxisTickmode = "linear"
	LayoutSceneZaxisTickmodeArray  LayoutSceneZaxisTickmode = "array"
)

// LayoutSceneZaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.scene.zaxis.ticks
type LayoutSceneZaxisTicks string

const (
	LayoutSceneZaxisTicksOutside LayoutSceneZaxisTicks = "outside"
	LayoutSceneZaxisTicksInside  LayoutSceneZaxisTicks = "inside"
	LayoutSceneZaxisTicksEmpty   LayoutSceneZaxisTicks = ""
)

// LayoutSceneZaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.scene.zaxis.title.font.style
type LayoutSceneZaxisTitleFontStyle string

const (
	LayoutSceneZaxisTitleFontStyleNormal LayoutSceneZaxisTitleFontStyle = "normal"
	LayoutSceneZaxisTitleFontStyleItalic LayoutSceneZaxisTitleFontStyle = "italic"
)

// LayoutSceneZaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.scene.zaxis.title.font.textcase
type LayoutSceneZaxisTitleFontTextcase string

const (
	LayoutSceneZaxisTitleFontTextcaseNormal   LayoutSceneZaxisTitleFontTextcase = "normal"
	LayoutSceneZaxisTitleFontTextcaseWordCaps LayoutSceneZaxisTitleFontTextcase = "word caps"
	LayoutSceneZaxisTitleFontTextcaseUpper    LayoutSceneZaxisTitleFontTextcase = "upper"
	LayoutSceneZaxisTitleFontTextcaseLower    LayoutSceneZaxisTitleFontTextcase = "lower"
)

// LayoutSceneZaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.scene.zaxis.title.font.variant
type LayoutSceneZaxisTitleFontVariant string

const (
	LayoutSceneZaxisTitleFontVariantNormal        LayoutSceneZaxisTitleFontVariant = "normal"
	LayoutSceneZaxisTitleFontVariantSmallCaps     LayoutSceneZaxisTitleFontVariant = "small-caps"
	LayoutSceneZaxisTitleFontVariantAllSmallCaps  LayoutSceneZaxisTitleFontVariant = "all-small-caps"
	LayoutSceneZaxisTitleFontVariantAllPetiteCaps LayoutSceneZaxisTitleFontVariant = "all-petite-caps"
	LayoutSceneZaxisTitleFontVariantPetiteCaps    LayoutSceneZaxisTitleFontVariant = "petite-caps"
	LayoutSceneZaxisTitleFontVariantUnicase       LayoutSceneZaxisTitleFontVariant = "unicase"
)

// LayoutSceneZaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
// .schema.layout.layoutAttributes.scene.zaxis.type
type LayoutSceneZaxisType string

const (
	LayoutSceneZaxisTypeHyphenHyphen LayoutSceneZaxisType = "-"
	LayoutSceneZaxisTypeLinear       LayoutSceneZaxisType = "linear"
	LayoutSceneZaxisTypeLog          LayoutSceneZaxisType = "log"
	LayoutSceneZaxisTypeDate         LayoutSceneZaxisType = "date"
	LayoutSceneZaxisTypeCategory     LayoutSceneZaxisType = "category"
)

// LayoutSelectdirection When `dragmode` is set to *select*, this limits the selection of the drag to horizontal, vertical or diagonal. *h* only allows horizontal selection, *v* only vertical, *d* only diagonal and *any* sets no limit.
// .schema.layout.layoutAttributes.selectdirection
type LayoutSelectdirection string

const (
	LayoutSelectdirectionH   LayoutSelectdirection = "h"
	LayoutSelectdirectionV   LayoutSelectdirection = "v"
	LayoutSelectdirectionD   LayoutSelectdirection = "d"
	LayoutSelectdirectionAny LayoutSelectdirection = "any"
)

// LayoutSmithImaginaryaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.layer
type LayoutSmithImaginaryaxisLayer string

const (
	LayoutSmithImaginaryaxisLayerAboveTraces LayoutSmithImaginaryaxisLayer = "above traces"
	LayoutSmithImaginaryaxisLayerBelowTraces LayoutSmithImaginaryaxisLayer = "below traces"
)

// LayoutSmithImaginaryaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.showtickprefix
type LayoutSmithImaginaryaxisShowtickprefix string

const (
	LayoutSmithImaginaryaxisShowtickprefixAll   LayoutSmithImaginaryaxisShowtickprefix = "all"
	LayoutSmithImaginaryaxisShowtickprefixFirst LayoutSmithImaginaryaxisShowtickprefix = "first"
	LayoutSmithImaginaryaxisShowtickprefixLast  LayoutSmithImaginaryaxisShowtickprefix = "last"
	LayoutSmithImaginaryaxisShowtickprefixNone  LayoutSmithImaginaryaxisShowtickprefix = "none"
)

// LayoutSmithImaginaryaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.showticksuffix
type LayoutSmithImaginaryaxisShowticksuffix string

const (
	LayoutSmithImaginaryaxisShowticksuffixAll   LayoutSmithImaginaryaxisShowticksuffix = "all"
	LayoutSmithImaginaryaxisShowticksuffixFirst LayoutSmithImaginaryaxisShowticksuffix = "first"
	LayoutSmithImaginaryaxisShowticksuffixLast  LayoutSmithImaginaryaxisShowticksuffix = "last"
	LayoutSmithImaginaryaxisShowticksuffixNone  LayoutSmithImaginaryaxisShowticksuffix = "none"
)

// LayoutSmithImaginaryaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.style
type LayoutSmithImaginaryaxisTickfontStyle string

const (
	LayoutSmithImaginaryaxisTickfontStyleNormal LayoutSmithImaginaryaxisTickfontStyle = "normal"
	LayoutSmithImaginaryaxisTickfontStyleItalic LayoutSmithImaginaryaxisTickfontStyle = "italic"
)

// LayoutSmithImaginaryaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.textcase
type LayoutSmithImaginaryaxisTickfontTextcase string

const (
	LayoutSmithImaginaryaxisTickfontTextcaseNormal   LayoutSmithImaginaryaxisTickfontTextcase = "normal"
	LayoutSmithImaginaryaxisTickfontTextcaseWordCaps LayoutSmithImaginaryaxisTickfontTextcase = "word caps"
	LayoutSmithImaginaryaxisTickfontTextcaseUpper    LayoutSmithImaginaryaxisTickfontTextcase = "upper"
	LayoutSmithImaginaryaxisTickfontTextcaseLower    LayoutSmithImaginaryaxisTickfontTextcase = "lower"
)

// LayoutSmithImaginaryaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.variant
type LayoutSmithImaginaryaxisTickfontVariant string

const (
	LayoutSmithImaginaryaxisTickfontVariantNormal        LayoutSmithImaginaryaxisTickfontVariant = "normal"
	LayoutSmithImaginaryaxisTickfontVariantSmallCaps     LayoutSmithImaginaryaxisTickfontVariant = "small-caps"
	LayoutSmithImaginaryaxisTickfontVariantAllSmallCaps  LayoutSmithImaginaryaxisTickfontVariant = "all-small-caps"
	LayoutSmithImaginaryaxisTickfontVariantAllPetiteCaps LayoutSmithImaginaryaxisTickfontVariant = "all-petite-caps"
	LayoutSmithImaginaryaxisTickfontVariantPetiteCaps    LayoutSmithImaginaryaxisTickfontVariant = "petite-caps"
	LayoutSmithImaginaryaxisTickfontVariantUnicase       LayoutSmithImaginaryaxisTickfontVariant = "unicase"
)

// LayoutSmithImaginaryaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.ticks
type LayoutSmithImaginaryaxisTicks string

const (
	LayoutSmithImaginaryaxisTicksOutside LayoutSmithImaginaryaxisTicks = "outside"
	LayoutSmithImaginaryaxisTicksInside  LayoutSmithImaginaryaxisTicks = "inside"
	LayoutSmithImaginaryaxisTicksEmpty   LayoutSmithImaginaryaxisTicks = ""
)

// LayoutSmithRealaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.smith.realaxis.layer
type LayoutSmithRealaxisLayer string

const (
	LayoutSmithRealaxisLayerAboveTraces LayoutSmithRealaxisLayer = "above traces"
	LayoutSmithRealaxisLayerBelowTraces LayoutSmithRealaxisLayer = "below traces"
)

// LayoutSmithRealaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.smith.realaxis.showtickprefix
type LayoutSmithRealaxisShowtickprefix string

const (
	LayoutSmithRealaxisShowtickprefixAll   LayoutSmithRealaxisShowtickprefix = "all"
	LayoutSmithRealaxisShowtickprefixFirst LayoutSmithRealaxisShowtickprefix = "first"
	LayoutSmithRealaxisShowtickprefixLast  LayoutSmithRealaxisShowtickprefix = "last"
	LayoutSmithRealaxisShowtickprefixNone  LayoutSmithRealaxisShowtickprefix = "none"
)

// LayoutSmithRealaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.smith.realaxis.showticksuffix
type LayoutSmithRealaxisShowticksuffix string

const (
	LayoutSmithRealaxisShowticksuffixAll   LayoutSmithRealaxisShowticksuffix = "all"
	LayoutSmithRealaxisShowticksuffixFirst LayoutSmithRealaxisShowticksuffix = "first"
	LayoutSmithRealaxisShowticksuffixLast  LayoutSmithRealaxisShowticksuffix = "last"
	LayoutSmithRealaxisShowticksuffixNone  LayoutSmithRealaxisShowticksuffix = "none"
)

// LayoutSmithRealaxisSide Determines on which side of real axis line the tick and tick labels appear.
// .schema.layout.layoutAttributes.smith.realaxis.side
type LayoutSmithRealaxisSide string

const (
	LayoutSmithRealaxisSideTop    LayoutSmithRealaxisSide = "top"
	LayoutSmithRealaxisSideBottom LayoutSmithRealaxisSide = "bottom"
)

// LayoutSmithRealaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.smith.realaxis.tickfont.style
type LayoutSmithRealaxisTickfontStyle string

const (
	LayoutSmithRealaxisTickfontStyleNormal LayoutSmithRealaxisTickfontStyle = "normal"
	LayoutSmithRealaxisTickfontStyleItalic LayoutSmithRealaxisTickfontStyle = "italic"
)

// LayoutSmithRealaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.smith.realaxis.tickfont.textcase
type LayoutSmithRealaxisTickfontTextcase string

const (
	LayoutSmithRealaxisTickfontTextcaseNormal   LayoutSmithRealaxisTickfontTextcase = "normal"
	LayoutSmithRealaxisTickfontTextcaseWordCaps LayoutSmithRealaxisTickfontTextcase = "word caps"
	LayoutSmithRealaxisTickfontTextcaseUpper    LayoutSmithRealaxisTickfontTextcase = "upper"
	LayoutSmithRealaxisTickfontTextcaseLower    LayoutSmithRealaxisTickfontTextcase = "lower"
)

// LayoutSmithRealaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.smith.realaxis.tickfont.variant
type LayoutSmithRealaxisTickfontVariant string

const (
	LayoutSmithRealaxisTickfontVariantNormal        LayoutSmithRealaxisTickfontVariant = "normal"
	LayoutSmithRealaxisTickfontVariantSmallCaps     LayoutSmithRealaxisTickfontVariant = "small-caps"
	LayoutSmithRealaxisTickfontVariantAllSmallCaps  LayoutSmithRealaxisTickfontVariant = "all-small-caps"
	LayoutSmithRealaxisTickfontVariantAllPetiteCaps LayoutSmithRealaxisTickfontVariant = "all-petite-caps"
	LayoutSmithRealaxisTickfontVariantPetiteCaps    LayoutSmithRealaxisTickfontVariant = "petite-caps"
	LayoutSmithRealaxisTickfontVariantUnicase       LayoutSmithRealaxisTickfontVariant = "unicase"
)

// LayoutSmithRealaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *top* (*bottom*), this axis' are drawn above (below) the axis line.
// .schema.layout.layoutAttributes.smith.realaxis.ticks
type LayoutSmithRealaxisTicks string

const (
	LayoutSmithRealaxisTicksTop    LayoutSmithRealaxisTicks = "top"
	LayoutSmithRealaxisTicksBottom LayoutSmithRealaxisTicks = "bottom"
	LayoutSmithRealaxisTicksEmpty  LayoutSmithRealaxisTicks = ""
)

// LayoutTernaryAaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.ternary.aaxis.exponentformat
type LayoutTernaryAaxisExponentformat string

const (
	LayoutTernaryAaxisExponentformatNone  LayoutTernaryAaxisExponentformat = "none"
	LayoutTernaryAaxisExponentformatE1    LayoutTernaryAaxisExponentformat = "e"
	LayoutTernaryAaxisExponentformatE2    LayoutTernaryAaxisExponentformat = "E"
	LayoutTernaryAaxisExponentformatPower LayoutTernaryAaxisExponentformat = "power"
	LayoutTernaryAaxisExponentformatSI    LayoutTernaryAaxisExponentformat = "SI"
	LayoutTernaryAaxisExponentformatB     LayoutTernaryAaxisExponentformat = "B"
)

// LayoutTernaryAaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.ternary.aaxis.layer
type LayoutTernaryAaxisLayer string

const (
	LayoutTernaryAaxisLayerAboveTraces LayoutTernaryAaxisLayer = "above traces"
	LayoutTernaryAaxisLayerBelowTraces LayoutTernaryAaxisLayer = "below traces"
)

// LayoutTernaryAaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.ternary.aaxis.showexponent
type LayoutTernaryAaxisShowexponent string

const (
	LayoutTernaryAaxisShowexponentAll   LayoutTernaryAaxisShowexponent = "all"
	LayoutTernaryAaxisShowexponentFirst LayoutTernaryAaxisShowexponent = "first"
	LayoutTernaryAaxisShowexponentLast  LayoutTernaryAaxisShowexponent = "last"
	LayoutTernaryAaxisShowexponentNone  LayoutTernaryAaxisShowexponent = "none"
)

// LayoutTernaryAaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.ternary.aaxis.showtickprefix
type LayoutTernaryAaxisShowtickprefix string

const (
	LayoutTernaryAaxisShowtickprefixAll   LayoutTernaryAaxisShowtickprefix = "all"
	LayoutTernaryAaxisShowtickprefixFirst LayoutTernaryAaxisShowtickprefix = "first"
	LayoutTernaryAaxisShowtickprefixLast  LayoutTernaryAaxisShowtickprefix = "last"
	LayoutTernaryAaxisShowtickprefixNone  LayoutTernaryAaxisShowtickprefix = "none"
)

// LayoutTernaryAaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.ternary.aaxis.showticksuffix
type LayoutTernaryAaxisShowticksuffix string

const (
	LayoutTernaryAaxisShowticksuffixAll   LayoutTernaryAaxisShowticksuffix = "all"
	LayoutTernaryAaxisShowticksuffixFirst LayoutTernaryAaxisShowticksuffix = "first"
	LayoutTernaryAaxisShowticksuffixLast  LayoutTernaryAaxisShowticksuffix = "last"
	LayoutTernaryAaxisShowticksuffixNone  LayoutTernaryAaxisShowticksuffix = "none"
)

// LayoutTernaryAaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.style
type LayoutTernaryAaxisTickfontStyle string

const (
	LayoutTernaryAaxisTickfontStyleNormal LayoutTernaryAaxisTickfontStyle = "normal"
	LayoutTernaryAaxisTickfontStyleItalic LayoutTernaryAaxisTickfontStyle = "italic"
)

// LayoutTernaryAaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.textcase
type LayoutTernaryAaxisTickfontTextcase string

const (
	LayoutTernaryAaxisTickfontTextcaseNormal   LayoutTernaryAaxisTickfontTextcase = "normal"
	LayoutTernaryAaxisTickfontTextcaseWordCaps LayoutTernaryAaxisTickfontTextcase = "word caps"
	LayoutTernaryAaxisTickfontTextcaseUpper    LayoutTernaryAaxisTickfontTextcase = "upper"
	LayoutTernaryAaxisTickfontTextcaseLower    LayoutTernaryAaxisTickfontTextcase = "lower"
)

// LayoutTernaryAaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.variant
type LayoutTernaryAaxisTickfontVariant string

const (
	LayoutTernaryAaxisTickfontVariantNormal        LayoutTernaryAaxisTickfontVariant = "normal"
	LayoutTernaryAaxisTickfontVariantSmallCaps     LayoutTernaryAaxisTickfontVariant = "small-caps"
	LayoutTernaryAaxisTickfontVariantAllSmallCaps  LayoutTernaryAaxisTickfontVariant = "all-small-caps"
	LayoutTernaryAaxisTickfontVariantAllPetiteCaps LayoutTernaryAaxisTickfontVariant = "all-petite-caps"
	LayoutTernaryAaxisTickfontVariantPetiteCaps    LayoutTernaryAaxisTickfontVariant = "petite-caps"
	LayoutTernaryAaxisTickfontVariantUnicase       LayoutTernaryAaxisTickfontVariant = "unicase"
)

// LayoutTernaryAaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.ternary.aaxis.tickmode
type LayoutTernaryAaxisTickmode string

const (
	LayoutTernaryAaxisTickmodeAuto   LayoutTernaryAaxisTickmode = "auto"
	LayoutTernaryAaxisTickmodeLinear LayoutTernaryAaxisTickmode = "linear"
	LayoutTernaryAaxisTickmodeArray  LayoutTernaryAaxisTickmode = "array"
)

// LayoutTernaryAaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.ternary.aaxis.ticks
type LayoutTernaryAaxisTicks string

const (
	LayoutTernaryAaxisTicksOutside LayoutTernaryAaxisTicks = "outside"
	LayoutTernaryAaxisTicksInside  LayoutTernaryAaxisTicks = "inside"
	LayoutTernaryAaxisTicksEmpty   LayoutTernaryAaxisTicks = ""
)

// LayoutTernaryAaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.ternary.aaxis.title.font.style
type LayoutTernaryAaxisTitleFontStyle string

const (
	LayoutTernaryAaxisTitleFontStyleNormal LayoutTernaryAaxisTitleFontStyle = "normal"
	LayoutTernaryAaxisTitleFontStyleItalic LayoutTernaryAaxisTitleFontStyle = "italic"
)

// LayoutTernaryAaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.ternary.aaxis.title.font.textcase
type LayoutTernaryAaxisTitleFontTextcase string

const (
	LayoutTernaryAaxisTitleFontTextcaseNormal   LayoutTernaryAaxisTitleFontTextcase = "normal"
	LayoutTernaryAaxisTitleFontTextcaseWordCaps LayoutTernaryAaxisTitleFontTextcase = "word caps"
	LayoutTernaryAaxisTitleFontTextcaseUpper    LayoutTernaryAaxisTitleFontTextcase = "upper"
	LayoutTernaryAaxisTitleFontTextcaseLower    LayoutTernaryAaxisTitleFontTextcase = "lower"
)

// LayoutTernaryAaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.ternary.aaxis.title.font.variant
type LayoutTernaryAaxisTitleFontVariant string

const (
	LayoutTernaryAaxisTitleFontVariantNormal        LayoutTernaryAaxisTitleFontVariant = "normal"
	LayoutTernaryAaxisTitleFontVariantSmallCaps     LayoutTernaryAaxisTitleFontVariant = "small-caps"
	LayoutTernaryAaxisTitleFontVariantAllSmallCaps  LayoutTernaryAaxisTitleFontVariant = "all-small-caps"
	LayoutTernaryAaxisTitleFontVariantAllPetiteCaps LayoutTernaryAaxisTitleFontVariant = "all-petite-caps"
	LayoutTernaryAaxisTitleFontVariantPetiteCaps    LayoutTernaryAaxisTitleFontVariant = "petite-caps"
	LayoutTernaryAaxisTitleFontVariantUnicase       LayoutTernaryAaxisTitleFontVariant = "unicase"
)

// LayoutTernaryBaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.ternary.baxis.exponentformat
type LayoutTernaryBaxisExponentformat string

const (
	LayoutTernaryBaxisExponentformatNone  LayoutTernaryBaxisExponentformat = "none"
	LayoutTernaryBaxisExponentformatE1    LayoutTernaryBaxisExponentformat = "e"
	LayoutTernaryBaxisExponentformatE2    LayoutTernaryBaxisExponentformat = "E"
	LayoutTernaryBaxisExponentformatPower LayoutTernaryBaxisExponentformat = "power"
	LayoutTernaryBaxisExponentformatSI    LayoutTernaryBaxisExponentformat = "SI"
	LayoutTernaryBaxisExponentformatB     LayoutTernaryBaxisExponentformat = "B"
)

// LayoutTernaryBaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.ternary.baxis.layer
type LayoutTernaryBaxisLayer string

const (
	LayoutTernaryBaxisLayerAboveTraces LayoutTernaryBaxisLayer = "above traces"
	LayoutTernaryBaxisLayerBelowTraces LayoutTernaryBaxisLayer = "below traces"
)

// LayoutTernaryBaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.ternary.baxis.showexponent
type LayoutTernaryBaxisShowexponent string

const (
	LayoutTernaryBaxisShowexponentAll   LayoutTernaryBaxisShowexponent = "all"
	LayoutTernaryBaxisShowexponentFirst LayoutTernaryBaxisShowexponent = "first"
	LayoutTernaryBaxisShowexponentLast  LayoutTernaryBaxisShowexponent = "last"
	LayoutTernaryBaxisShowexponentNone  LayoutTernaryBaxisShowexponent = "none"
)

// LayoutTernaryBaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.ternary.baxis.showtickprefix
type LayoutTernaryBaxisShowtickprefix string

const (
	LayoutTernaryBaxisShowtickprefixAll   LayoutTernaryBaxisShowtickprefix = "all"
	LayoutTernaryBaxisShowtickprefixFirst LayoutTernaryBaxisShowtickprefix = "first"
	LayoutTernaryBaxisShowtickprefixLast  LayoutTernaryBaxisShowtickprefix = "last"
	LayoutTernaryBaxisShowtickprefixNone  LayoutTernaryBaxisShowtickprefix = "none"
)

// LayoutTernaryBaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.ternary.baxis.showticksuffix
type LayoutTernaryBaxisShowticksuffix string

const (
	LayoutTernaryBaxisShowticksuffixAll   LayoutTernaryBaxisShowticksuffix = "all"
	LayoutTernaryBaxisShowticksuffixFirst LayoutTernaryBaxisShowticksuffix = "first"
	LayoutTernaryBaxisShowticksuffixLast  LayoutTernaryBaxisShowticksuffix = "last"
	LayoutTernaryBaxisShowticksuffixNone  LayoutTernaryBaxisShowticksuffix = "none"
)

// LayoutTernaryBaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.ternary.baxis.tickfont.style
type LayoutTernaryBaxisTickfontStyle string

const (
	LayoutTernaryBaxisTickfontStyleNormal LayoutTernaryBaxisTickfontStyle = "normal"
	LayoutTernaryBaxisTickfontStyleItalic LayoutTernaryBaxisTickfontStyle = "italic"
)

// LayoutTernaryBaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.ternary.baxis.tickfont.textcase
type LayoutTernaryBaxisTickfontTextcase string

const (
	LayoutTernaryBaxisTickfontTextcaseNormal   LayoutTernaryBaxisTickfontTextcase = "normal"
	LayoutTernaryBaxisTickfontTextcaseWordCaps LayoutTernaryBaxisTickfontTextcase = "word caps"
	LayoutTernaryBaxisTickfontTextcaseUpper    LayoutTernaryBaxisTickfontTextcase = "upper"
	LayoutTernaryBaxisTickfontTextcaseLower    LayoutTernaryBaxisTickfontTextcase = "lower"
)

// LayoutTernaryBaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.ternary.baxis.tickfont.variant
type LayoutTernaryBaxisTickfontVariant string

const (
	LayoutTernaryBaxisTickfontVariantNormal        LayoutTernaryBaxisTickfontVariant = "normal"
	LayoutTernaryBaxisTickfontVariantSmallCaps     LayoutTernaryBaxisTickfontVariant = "small-caps"
	LayoutTernaryBaxisTickfontVariantAllSmallCaps  LayoutTernaryBaxisTickfontVariant = "all-small-caps"
	LayoutTernaryBaxisTickfontVariantAllPetiteCaps LayoutTernaryBaxisTickfontVariant = "all-petite-caps"
	LayoutTernaryBaxisTickfontVariantPetiteCaps    LayoutTernaryBaxisTickfontVariant = "petite-caps"
	LayoutTernaryBaxisTickfontVariantUnicase       LayoutTernaryBaxisTickfontVariant = "unicase"
)

// LayoutTernaryBaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.ternary.baxis.tickmode
type LayoutTernaryBaxisTickmode string

const (
	LayoutTernaryBaxisTickmodeAuto   LayoutTernaryBaxisTickmode = "auto"
	LayoutTernaryBaxisTickmodeLinear LayoutTernaryBaxisTickmode = "linear"
	LayoutTernaryBaxisTickmodeArray  LayoutTernaryBaxisTickmode = "array"
)

// LayoutTernaryBaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.ternary.baxis.ticks
type LayoutTernaryBaxisTicks string

const (
	LayoutTernaryBaxisTicksOutside LayoutTernaryBaxisTicks = "outside"
	LayoutTernaryBaxisTicksInside  LayoutTernaryBaxisTicks = "inside"
	LayoutTernaryBaxisTicksEmpty   LayoutTernaryBaxisTicks = ""
)

// LayoutTernaryBaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.ternary.baxis.title.font.style
type LayoutTernaryBaxisTitleFontStyle string

const (
	LayoutTernaryBaxisTitleFontStyleNormal LayoutTernaryBaxisTitleFontStyle = "normal"
	LayoutTernaryBaxisTitleFontStyleItalic LayoutTernaryBaxisTitleFontStyle = "italic"
)

// LayoutTernaryBaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.ternary.baxis.title.font.textcase
type LayoutTernaryBaxisTitleFontTextcase string

const (
	LayoutTernaryBaxisTitleFontTextcaseNormal   LayoutTernaryBaxisTitleFontTextcase = "normal"
	LayoutTernaryBaxisTitleFontTextcaseWordCaps LayoutTernaryBaxisTitleFontTextcase = "word caps"
	LayoutTernaryBaxisTitleFontTextcaseUpper    LayoutTernaryBaxisTitleFontTextcase = "upper"
	LayoutTernaryBaxisTitleFontTextcaseLower    LayoutTernaryBaxisTitleFontTextcase = "lower"
)

// LayoutTernaryBaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.ternary.baxis.title.font.variant
type LayoutTernaryBaxisTitleFontVariant string

const (
	LayoutTernaryBaxisTitleFontVariantNormal        LayoutTernaryBaxisTitleFontVariant = "normal"
	LayoutTernaryBaxisTitleFontVariantSmallCaps     LayoutTernaryBaxisTitleFontVariant = "small-caps"
	LayoutTernaryBaxisTitleFontVariantAllSmallCaps  LayoutTernaryBaxisTitleFontVariant = "all-small-caps"
	LayoutTernaryBaxisTitleFontVariantAllPetiteCaps LayoutTernaryBaxisTitleFontVariant = "all-petite-caps"
	LayoutTernaryBaxisTitleFontVariantPetiteCaps    LayoutTernaryBaxisTitleFontVariant = "petite-caps"
	LayoutTernaryBaxisTitleFontVariantUnicase       LayoutTernaryBaxisTitleFontVariant = "unicase"
)

// LayoutTernaryCaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.ternary.caxis.exponentformat
type LayoutTernaryCaxisExponentformat string

const (
	LayoutTernaryCaxisExponentformatNone  LayoutTernaryCaxisExponentformat = "none"
	LayoutTernaryCaxisExponentformatE1    LayoutTernaryCaxisExponentformat = "e"
	LayoutTernaryCaxisExponentformatE2    LayoutTernaryCaxisExponentformat = "E"
	LayoutTernaryCaxisExponentformatPower LayoutTernaryCaxisExponentformat = "power"
	LayoutTernaryCaxisExponentformatSI    LayoutTernaryCaxisExponentformat = "SI"
	LayoutTernaryCaxisExponentformatB     LayoutTernaryCaxisExponentformat = "B"
)

// LayoutTernaryCaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.ternary.caxis.layer
type LayoutTernaryCaxisLayer string

const (
	LayoutTernaryCaxisLayerAboveTraces LayoutTernaryCaxisLayer = "above traces"
	LayoutTernaryCaxisLayerBelowTraces LayoutTernaryCaxisLayer = "below traces"
)

// LayoutTernaryCaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.ternary.caxis.showexponent
type LayoutTernaryCaxisShowexponent string

const (
	LayoutTernaryCaxisShowexponentAll   LayoutTernaryCaxisShowexponent = "all"
	LayoutTernaryCaxisShowexponentFirst LayoutTernaryCaxisShowexponent = "first"
	LayoutTernaryCaxisShowexponentLast  LayoutTernaryCaxisShowexponent = "last"
	LayoutTernaryCaxisShowexponentNone  LayoutTernaryCaxisShowexponent = "none"
)

// LayoutTernaryCaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.ternary.caxis.showtickprefix
type LayoutTernaryCaxisShowtickprefix string

const (
	LayoutTernaryCaxisShowtickprefixAll   LayoutTernaryCaxisShowtickprefix = "all"
	LayoutTernaryCaxisShowtickprefixFirst LayoutTernaryCaxisShowtickprefix = "first"
	LayoutTernaryCaxisShowtickprefixLast  LayoutTernaryCaxisShowtickprefix = "last"
	LayoutTernaryCaxisShowtickprefixNone  LayoutTernaryCaxisShowtickprefix = "none"
)

// LayoutTernaryCaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.ternary.caxis.showticksuffix
type LayoutTernaryCaxisShowticksuffix string

const (
	LayoutTernaryCaxisShowticksuffixAll   LayoutTernaryCaxisShowticksuffix = "all"
	LayoutTernaryCaxisShowticksuffixFirst LayoutTernaryCaxisShowticksuffix = "first"
	LayoutTernaryCaxisShowticksuffixLast  LayoutTernaryCaxisShowticksuffix = "last"
	LayoutTernaryCaxisShowticksuffixNone  LayoutTernaryCaxisShowticksuffix = "none"
)

// LayoutTernaryCaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.ternary.caxis.tickfont.style
type LayoutTernaryCaxisTickfontStyle string

const (
	LayoutTernaryCaxisTickfontStyleNormal LayoutTernaryCaxisTickfontStyle = "normal"
	LayoutTernaryCaxisTickfontStyleItalic LayoutTernaryCaxisTickfontStyle = "italic"
)

// LayoutTernaryCaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.ternary.caxis.tickfont.textcase
type LayoutTernaryCaxisTickfontTextcase string

const (
	LayoutTernaryCaxisTickfontTextcaseNormal   LayoutTernaryCaxisTickfontTextcase = "normal"
	LayoutTernaryCaxisTickfontTextcaseWordCaps LayoutTernaryCaxisTickfontTextcase = "word caps"
	LayoutTernaryCaxisTickfontTextcaseUpper    LayoutTernaryCaxisTickfontTextcase = "upper"
	LayoutTernaryCaxisTickfontTextcaseLower    LayoutTernaryCaxisTickfontTextcase = "lower"
)

// LayoutTernaryCaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.ternary.caxis.tickfont.variant
type LayoutTernaryCaxisTickfontVariant string

const (
	LayoutTernaryCaxisTickfontVariantNormal        LayoutTernaryCaxisTickfontVariant = "normal"
	LayoutTernaryCaxisTickfontVariantSmallCaps     LayoutTernaryCaxisTickfontVariant = "small-caps"
	LayoutTernaryCaxisTickfontVariantAllSmallCaps  LayoutTernaryCaxisTickfontVariant = "all-small-caps"
	LayoutTernaryCaxisTickfontVariantAllPetiteCaps LayoutTernaryCaxisTickfontVariant = "all-petite-caps"
	LayoutTernaryCaxisTickfontVariantPetiteCaps    LayoutTernaryCaxisTickfontVariant = "petite-caps"
	LayoutTernaryCaxisTickfontVariantUnicase       LayoutTernaryCaxisTickfontVariant = "unicase"
)

// LayoutTernaryCaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.ternary.caxis.tickmode
type LayoutTernaryCaxisTickmode string

const (
	LayoutTernaryCaxisTickmodeAuto   LayoutTernaryCaxisTickmode = "auto"
	LayoutTernaryCaxisTickmodeLinear LayoutTernaryCaxisTickmode = "linear"
	LayoutTernaryCaxisTickmodeArray  LayoutTernaryCaxisTickmode = "array"
)

// LayoutTernaryCaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.ternary.caxis.ticks
type LayoutTernaryCaxisTicks string

const (
	LayoutTernaryCaxisTicksOutside LayoutTernaryCaxisTicks = "outside"
	LayoutTernaryCaxisTicksInside  LayoutTernaryCaxisTicks = "inside"
	LayoutTernaryCaxisTicksEmpty   LayoutTernaryCaxisTicks = ""
)

// LayoutTernaryCaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.ternary.caxis.title.font.style
type LayoutTernaryCaxisTitleFontStyle string

const (
	LayoutTernaryCaxisTitleFontStyleNormal LayoutTernaryCaxisTitleFontStyle = "normal"
	LayoutTernaryCaxisTitleFontStyleItalic LayoutTernaryCaxisTitleFontStyle = "italic"
)

// LayoutTernaryCaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.ternary.caxis.title.font.textcase
type LayoutTernaryCaxisTitleFontTextcase string

const (
	LayoutTernaryCaxisTitleFontTextcaseNormal   LayoutTernaryCaxisTitleFontTextcase = "normal"
	LayoutTernaryCaxisTitleFontTextcaseWordCaps LayoutTernaryCaxisTitleFontTextcase = "word caps"
	LayoutTernaryCaxisTitleFontTextcaseUpper    LayoutTernaryCaxisTitleFontTextcase = "upper"
	LayoutTernaryCaxisTitleFontTextcaseLower    LayoutTernaryCaxisTitleFontTextcase = "lower"
)

// LayoutTernaryCaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.ternary.caxis.title.font.variant
type LayoutTernaryCaxisTitleFontVariant string

const (
	LayoutTernaryCaxisTitleFontVariantNormal        LayoutTernaryCaxisTitleFontVariant = "normal"
	LayoutTernaryCaxisTitleFontVariantSmallCaps     LayoutTernaryCaxisTitleFontVariant = "small-caps"
	LayoutTernaryCaxisTitleFontVariantAllSmallCaps  LayoutTernaryCaxisTitleFontVariant = "all-small-caps"
	LayoutTernaryCaxisTitleFontVariantAllPetiteCaps LayoutTernaryCaxisTitleFontVariant = "all-petite-caps"
	LayoutTernaryCaxisTitleFontVariantPetiteCaps    LayoutTernaryCaxisTitleFontVariant = "petite-caps"
	LayoutTernaryCaxisTitleFontVariantUnicase       LayoutTernaryCaxisTitleFontVariant = "unicase"
)

// LayoutTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.title.font.style
type LayoutTitleFontStyle string

const (
	LayoutTitleFontStyleNormal LayoutTitleFontStyle = "normal"
	LayoutTitleFontStyleItalic LayoutTitleFontStyle = "italic"
)

// LayoutTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.title.font.textcase
type LayoutTitleFontTextcase string

const (
	LayoutTitleFontTextcaseNormal   LayoutTitleFontTextcase = "normal"
	LayoutTitleFontTextcaseWordCaps LayoutTitleFontTextcase = "word caps"
	LayoutTitleFontTextcaseUpper    LayoutTitleFontTextcase = "upper"
	LayoutTitleFontTextcaseLower    LayoutTitleFontTextcase = "lower"
)

// LayoutTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.title.font.variant
type LayoutTitleFontVariant string

const (
	LayoutTitleFontVariantNormal        LayoutTitleFontVariant = "normal"
	LayoutTitleFontVariantSmallCaps     LayoutTitleFontVariant = "small-caps"
	LayoutTitleFontVariantAllSmallCaps  LayoutTitleFontVariant = "all-small-caps"
	LayoutTitleFontVariantAllPetiteCaps LayoutTitleFontVariant = "all-petite-caps"
	LayoutTitleFontVariantPetiteCaps    LayoutTitleFontVariant = "petite-caps"
	LayoutTitleFontVariantUnicase       LayoutTitleFontVariant = "unicase"
)

// LayoutTitleSubtitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.title.subtitle.font.style
type LayoutTitleSubtitleFontStyle string

const (
	LayoutTitleSubtitleFontStyleNormal LayoutTitleSubtitleFontStyle = "normal"
	LayoutTitleSubtitleFontStyleItalic LayoutTitleSubtitleFontStyle = "italic"
)

// LayoutTitleSubtitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.title.subtitle.font.textcase
type LayoutTitleSubtitleFontTextcase string

const (
	LayoutTitleSubtitleFontTextcaseNormal   LayoutTitleSubtitleFontTextcase = "normal"
	LayoutTitleSubtitleFontTextcaseWordCaps LayoutTitleSubtitleFontTextcase = "word caps"
	LayoutTitleSubtitleFontTextcaseUpper    LayoutTitleSubtitleFontTextcase = "upper"
	LayoutTitleSubtitleFontTextcaseLower    LayoutTitleSubtitleFontTextcase = "lower"
)

// LayoutTitleSubtitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.title.subtitle.font.variant
type LayoutTitleSubtitleFontVariant string

const (
	LayoutTitleSubtitleFontVariantNormal        LayoutTitleSubtitleFontVariant = "normal"
	LayoutTitleSubtitleFontVariantSmallCaps     LayoutTitleSubtitleFontVariant = "small-caps"
	LayoutTitleSubtitleFontVariantAllSmallCaps  LayoutTitleSubtitleFontVariant = "all-small-caps"
	LayoutTitleSubtitleFontVariantAllPetiteCaps LayoutTitleSubtitleFontVariant = "all-petite-caps"
	LayoutTitleSubtitleFontVariantPetiteCaps    LayoutTitleSubtitleFontVariant = "petite-caps"
	LayoutTitleSubtitleFontVariantUnicase       LayoutTitleSubtitleFontVariant = "unicase"
)

// LayoutTitleXanchor Sets the title's horizontal alignment with respect to its x position. *left* means that the title starts at x, *right* means that the title ends at x and *center* means that the title's center is at x. *auto* divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.
// .schema.layout.layoutAttributes.title.xanchor
type LayoutTitleXanchor string

const (
	LayoutTitleXanchorAuto   LayoutTitleXanchor = "auto"
	LayoutTitleXanchorLeft   LayoutTitleXanchor = "left"
	LayoutTitleXanchorCenter LayoutTitleXanchor = "center"
	LayoutTitleXanchorRight  LayoutTitleXanchor = "right"
)

// LayoutTitleXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
// .schema.layout.layoutAttributes.title.xref
type LayoutTitleXref string

const (
	LayoutTitleXrefContainer LayoutTitleXref = "container"
	LayoutTitleXrefPaper     LayoutTitleXref = "paper"
)

// LayoutTitleYanchor Sets the title's vertical alignment with respect to its y position. *top* means that the title's cap line is at y, *bottom* means that the title's baseline is at y and *middle* means that the title's midline is at y. *auto* divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.
// .schema.layout.layoutAttributes.title.yanchor
type LayoutTitleYanchor string

const (
	LayoutTitleYanchorAuto   LayoutTitleYanchor = "auto"
	LayoutTitleYanchorTop    LayoutTitleYanchor = "top"
	LayoutTitleYanchorMiddle LayoutTitleYanchor = "middle"
	LayoutTitleYanchorBottom LayoutTitleYanchor = "bottom"
)

// LayoutTitleYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
// .schema.layout.layoutAttributes.title.yref
type LayoutTitleYref string

const (
	LayoutTitleYrefContainer LayoutTitleYref = "container"
	LayoutTitleYrefPaper     LayoutTitleYref = "paper"
)

// LayoutTransitionEasing The easing function used for the transition
// .schema.layout.layoutAttributes.transition.easing
type LayoutTransitionEasing string

const (
	LayoutTransitionEasingLinear       LayoutTransitionEasing = "linear"
	LayoutTransitionEasingQuad         LayoutTransitionEasing = "quad"
	LayoutTransitionEasingCubic        LayoutTransitionEasing = "cubic"
	LayoutTransitionEasingSin          LayoutTransitionEasing = "sin"
	LayoutTransitionEasingExp          LayoutTransitionEasing = "exp"
	LayoutTransitionEasingCircle       LayoutTransitionEasing = "circle"
	LayoutTransitionEasingElastic      LayoutTransitionEasing = "elastic"
	LayoutTransitionEasingBack         LayoutTransitionEasing = "back"
	LayoutTransitionEasingBounce       LayoutTransitionEasing = "bounce"
	LayoutTransitionEasingLinearIn     LayoutTransitionEasing = "linear-in"
	LayoutTransitionEasingQuadIn       LayoutTransitionEasing = "quad-in"
	LayoutTransitionEasingCubicIn      LayoutTransitionEasing = "cubic-in"
	LayoutTransitionEasingSinIn        LayoutTransitionEasing = "sin-in"
	LayoutTransitionEasingExpIn        LayoutTransitionEasing = "exp-in"
	LayoutTransitionEasingCircleIn     LayoutTransitionEasing = "circle-in"
	LayoutTransitionEasingElasticIn    LayoutTransitionEasing = "elastic-in"
	LayoutTransitionEasingBackIn       LayoutTransitionEasing = "back-in"
	LayoutTransitionEasingBounceIn     LayoutTransitionEasing = "bounce-in"
	LayoutTransitionEasingLinearOut    LayoutTransitionEasing = "linear-out"
	LayoutTransitionEasingQuadOut      LayoutTransitionEasing = "quad-out"
	LayoutTransitionEasingCubicOut     LayoutTransitionEasing = "cubic-out"
	LayoutTransitionEasingSinOut       LayoutTransitionEasing = "sin-out"
	LayoutTransitionEasingExpOut       LayoutTransitionEasing = "exp-out"
	LayoutTransitionEasingCircleOut    LayoutTransitionEasing = "circle-out"
	LayoutTransitionEasingElasticOut   LayoutTransitionEasing = "elastic-out"
	LayoutTransitionEasingBackOut      LayoutTransitionEasing = "back-out"
	LayoutTransitionEasingBounceOut    LayoutTransitionEasing = "bounce-out"
	LayoutTransitionEasingLinearInOut  LayoutTransitionEasing = "linear-in-out"
	LayoutTransitionEasingQuadInOut    LayoutTransitionEasing = "quad-in-out"
	LayoutTransitionEasingCubicInOut   LayoutTransitionEasing = "cubic-in-out"
	LayoutTransitionEasingSinInOut     LayoutTransitionEasing = "sin-in-out"
	LayoutTransitionEasingExpInOut     LayoutTransitionEasing = "exp-in-out"
	LayoutTransitionEasingCircleInOut  LayoutTransitionEasing = "circle-in-out"
	LayoutTransitionEasingElasticInOut LayoutTransitionEasing = "elastic-in-out"
	LayoutTransitionEasingBackInOut    LayoutTransitionEasing = "back-in-out"
	LayoutTransitionEasingBounceInOut  LayoutTransitionEasing = "bounce-in-out"
)

// LayoutTransitionOrdering Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.
// .schema.layout.layoutAttributes.transition.ordering
type LayoutTransitionOrdering string

const (
	LayoutTransitionOrderingLayoutFirst LayoutTransitionOrdering = "layout first"
	LayoutTransitionOrderingTracesFirst LayoutTransitionOrdering = "traces first"
)

// LayoutUniformtextMode Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using *hide* option hides the text; and using *show* option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.
// .schema.layout.layoutAttributes.uniformtext.mode
type LayoutUniformtextMode interface{}

var (
	LayoutUniformtextModeFalse LayoutUniformtextMode = false
	LayoutUniformtextModeHide  LayoutUniformtextMode = "hide"
	LayoutUniformtextModeShow  LayoutUniformtextMode = "show"
)

// LayoutViolinmode Determines how violins at the same location coordinate are displayed on the graph. If *group*, the violins are plotted next to one another centered around the shared location. If *overlay*, the violins are plotted over one another, you might need to set *opacity* to see them multiple violins. Has no effect on traces that have *width* set.
// .schema.traces.violin.layoutAttributes.violinmode
type LayoutViolinmode string

const (
	ViolinViolinmodeGroup   LayoutViolinmode = "group"
	ViolinViolinmodeOverlay LayoutViolinmode = "overlay"
)

// LayoutWaterfallmode Determines how bars at the same location coordinate are displayed on the graph. With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
// .schema.traces.waterfall.layoutAttributes.waterfallmode
type LayoutWaterfallmode string

const (
	WaterfallWaterfallmodeGroup   LayoutWaterfallmode = "group"
	WaterfallWaterfallmodeOverlay LayoutWaterfallmode = "overlay"
)

// LayoutXaxisAnchor If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
// .schema.layout.layoutAttributes.xaxis.anchor
type LayoutXaxisAnchor string

const (
	LayoutXaxisAnchorFree                                                                                                                    LayoutXaxisAnchor = "free"
	LayoutXaxisAnchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisAnchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisAnchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisAnchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutXaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
// .schema.layout.layoutAttributes.xaxis.autorange
type LayoutXaxisAutorange interface{}

var (
	LayoutXaxisAutorangeTrue        LayoutXaxisAutorange = true
	LayoutXaxisAutorangeFalse       LayoutXaxisAutorange = false
	LayoutXaxisAutorangeReversed    LayoutXaxisAutorange = "reversed"
	LayoutXaxisAutorangeMinReversed LayoutXaxisAutorange = "min reversed"
	LayoutXaxisAutorangeMaxReversed LayoutXaxisAutorange = "max reversed"
	LayoutXaxisAutorangeMin         LayoutXaxisAutorange = "min"
	LayoutXaxisAutorangeMax         LayoutXaxisAutorange = "max"
)

// LayoutXaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
// .schema.layout.layoutAttributes.xaxis.autotypenumbers
type LayoutXaxisAutotypenumbers string

const (
	LayoutXaxisAutotypenumbersConvertTypes LayoutXaxisAutotypenumbers = "convert types"
	LayoutXaxisAutotypenumbersStrict       LayoutXaxisAutotypenumbers = "strict"
)

// LayoutXaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
// .schema.layout.layoutAttributes.xaxis.calendar
type LayoutXaxisCalendar string

const (
	LayoutXaxisCalendarChinese    LayoutXaxisCalendar = "chinese"
	LayoutXaxisCalendarCoptic     LayoutXaxisCalendar = "coptic"
	LayoutXaxisCalendarDiscworld  LayoutXaxisCalendar = "discworld"
	LayoutXaxisCalendarEthiopian  LayoutXaxisCalendar = "ethiopian"
	LayoutXaxisCalendarGregorian  LayoutXaxisCalendar = "gregorian"
	LayoutXaxisCalendarHebrew     LayoutXaxisCalendar = "hebrew"
	LayoutXaxisCalendarIslamic    LayoutXaxisCalendar = "islamic"
	LayoutXaxisCalendarJalali     LayoutXaxisCalendar = "jalali"
	LayoutXaxisCalendarJulian     LayoutXaxisCalendar = "julian"
	LayoutXaxisCalendarMayan      LayoutXaxisCalendar = "mayan"
	LayoutXaxisCalendarNanakshahi LayoutXaxisCalendar = "nanakshahi"
	LayoutXaxisCalendarNepali     LayoutXaxisCalendar = "nepali"
	LayoutXaxisCalendarPersian    LayoutXaxisCalendar = "persian"
	LayoutXaxisCalendarTaiwan     LayoutXaxisCalendar = "taiwan"
	LayoutXaxisCalendarThai       LayoutXaxisCalendar = "thai"
	LayoutXaxisCalendarUmmalqura  LayoutXaxisCalendar = "ummalqura"
)

// LayoutXaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
// .schema.layout.layoutAttributes.xaxis.categoryorder
type LayoutXaxisCategoryorder string

const (
	LayoutXaxisCategoryorderTrace                   LayoutXaxisCategoryorder = "trace"
	LayoutXaxisCategoryorderCategoryAscending       LayoutXaxisCategoryorder = "category ascending"
	LayoutXaxisCategoryorderCategoryDescending      LayoutXaxisCategoryorder = "category descending"
	LayoutXaxisCategoryorderArray                   LayoutXaxisCategoryorder = "array"
	LayoutXaxisCategoryorderTotalAscending          LayoutXaxisCategoryorder = "total ascending"
	LayoutXaxisCategoryorderTotalDescending         LayoutXaxisCategoryorder = "total descending"
	LayoutXaxisCategoryorderMinAscending            LayoutXaxisCategoryorder = "min ascending"
	LayoutXaxisCategoryorderMinDescending           LayoutXaxisCategoryorder = "min descending"
	LayoutXaxisCategoryorderMaxAscending            LayoutXaxisCategoryorder = "max ascending"
	LayoutXaxisCategoryorderMaxDescending           LayoutXaxisCategoryorder = "max descending"
	LayoutXaxisCategoryorderSumAscending            LayoutXaxisCategoryorder = "sum ascending"
	LayoutXaxisCategoryorderSumDescending           LayoutXaxisCategoryorder = "sum descending"
	LayoutXaxisCategoryorderMeanAscending           LayoutXaxisCategoryorder = "mean ascending"
	LayoutXaxisCategoryorderMeanDescending          LayoutXaxisCategoryorder = "mean descending"
	LayoutXaxisCategoryorderGeometricMeanAscending  LayoutXaxisCategoryorder = "geometric mean ascending"
	LayoutXaxisCategoryorderGeometricMeanDescending LayoutXaxisCategoryorder = "geometric mean descending"
	LayoutXaxisCategoryorderMedianAscending         LayoutXaxisCategoryorder = "median ascending"
	LayoutXaxisCategoryorderMedianDescending        LayoutXaxisCategoryorder = "median descending"
)

// LayoutXaxisConstrain If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
// .schema.layout.layoutAttributes.xaxis.constrain
type LayoutXaxisConstrain string

const (
	LayoutXaxisConstrainRange  LayoutXaxisConstrain = "range"
	LayoutXaxisConstrainDomain LayoutXaxisConstrain = "domain"
)

// LayoutXaxisConstraintoward If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
// .schema.layout.layoutAttributes.xaxis.constraintoward
type LayoutXaxisConstraintoward string

const (
	LayoutXaxisConstraintowardLeft   LayoutXaxisConstraintoward = "left"
	LayoutXaxisConstraintowardCenter LayoutXaxisConstraintoward = "center"
	LayoutXaxisConstraintowardRight  LayoutXaxisConstraintoward = "right"
	LayoutXaxisConstraintowardTop    LayoutXaxisConstraintoward = "top"
	LayoutXaxisConstraintowardMiddle LayoutXaxisConstraintoward = "middle"
	LayoutXaxisConstraintowardBottom LayoutXaxisConstraintoward = "bottom"
)

// LayoutXaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.xaxis.exponentformat
type LayoutXaxisExponentformat string

const (
	LayoutXaxisExponentformatNone  LayoutXaxisExponentformat = "none"
	LayoutXaxisExponentformatE1    LayoutXaxisExponentformat = "e"
	LayoutXaxisExponentformatE2    LayoutXaxisExponentformat = "E"
	LayoutXaxisExponentformatPower LayoutXaxisExponentformat = "power"
	LayoutXaxisExponentformatSI    LayoutXaxisExponentformat = "SI"
	LayoutXaxisExponentformatB     LayoutXaxisExponentformat = "B"
)

// LayoutXaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.xaxis.layer
type LayoutXaxisLayer string

const (
	LayoutXaxisLayerAboveTraces LayoutXaxisLayer = "above traces"
	LayoutXaxisLayerBelowTraces LayoutXaxisLayer = "below traces"
)

// LayoutXaxisMatches If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
// .schema.layout.layoutAttributes.xaxis.matches
type LayoutXaxisMatches string

const (
	LayoutXaxisMatchesSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisMatches = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisMatchesSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisMatches = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutXaxisMinorTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.xaxis.minor.tickmode
type LayoutXaxisMinorTickmode string

const (
	LayoutXaxisMinorTickmodeAuto   LayoutXaxisMinorTickmode = "auto"
	LayoutXaxisMinorTickmodeLinear LayoutXaxisMinorTickmode = "linear"
	LayoutXaxisMinorTickmodeArray  LayoutXaxisMinorTickmode = "array"
)

// LayoutXaxisMinorTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.xaxis.minor.ticks
type LayoutXaxisMinorTicks string

const (
	LayoutXaxisMinorTicksOutside LayoutXaxisMinorTicks = "outside"
	LayoutXaxisMinorTicksInside  LayoutXaxisMinorTicks = "inside"
	LayoutXaxisMinorTicksEmpty   LayoutXaxisMinorTicks = ""
)

// LayoutXaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
// .schema.layout.layoutAttributes.xaxis.mirror
type LayoutXaxisMirror interface{}

var (
	LayoutXaxisMirrorTrue     LayoutXaxisMirror = true
	LayoutXaxisMirrorTicks    LayoutXaxisMirror = "ticks"
	LayoutXaxisMirrorFalse    LayoutXaxisMirror = false
	LayoutXaxisMirrorAll      LayoutXaxisMirror = "all"
	LayoutXaxisMirrorAllticks LayoutXaxisMirror = "allticks"
)

// LayoutXaxisOverlaying If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
// .schema.layout.layoutAttributes.xaxis.overlaying
type LayoutXaxisOverlaying string

const (
	LayoutXaxisOverlayingFree                                                                                                                    LayoutXaxisOverlaying = "free"
	LayoutXaxisOverlayingSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisOverlaying = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisOverlayingSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisOverlaying = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutXaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
// .schema.layout.layoutAttributes.xaxis.rangemode
type LayoutXaxisRangemode string

const (
	LayoutXaxisRangemodeNormal      LayoutXaxisRangemode = "normal"
	LayoutXaxisRangemodeTozero      LayoutXaxisRangemode = "tozero"
	LayoutXaxisRangemodeNonnegative LayoutXaxisRangemode = "nonnegative"
)

// LayoutXaxisRangeselectorFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.xaxis.rangeselector.font.style
type LayoutXaxisRangeselectorFontStyle string

const (
	LayoutXaxisRangeselectorFontStyleNormal LayoutXaxisRangeselectorFontStyle = "normal"
	LayoutXaxisRangeselectorFontStyleItalic LayoutXaxisRangeselectorFontStyle = "italic"
)

// LayoutXaxisRangeselectorFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.xaxis.rangeselector.font.textcase
type LayoutXaxisRangeselectorFontTextcase string

const (
	LayoutXaxisRangeselectorFontTextcaseNormal   LayoutXaxisRangeselectorFontTextcase = "normal"
	LayoutXaxisRangeselectorFontTextcaseWordCaps LayoutXaxisRangeselectorFontTextcase = "word caps"
	LayoutXaxisRangeselectorFontTextcaseUpper    LayoutXaxisRangeselectorFontTextcase = "upper"
	LayoutXaxisRangeselectorFontTextcaseLower    LayoutXaxisRangeselectorFontTextcase = "lower"
)

// LayoutXaxisRangeselectorFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.xaxis.rangeselector.font.variant
type LayoutXaxisRangeselectorFontVariant string

const (
	LayoutXaxisRangeselectorFontVariantNormal        LayoutXaxisRangeselectorFontVariant = "normal"
	LayoutXaxisRangeselectorFontVariantSmallCaps     LayoutXaxisRangeselectorFontVariant = "small-caps"
	LayoutXaxisRangeselectorFontVariantAllSmallCaps  LayoutXaxisRangeselectorFontVariant = "all-small-caps"
	LayoutXaxisRangeselectorFontVariantAllPetiteCaps LayoutXaxisRangeselectorFontVariant = "all-petite-caps"
	LayoutXaxisRangeselectorFontVariantPetiteCaps    LayoutXaxisRangeselectorFontVariant = "petite-caps"
	LayoutXaxisRangeselectorFontVariantUnicase       LayoutXaxisRangeselectorFontVariant = "unicase"
)

// LayoutXaxisRangeselectorXanchor Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
// .schema.layout.layoutAttributes.xaxis.rangeselector.xanchor
type LayoutXaxisRangeselectorXanchor string

const (
	LayoutXaxisRangeselectorXanchorAuto   LayoutXaxisRangeselectorXanchor = "auto"
	LayoutXaxisRangeselectorXanchorLeft   LayoutXaxisRangeselectorXanchor = "left"
	LayoutXaxisRangeselectorXanchorCenter LayoutXaxisRangeselectorXanchor = "center"
	LayoutXaxisRangeselectorXanchorRight  LayoutXaxisRangeselectorXanchor = "right"
)

// LayoutXaxisRangeselectorYanchor Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
// .schema.layout.layoutAttributes.xaxis.rangeselector.yanchor
type LayoutXaxisRangeselectorYanchor string

const (
	LayoutXaxisRangeselectorYanchorAuto   LayoutXaxisRangeselectorYanchor = "auto"
	LayoutXaxisRangeselectorYanchorTop    LayoutXaxisRangeselectorYanchor = "top"
	LayoutXaxisRangeselectorYanchorMiddle LayoutXaxisRangeselectorYanchor = "middle"
	LayoutXaxisRangeselectorYanchorBottom LayoutXaxisRangeselectorYanchor = "bottom"
)

// LayoutXaxisRangesliderYaxisRangemode Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If *auto*, the autorange will be used. If *fixed*, the `range` is used. If *match*, the current range of the corresponding y-axis on the main subplot is used.
// .schema.layout.layoutAttributes.xaxis.rangeslider.yaxis.rangemode
type LayoutXaxisRangesliderYaxisRangemode string

const (
	LayoutXaxisRangesliderYaxisRangemodeAuto  LayoutXaxisRangesliderYaxisRangemode = "auto"
	LayoutXaxisRangesliderYaxisRangemodeFixed LayoutXaxisRangesliderYaxisRangemode = "fixed"
	LayoutXaxisRangesliderYaxisRangemodeMatch LayoutXaxisRangesliderYaxisRangemode = "match"
)

// LayoutXaxisScaleanchor If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
// .schema.layout.layoutAttributes.xaxis.scaleanchor
type LayoutXaxisScaleanchor interface{}

var (
	LayoutXaxisScaleanchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisScaleanchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisScaleanchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisScaleanchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisScaleanchorFalse                                                                                                                   LayoutXaxisScaleanchor = false
)

// LayoutXaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.xaxis.showexponent
type LayoutXaxisShowexponent string

const (
	LayoutXaxisShowexponentAll   LayoutXaxisShowexponent = "all"
	LayoutXaxisShowexponentFirst LayoutXaxisShowexponent = "first"
	LayoutXaxisShowexponentLast  LayoutXaxisShowexponent = "last"
	LayoutXaxisShowexponentNone  LayoutXaxisShowexponent = "none"
)

// LayoutXaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.xaxis.showtickprefix
type LayoutXaxisShowtickprefix string

const (
	LayoutXaxisShowtickprefixAll   LayoutXaxisShowtickprefix = "all"
	LayoutXaxisShowtickprefixFirst LayoutXaxisShowtickprefix = "first"
	LayoutXaxisShowtickprefixLast  LayoutXaxisShowtickprefix = "last"
	LayoutXaxisShowtickprefixNone  LayoutXaxisShowtickprefix = "none"
)

// LayoutXaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.xaxis.showticksuffix
type LayoutXaxisShowticksuffix string

const (
	LayoutXaxisShowticksuffixAll   LayoutXaxisShowticksuffix = "all"
	LayoutXaxisShowticksuffixFirst LayoutXaxisShowticksuffix = "first"
	LayoutXaxisShowticksuffixLast  LayoutXaxisShowticksuffix = "last"
	LayoutXaxisShowticksuffixNone  LayoutXaxisShowticksuffix = "none"
)

// LayoutXaxisSide Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
// .schema.layout.layoutAttributes.xaxis.side
type LayoutXaxisSide string

const (
	LayoutXaxisSideTop    LayoutXaxisSide = "top"
	LayoutXaxisSideBottom LayoutXaxisSide = "bottom"
	LayoutXaxisSideLeft   LayoutXaxisSide = "left"
	LayoutXaxisSideRight  LayoutXaxisSide = "right"
)

// LayoutXaxisSpikesnap Determines whether spikelines are stuck to the cursor or to the closest datapoints.
// .schema.layout.layoutAttributes.xaxis.spikesnap
type LayoutXaxisSpikesnap string

const (
	LayoutXaxisSpikesnapData        LayoutXaxisSpikesnap = "data"
	LayoutXaxisSpikesnapCursor      LayoutXaxisSpikesnap = "cursor"
	LayoutXaxisSpikesnapHoveredData LayoutXaxisSpikesnap = "hovered data"
)

// LayoutXaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.xaxis.tickfont.style
type LayoutXaxisTickfontStyle string

const (
	LayoutXaxisTickfontStyleNormal LayoutXaxisTickfontStyle = "normal"
	LayoutXaxisTickfontStyleItalic LayoutXaxisTickfontStyle = "italic"
)

// LayoutXaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.xaxis.tickfont.textcase
type LayoutXaxisTickfontTextcase string

const (
	LayoutXaxisTickfontTextcaseNormal   LayoutXaxisTickfontTextcase = "normal"
	LayoutXaxisTickfontTextcaseWordCaps LayoutXaxisTickfontTextcase = "word caps"
	LayoutXaxisTickfontTextcaseUpper    LayoutXaxisTickfontTextcase = "upper"
	LayoutXaxisTickfontTextcaseLower    LayoutXaxisTickfontTextcase = "lower"
)

// LayoutXaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.xaxis.tickfont.variant
type LayoutXaxisTickfontVariant string

const (
	LayoutXaxisTickfontVariantNormal        LayoutXaxisTickfontVariant = "normal"
	LayoutXaxisTickfontVariantSmallCaps     LayoutXaxisTickfontVariant = "small-caps"
	LayoutXaxisTickfontVariantAllSmallCaps  LayoutXaxisTickfontVariant = "all-small-caps"
	LayoutXaxisTickfontVariantAllPetiteCaps LayoutXaxisTickfontVariant = "all-petite-caps"
	LayoutXaxisTickfontVariantPetiteCaps    LayoutXaxisTickfontVariant = "petite-caps"
	LayoutXaxisTickfontVariantUnicase       LayoutXaxisTickfontVariant = "unicase"
)

// LayoutXaxisTicklabelmode Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
// .schema.layout.layoutAttributes.xaxis.ticklabelmode
type LayoutXaxisTicklabelmode string

const (
	LayoutXaxisTicklabelmodeInstant LayoutXaxisTicklabelmode = "instant"
	LayoutXaxisTicklabelmodePeriod  LayoutXaxisTicklabelmode = "period"
)

// LayoutXaxisTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
// .schema.layout.layoutAttributes.xaxis.ticklabeloverflow
type LayoutXaxisTicklabeloverflow string

const (
	LayoutXaxisTicklabeloverflowAllow          LayoutXaxisTicklabeloverflow = "allow"
	LayoutXaxisTicklabeloverflowHidePastDiv    LayoutXaxisTicklabeloverflow = "hide past div"
	LayoutXaxisTicklabeloverflowHidePastDomain LayoutXaxisTicklabeloverflow = "hide past domain"
)

// LayoutXaxisTicklabelposition Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
// .schema.layout.layoutAttributes.xaxis.ticklabelposition
type LayoutXaxisTicklabelposition string

const (
	LayoutXaxisTicklabelpositionOutside       LayoutXaxisTicklabelposition = "outside"
	LayoutXaxisTicklabelpositionInside        LayoutXaxisTicklabelposition = "inside"
	LayoutXaxisTicklabelpositionOutsideTop    LayoutXaxisTicklabelposition = "outside top"
	LayoutXaxisTicklabelpositionInsideTop     LayoutXaxisTicklabelposition = "inside top"
	LayoutXaxisTicklabelpositionOutsideLeft   LayoutXaxisTicklabelposition = "outside left"
	LayoutXaxisTicklabelpositionInsideLeft    LayoutXaxisTicklabelposition = "inside left"
	LayoutXaxisTicklabelpositionOutsideRight  LayoutXaxisTicklabelposition = "outside right"
	LayoutXaxisTicklabelpositionInsideRight   LayoutXaxisTicklabelposition = "inside right"
	LayoutXaxisTicklabelpositionOutsideBottom LayoutXaxisTicklabelposition = "outside bottom"
	LayoutXaxisTicklabelpositionInsideBottom  LayoutXaxisTicklabelposition = "inside bottom"
)

// LayoutXaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
// .schema.layout.layoutAttributes.xaxis.tickmode
type LayoutXaxisTickmode string

const (
	LayoutXaxisTickmodeAuto   LayoutXaxisTickmode = "auto"
	LayoutXaxisTickmodeLinear LayoutXaxisTickmode = "linear"
	LayoutXaxisTickmodeArray  LayoutXaxisTickmode = "array"
	LayoutXaxisTickmodeSync   LayoutXaxisTickmode = "sync"
)

// LayoutXaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.xaxis.ticks
type LayoutXaxisTicks string

const (
	LayoutXaxisTicksOutside LayoutXaxisTicks = "outside"
	LayoutXaxisTicksInside  LayoutXaxisTicks = "inside"
	LayoutXaxisTicksEmpty   LayoutXaxisTicks = ""
)

// LayoutXaxisTickson Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
// .schema.layout.layoutAttributes.xaxis.tickson
type LayoutXaxisTickson string

const (
	LayoutXaxisTicksonLabels     LayoutXaxisTickson = "labels"
	LayoutXaxisTicksonBoundaries LayoutXaxisTickson = "boundaries"
)

// LayoutXaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.xaxis.title.font.style
type LayoutXaxisTitleFontStyle string

const (
	LayoutXaxisTitleFontStyleNormal LayoutXaxisTitleFontStyle = "normal"
	LayoutXaxisTitleFontStyleItalic LayoutXaxisTitleFontStyle = "italic"
)

// LayoutXaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.xaxis.title.font.textcase
type LayoutXaxisTitleFontTextcase string

const (
	LayoutXaxisTitleFontTextcaseNormal   LayoutXaxisTitleFontTextcase = "normal"
	LayoutXaxisTitleFontTextcaseWordCaps LayoutXaxisTitleFontTextcase = "word caps"
	LayoutXaxisTitleFontTextcaseUpper    LayoutXaxisTitleFontTextcase = "upper"
	LayoutXaxisTitleFontTextcaseLower    LayoutXaxisTitleFontTextcase = "lower"
)

// LayoutXaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.xaxis.title.font.variant
type LayoutXaxisTitleFontVariant string

const (
	LayoutXaxisTitleFontVariantNormal        LayoutXaxisTitleFontVariant = "normal"
	LayoutXaxisTitleFontVariantSmallCaps     LayoutXaxisTitleFontVariant = "small-caps"
	LayoutXaxisTitleFontVariantAllSmallCaps  LayoutXaxisTitleFontVariant = "all-small-caps"
	LayoutXaxisTitleFontVariantAllPetiteCaps LayoutXaxisTitleFontVariant = "all-petite-caps"
	LayoutXaxisTitleFontVariantPetiteCaps    LayoutXaxisTitleFontVariant = "petite-caps"
	LayoutXaxisTitleFontVariantUnicase       LayoutXaxisTitleFontVariant = "unicase"
)

// LayoutXaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
// .schema.layout.layoutAttributes.xaxis.type
type LayoutXaxisType string

const (
	LayoutXaxisTypeHyphenHyphen  LayoutXaxisType = "-"
	LayoutXaxisTypeLinear        LayoutXaxisType = "linear"
	LayoutXaxisTypeLog           LayoutXaxisType = "log"
	LayoutXaxisTypeDate          LayoutXaxisType = "date"
	LayoutXaxisTypeCategory      LayoutXaxisType = "category"
	LayoutXaxisTypeMulticategory LayoutXaxisType = "multicategory"
)

// LayoutYaxisAnchor If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
// .schema.layout.layoutAttributes.yaxis.anchor
type LayoutYaxisAnchor string

const (
	LayoutYaxisAnchorFree                                                                                                                    LayoutYaxisAnchor = "free"
	LayoutYaxisAnchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisAnchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisAnchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisAnchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutYaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
// .schema.layout.layoutAttributes.yaxis.autorange
type LayoutYaxisAutorange interface{}

var (
	LayoutYaxisAutorangeTrue        LayoutYaxisAutorange = true
	LayoutYaxisAutorangeFalse       LayoutYaxisAutorange = false
	LayoutYaxisAutorangeReversed    LayoutYaxisAutorange = "reversed"
	LayoutYaxisAutorangeMinReversed LayoutYaxisAutorange = "min reversed"
	LayoutYaxisAutorangeMaxReversed LayoutYaxisAutorange = "max reversed"
	LayoutYaxisAutorangeMin         LayoutYaxisAutorange = "min"
	LayoutYaxisAutorangeMax         LayoutYaxisAutorange = "max"
)

// LayoutYaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
// .schema.layout.layoutAttributes.yaxis.autotypenumbers
type LayoutYaxisAutotypenumbers string

const (
	LayoutYaxisAutotypenumbersConvertTypes LayoutYaxisAutotypenumbers = "convert types"
	LayoutYaxisAutotypenumbersStrict       LayoutYaxisAutotypenumbers = "strict"
)

// LayoutYaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
// .schema.layout.layoutAttributes.yaxis.calendar
type LayoutYaxisCalendar string

const (
	LayoutYaxisCalendarChinese    LayoutYaxisCalendar = "chinese"
	LayoutYaxisCalendarCoptic     LayoutYaxisCalendar = "coptic"
	LayoutYaxisCalendarDiscworld  LayoutYaxisCalendar = "discworld"
	LayoutYaxisCalendarEthiopian  LayoutYaxisCalendar = "ethiopian"
	LayoutYaxisCalendarGregorian  LayoutYaxisCalendar = "gregorian"
	LayoutYaxisCalendarHebrew     LayoutYaxisCalendar = "hebrew"
	LayoutYaxisCalendarIslamic    LayoutYaxisCalendar = "islamic"
	LayoutYaxisCalendarJalali     LayoutYaxisCalendar = "jalali"
	LayoutYaxisCalendarJulian     LayoutYaxisCalendar = "julian"
	LayoutYaxisCalendarMayan      LayoutYaxisCalendar = "mayan"
	LayoutYaxisCalendarNanakshahi LayoutYaxisCalendar = "nanakshahi"
	LayoutYaxisCalendarNepali     LayoutYaxisCalendar = "nepali"
	LayoutYaxisCalendarPersian    LayoutYaxisCalendar = "persian"
	LayoutYaxisCalendarTaiwan     LayoutYaxisCalendar = "taiwan"
	LayoutYaxisCalendarThai       LayoutYaxisCalendar = "thai"
	LayoutYaxisCalendarUmmalqura  LayoutYaxisCalendar = "ummalqura"
)

// LayoutYaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean, geometric mean or median of all the values.
// .schema.layout.layoutAttributes.yaxis.categoryorder
type LayoutYaxisCategoryorder string

const (
	LayoutYaxisCategoryorderTrace                   LayoutYaxisCategoryorder = "trace"
	LayoutYaxisCategoryorderCategoryAscending       LayoutYaxisCategoryorder = "category ascending"
	LayoutYaxisCategoryorderCategoryDescending      LayoutYaxisCategoryorder = "category descending"
	LayoutYaxisCategoryorderArray                   LayoutYaxisCategoryorder = "array"
	LayoutYaxisCategoryorderTotalAscending          LayoutYaxisCategoryorder = "total ascending"
	LayoutYaxisCategoryorderTotalDescending         LayoutYaxisCategoryorder = "total descending"
	LayoutYaxisCategoryorderMinAscending            LayoutYaxisCategoryorder = "min ascending"
	LayoutYaxisCategoryorderMinDescending           LayoutYaxisCategoryorder = "min descending"
	LayoutYaxisCategoryorderMaxAscending            LayoutYaxisCategoryorder = "max ascending"
	LayoutYaxisCategoryorderMaxDescending           LayoutYaxisCategoryorder = "max descending"
	LayoutYaxisCategoryorderSumAscending            LayoutYaxisCategoryorder = "sum ascending"
	LayoutYaxisCategoryorderSumDescending           LayoutYaxisCategoryorder = "sum descending"
	LayoutYaxisCategoryorderMeanAscending           LayoutYaxisCategoryorder = "mean ascending"
	LayoutYaxisCategoryorderMeanDescending          LayoutYaxisCategoryorder = "mean descending"
	LayoutYaxisCategoryorderGeometricMeanAscending  LayoutYaxisCategoryorder = "geometric mean ascending"
	LayoutYaxisCategoryorderGeometricMeanDescending LayoutYaxisCategoryorder = "geometric mean descending"
	LayoutYaxisCategoryorderMedianAscending         LayoutYaxisCategoryorder = "median ascending"
	LayoutYaxisCategoryorderMedianDescending        LayoutYaxisCategoryorder = "median descending"
)

// LayoutYaxisConstrain If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
// .schema.layout.layoutAttributes.yaxis.constrain
type LayoutYaxisConstrain string

const (
	LayoutYaxisConstrainRange  LayoutYaxisConstrain = "range"
	LayoutYaxisConstrainDomain LayoutYaxisConstrain = "domain"
)

// LayoutYaxisConstraintoward If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
// .schema.layout.layoutAttributes.yaxis.constraintoward
type LayoutYaxisConstraintoward string

const (
	LayoutYaxisConstraintowardLeft   LayoutYaxisConstraintoward = "left"
	LayoutYaxisConstraintowardCenter LayoutYaxisConstraintoward = "center"
	LayoutYaxisConstraintowardRight  LayoutYaxisConstraintoward = "right"
	LayoutYaxisConstraintowardTop    LayoutYaxisConstraintoward = "top"
	LayoutYaxisConstraintowardMiddle LayoutYaxisConstraintoward = "middle"
	LayoutYaxisConstraintowardBottom LayoutYaxisConstraintoward = "bottom"
)

// LayoutYaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.layout.layoutAttributes.yaxis.exponentformat
type LayoutYaxisExponentformat string

const (
	LayoutYaxisExponentformatNone  LayoutYaxisExponentformat = "none"
	LayoutYaxisExponentformatE1    LayoutYaxisExponentformat = "e"
	LayoutYaxisExponentformatE2    LayoutYaxisExponentformat = "E"
	LayoutYaxisExponentformatPower LayoutYaxisExponentformat = "power"
	LayoutYaxisExponentformatSI    LayoutYaxisExponentformat = "SI"
	LayoutYaxisExponentformatB     LayoutYaxisExponentformat = "B"
)

// LayoutYaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
// .schema.layout.layoutAttributes.yaxis.layer
type LayoutYaxisLayer string

const (
	LayoutYaxisLayerAboveTraces LayoutYaxisLayer = "above traces"
	LayoutYaxisLayerBelowTraces LayoutYaxisLayer = "below traces"
)

// LayoutYaxisMatches If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
// .schema.layout.layoutAttributes.yaxis.matches
type LayoutYaxisMatches string

const (
	LayoutYaxisMatchesSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisMatches = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisMatchesSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisMatches = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutYaxisMinorTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.layout.layoutAttributes.yaxis.minor.tickmode
type LayoutYaxisMinorTickmode string

const (
	LayoutYaxisMinorTickmodeAuto   LayoutYaxisMinorTickmode = "auto"
	LayoutYaxisMinorTickmodeLinear LayoutYaxisMinorTickmode = "linear"
	LayoutYaxisMinorTickmodeArray  LayoutYaxisMinorTickmode = "array"
)

// LayoutYaxisMinorTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.yaxis.minor.ticks
type LayoutYaxisMinorTicks string

const (
	LayoutYaxisMinorTicksOutside LayoutYaxisMinorTicks = "outside"
	LayoutYaxisMinorTicksInside  LayoutYaxisMinorTicks = "inside"
	LayoutYaxisMinorTicksEmpty   LayoutYaxisMinorTicks = ""
)

// LayoutYaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
// .schema.layout.layoutAttributes.yaxis.mirror
type LayoutYaxisMirror interface{}

var (
	LayoutYaxisMirrorTrue     LayoutYaxisMirror = true
	LayoutYaxisMirrorTicks    LayoutYaxisMirror = "ticks"
	LayoutYaxisMirrorFalse    LayoutYaxisMirror = false
	LayoutYaxisMirrorAll      LayoutYaxisMirror = "all"
	LayoutYaxisMirrorAllticks LayoutYaxisMirror = "allticks"
)

// LayoutYaxisOverlaying If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
// .schema.layout.layoutAttributes.yaxis.overlaying
type LayoutYaxisOverlaying string

const (
	LayoutYaxisOverlayingFree                                                                                                                    LayoutYaxisOverlaying = "free"
	LayoutYaxisOverlayingSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisOverlaying = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisOverlayingSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisOverlaying = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutYaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
// .schema.layout.layoutAttributes.yaxis.rangemode
type LayoutYaxisRangemode string

const (
	LayoutYaxisRangemodeNormal      LayoutYaxisRangemode = "normal"
	LayoutYaxisRangemodeTozero      LayoutYaxisRangemode = "tozero"
	LayoutYaxisRangemodeNonnegative LayoutYaxisRangemode = "nonnegative"
)

// LayoutYaxisScaleanchor If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
// .schema.layout.layoutAttributes.yaxis.scaleanchor
type LayoutYaxisScaleanchor interface{}

var (
	LayoutYaxisScaleanchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisScaleanchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisScaleanchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisScaleanchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisScaleanchorFalse                                                                                                                   LayoutYaxisScaleanchor = false
)

// LayoutYaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.layout.layoutAttributes.yaxis.showexponent
type LayoutYaxisShowexponent string

const (
	LayoutYaxisShowexponentAll   LayoutYaxisShowexponent = "all"
	LayoutYaxisShowexponentFirst LayoutYaxisShowexponent = "first"
	LayoutYaxisShowexponentLast  LayoutYaxisShowexponent = "last"
	LayoutYaxisShowexponentNone  LayoutYaxisShowexponent = "none"
)

// LayoutYaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.layout.layoutAttributes.yaxis.showtickprefix
type LayoutYaxisShowtickprefix string

const (
	LayoutYaxisShowtickprefixAll   LayoutYaxisShowtickprefix = "all"
	LayoutYaxisShowtickprefixFirst LayoutYaxisShowtickprefix = "first"
	LayoutYaxisShowtickprefixLast  LayoutYaxisShowtickprefix = "last"
	LayoutYaxisShowtickprefixNone  LayoutYaxisShowtickprefix = "none"
)

// LayoutYaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.layout.layoutAttributes.yaxis.showticksuffix
type LayoutYaxisShowticksuffix string

const (
	LayoutYaxisShowticksuffixAll   LayoutYaxisShowticksuffix = "all"
	LayoutYaxisShowticksuffixFirst LayoutYaxisShowticksuffix = "first"
	LayoutYaxisShowticksuffixLast  LayoutYaxisShowticksuffix = "last"
	LayoutYaxisShowticksuffixNone  LayoutYaxisShowticksuffix = "none"
)

// LayoutYaxisSide Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
// .schema.layout.layoutAttributes.yaxis.side
type LayoutYaxisSide string

const (
	LayoutYaxisSideTop    LayoutYaxisSide = "top"
	LayoutYaxisSideBottom LayoutYaxisSide = "bottom"
	LayoutYaxisSideLeft   LayoutYaxisSide = "left"
	LayoutYaxisSideRight  LayoutYaxisSide = "right"
)

// LayoutYaxisSpikesnap Determines whether spikelines are stuck to the cursor or to the closest datapoints.
// .schema.layout.layoutAttributes.yaxis.spikesnap
type LayoutYaxisSpikesnap string

const (
	LayoutYaxisSpikesnapData        LayoutYaxisSpikesnap = "data"
	LayoutYaxisSpikesnapCursor      LayoutYaxisSpikesnap = "cursor"
	LayoutYaxisSpikesnapHoveredData LayoutYaxisSpikesnap = "hovered data"
)

// LayoutYaxisTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.yaxis.tickfont.style
type LayoutYaxisTickfontStyle string

const (
	LayoutYaxisTickfontStyleNormal LayoutYaxisTickfontStyle = "normal"
	LayoutYaxisTickfontStyleItalic LayoutYaxisTickfontStyle = "italic"
)

// LayoutYaxisTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.yaxis.tickfont.textcase
type LayoutYaxisTickfontTextcase string

const (
	LayoutYaxisTickfontTextcaseNormal   LayoutYaxisTickfontTextcase = "normal"
	LayoutYaxisTickfontTextcaseWordCaps LayoutYaxisTickfontTextcase = "word caps"
	LayoutYaxisTickfontTextcaseUpper    LayoutYaxisTickfontTextcase = "upper"
	LayoutYaxisTickfontTextcaseLower    LayoutYaxisTickfontTextcase = "lower"
)

// LayoutYaxisTickfontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.yaxis.tickfont.variant
type LayoutYaxisTickfontVariant string

const (
	LayoutYaxisTickfontVariantNormal        LayoutYaxisTickfontVariant = "normal"
	LayoutYaxisTickfontVariantSmallCaps     LayoutYaxisTickfontVariant = "small-caps"
	LayoutYaxisTickfontVariantAllSmallCaps  LayoutYaxisTickfontVariant = "all-small-caps"
	LayoutYaxisTickfontVariantAllPetiteCaps LayoutYaxisTickfontVariant = "all-petite-caps"
	LayoutYaxisTickfontVariantPetiteCaps    LayoutYaxisTickfontVariant = "petite-caps"
	LayoutYaxisTickfontVariantUnicase       LayoutYaxisTickfontVariant = "unicase"
)

// LayoutYaxisTicklabelmode Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
// .schema.layout.layoutAttributes.yaxis.ticklabelmode
type LayoutYaxisTicklabelmode string

const (
	LayoutYaxisTicklabelmodeInstant LayoutYaxisTicklabelmode = "instant"
	LayoutYaxisTicklabelmodePeriod  LayoutYaxisTicklabelmode = "period"
)

// LayoutYaxisTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
// .schema.layout.layoutAttributes.yaxis.ticklabeloverflow
type LayoutYaxisTicklabeloverflow string

const (
	LayoutYaxisTicklabeloverflowAllow          LayoutYaxisTicklabeloverflow = "allow"
	LayoutYaxisTicklabeloverflowHidePastDiv    LayoutYaxisTicklabeloverflow = "hide past div"
	LayoutYaxisTicklabeloverflowHidePastDomain LayoutYaxisTicklabeloverflow = "hide past domain"
)

// LayoutYaxisTicklabelposition Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
// .schema.layout.layoutAttributes.yaxis.ticklabelposition
type LayoutYaxisTicklabelposition string

const (
	LayoutYaxisTicklabelpositionOutside       LayoutYaxisTicklabelposition = "outside"
	LayoutYaxisTicklabelpositionInside        LayoutYaxisTicklabelposition = "inside"
	LayoutYaxisTicklabelpositionOutsideTop    LayoutYaxisTicklabelposition = "outside top"
	LayoutYaxisTicklabelpositionInsideTop     LayoutYaxisTicklabelposition = "inside top"
	LayoutYaxisTicklabelpositionOutsideLeft   LayoutYaxisTicklabelposition = "outside left"
	LayoutYaxisTicklabelpositionInsideLeft    LayoutYaxisTicklabelposition = "inside left"
	LayoutYaxisTicklabelpositionOutsideRight  LayoutYaxisTicklabelposition = "outside right"
	LayoutYaxisTicklabelpositionInsideRight   LayoutYaxisTicklabelposition = "inside right"
	LayoutYaxisTicklabelpositionOutsideBottom LayoutYaxisTicklabelposition = "outside bottom"
	LayoutYaxisTicklabelpositionInsideBottom  LayoutYaxisTicklabelposition = "inside bottom"
)

// LayoutYaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
// .schema.layout.layoutAttributes.yaxis.tickmode
type LayoutYaxisTickmode string

const (
	LayoutYaxisTickmodeAuto   LayoutYaxisTickmode = "auto"
	LayoutYaxisTickmodeLinear LayoutYaxisTickmode = "linear"
	LayoutYaxisTickmodeArray  LayoutYaxisTickmode = "array"
	LayoutYaxisTickmodeSync   LayoutYaxisTickmode = "sync"
)

// LayoutYaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.layout.layoutAttributes.yaxis.ticks
type LayoutYaxisTicks string

const (
	LayoutYaxisTicksOutside LayoutYaxisTicks = "outside"
	LayoutYaxisTicksInside  LayoutYaxisTicks = "inside"
	LayoutYaxisTicksEmpty   LayoutYaxisTicks = ""
)

// LayoutYaxisTickson Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
// .schema.layout.layoutAttributes.yaxis.tickson
type LayoutYaxisTickson string

const (
	LayoutYaxisTicksonLabels     LayoutYaxisTickson = "labels"
	LayoutYaxisTicksonBoundaries LayoutYaxisTickson = "boundaries"
)

// LayoutYaxisTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.yaxis.title.font.style
type LayoutYaxisTitleFontStyle string

const (
	LayoutYaxisTitleFontStyleNormal LayoutYaxisTitleFontStyle = "normal"
	LayoutYaxisTitleFontStyleItalic LayoutYaxisTitleFontStyle = "italic"
)

// LayoutYaxisTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.yaxis.title.font.textcase
type LayoutYaxisTitleFontTextcase string

const (
	LayoutYaxisTitleFontTextcaseNormal   LayoutYaxisTitleFontTextcase = "normal"
	LayoutYaxisTitleFontTextcaseWordCaps LayoutYaxisTitleFontTextcase = "word caps"
	LayoutYaxisTitleFontTextcaseUpper    LayoutYaxisTitleFontTextcase = "upper"
	LayoutYaxisTitleFontTextcaseLower    LayoutYaxisTitleFontTextcase = "lower"
)

// LayoutYaxisTitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.yaxis.title.font.variant
type LayoutYaxisTitleFontVariant string

const (
	LayoutYaxisTitleFontVariantNormal        LayoutYaxisTitleFontVariant = "normal"
	LayoutYaxisTitleFontVariantSmallCaps     LayoutYaxisTitleFontVariant = "small-caps"
	LayoutYaxisTitleFontVariantAllSmallCaps  LayoutYaxisTitleFontVariant = "all-small-caps"
	LayoutYaxisTitleFontVariantAllPetiteCaps LayoutYaxisTitleFontVariant = "all-petite-caps"
	LayoutYaxisTitleFontVariantPetiteCaps    LayoutYaxisTitleFontVariant = "petite-caps"
	LayoutYaxisTitleFontVariantUnicase       LayoutYaxisTitleFontVariant = "unicase"
)

// LayoutYaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
// .schema.layout.layoutAttributes.yaxis.type
type LayoutYaxisType string

const (
	LayoutYaxisTypeHyphenHyphen  LayoutYaxisType = "-"
	LayoutYaxisTypeLinear        LayoutYaxisType = "linear"
	LayoutYaxisTypeLog           LayoutYaxisType = "log"
	LayoutYaxisTypeDate          LayoutYaxisType = "date"
	LayoutYaxisTypeCategory      LayoutYaxisType = "category"
	LayoutYaxisTypeMulticategory LayoutYaxisType = "multicategory"
)

// RangebreakPattern Determines a pattern on the time line that generates breaks. If *day of week* - days of the week in English e.g. 'Sunday' or `sun` (matching is case-insensitive and considers only the first three characters), as well as Sunday-based integers between 0 and 6. If *hour* - hour (24-hour clock) as decimal numbers between 0 and 24. for more info. Examples: - { pattern: 'day of week', bounds: [6, 1] }  or simply { bounds: ['sat', 'mon'] }   breaks from Saturday to Monday (i.e. skips the weekends). - { pattern: 'hour', bounds: [17, 8] }   breaks from 5pm to 8am (i.e. skips non-work hours).
// .schema.layout.layoutAttributes.yaxis.rangebreaks.items.rangebreak.pattern
type RangebreakPattern string

const (
	RangebreakPatternDayOfWeek RangebreakPattern = "day of week"
	RangebreakPatternHour      RangebreakPattern = "hour"
	RangebreakPatternEmpty     RangebreakPattern = ""
)

// SelectionType Specifies the selection type to be drawn. If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`) and (`x0`,`y1`). If *path*, draw a custom SVG path using `path`.
// .schema.layout.layoutAttributes.selections.items.selection.type
type SelectionType string

const (
	SelectionTypeRect SelectionType = "rect"
	SelectionTypePath SelectionType = "path"
)

// SelectionXref Sets the selection's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
// .schema.layout.layoutAttributes.selections.items.selection.xref
type SelectionXref string

const (
	SelectionXrefPaper                                                                                                                   SelectionXref = "paper"
	SelectionXrefSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash SelectionXref = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// SelectionYref Sets the selection's x coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
// .schema.layout.layoutAttributes.selections.items.selection.yref
type SelectionYref string

const (
	SelectionYrefPaper                                                                                                                   SelectionYref = "paper"
	SelectionYrefSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash SelectionYref = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// ShapeFillrule Determines which regions of complex paths constitute the interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
// .schema.layout.layoutAttributes.shapes.items.shape.fillrule
type ShapeFillrule string

const (
	ShapeFillruleEvenodd ShapeFillrule = "evenodd"
	ShapeFillruleNonzero ShapeFillrule = "nonzero"
)

// ShapeLabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.shapes.items.shape.label.font.style
type ShapeLabelFontStyle string

const (
	ShapeLabelFontStyleNormal ShapeLabelFontStyle = "normal"
	ShapeLabelFontStyleItalic ShapeLabelFontStyle = "italic"
)

// ShapeLabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.shapes.items.shape.label.font.textcase
type ShapeLabelFontTextcase string

const (
	ShapeLabelFontTextcaseNormal   ShapeLabelFontTextcase = "normal"
	ShapeLabelFontTextcaseWordCaps ShapeLabelFontTextcase = "word caps"
	ShapeLabelFontTextcaseUpper    ShapeLabelFontTextcase = "upper"
	ShapeLabelFontTextcaseLower    ShapeLabelFontTextcase = "lower"
)

// ShapeLabelFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.shapes.items.shape.label.font.variant
type ShapeLabelFontVariant string

const (
	ShapeLabelFontVariantNormal        ShapeLabelFontVariant = "normal"
	ShapeLabelFontVariantSmallCaps     ShapeLabelFontVariant = "small-caps"
	ShapeLabelFontVariantAllSmallCaps  ShapeLabelFontVariant = "all-small-caps"
	ShapeLabelFontVariantAllPetiteCaps ShapeLabelFontVariant = "all-petite-caps"
	ShapeLabelFontVariantPetiteCaps    ShapeLabelFontVariant = "petite-caps"
	ShapeLabelFontVariantUnicase       ShapeLabelFontVariant = "unicase"
)

// ShapeLabelTextposition Sets the position of the label text relative to the shape. Supported values for rectangles, circles and paths are *top left*, *top center*, *top right*, *middle left*, *middle center*, *middle right*, *bottom left*, *bottom center*, and *bottom right*. Supported values for lines are *start*, *middle*, and *end*. Default: *middle center* for rectangles, circles, and paths; *middle* for lines.
// .schema.layout.layoutAttributes.shapes.items.shape.label.textposition
type ShapeLabelTextposition string

const (
	ShapeLabelTextpositionTopLeft      ShapeLabelTextposition = "top left"
	ShapeLabelTextpositionTopCenter    ShapeLabelTextposition = "top center"
	ShapeLabelTextpositionTopRight     ShapeLabelTextposition = "top right"
	ShapeLabelTextpositionMiddleLeft   ShapeLabelTextposition = "middle left"
	ShapeLabelTextpositionMiddleCenter ShapeLabelTextposition = "middle center"
	ShapeLabelTextpositionMiddleRight  ShapeLabelTextposition = "middle right"
	ShapeLabelTextpositionBottomLeft   ShapeLabelTextposition = "bottom left"
	ShapeLabelTextpositionBottomCenter ShapeLabelTextposition = "bottom center"
	ShapeLabelTextpositionBottomRight  ShapeLabelTextposition = "bottom right"
	ShapeLabelTextpositionStart        ShapeLabelTextposition = "start"
	ShapeLabelTextpositionMiddle       ShapeLabelTextposition = "middle"
	ShapeLabelTextpositionEnd          ShapeLabelTextposition = "end"
)

// ShapeLabelXanchor Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the *left*, *center* or *right* of the label text. For example, if `textposition` is set to *top right* and `xanchor` to *right* then the right-most portion of the label text lines up with the right-most edge of the shape.
// .schema.layout.layoutAttributes.shapes.items.shape.label.xanchor
type ShapeLabelXanchor string

const (
	ShapeLabelXanchorAuto   ShapeLabelXanchor = "auto"
	ShapeLabelXanchorLeft   ShapeLabelXanchor = "left"
	ShapeLabelXanchorCenter ShapeLabelXanchor = "center"
	ShapeLabelXanchorRight  ShapeLabelXanchor = "right"
)

// ShapeLabelYanchor Sets the label's vertical position anchor This anchor binds the specified `textposition` to the *top*, *middle* or *bottom* of the label text. For example, if `textposition` is set to *top right* and `yanchor` to *top* then the top-most portion of the label text lines up with the top-most edge of the shape.
// .schema.layout.layoutAttributes.shapes.items.shape.label.yanchor
type ShapeLabelYanchor string

const (
	ShapeLabelYanchorTop    ShapeLabelYanchor = "top"
	ShapeLabelYanchorMiddle ShapeLabelYanchor = "middle"
	ShapeLabelYanchorBottom ShapeLabelYanchor = "bottom"
)

// ShapeLayer Specifies whether shapes are drawn below gridlines (*below*), between gridlines and traces (*between*) or above traces (*above*).
// .schema.layout.layoutAttributes.shapes.items.shape.layer
type ShapeLayer string

const (
	ShapeLayerBelow   ShapeLayer = "below"
	ShapeLayerAbove   ShapeLayer = "above"
	ShapeLayerBetween ShapeLayer = "between"
)

// ShapeLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.style
type ShapeLegendgrouptitleFontStyle string

const (
	ShapeLegendgrouptitleFontStyleNormal ShapeLegendgrouptitleFontStyle = "normal"
	ShapeLegendgrouptitleFontStyleItalic ShapeLegendgrouptitleFontStyle = "italic"
)

// ShapeLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.textcase
type ShapeLegendgrouptitleFontTextcase string

const (
	ShapeLegendgrouptitleFontTextcaseNormal   ShapeLegendgrouptitleFontTextcase = "normal"
	ShapeLegendgrouptitleFontTextcaseWordCaps ShapeLegendgrouptitleFontTextcase = "word caps"
	ShapeLegendgrouptitleFontTextcaseUpper    ShapeLegendgrouptitleFontTextcase = "upper"
	ShapeLegendgrouptitleFontTextcaseLower    ShapeLegendgrouptitleFontTextcase = "lower"
)

// ShapeLegendgrouptitleFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.variant
type ShapeLegendgrouptitleFontVariant string

const (
	ShapeLegendgrouptitleFontVariantNormal        ShapeLegendgrouptitleFontVariant = "normal"
	ShapeLegendgrouptitleFontVariantSmallCaps     ShapeLegendgrouptitleFontVariant = "small-caps"
	ShapeLegendgrouptitleFontVariantAllSmallCaps  ShapeLegendgrouptitleFontVariant = "all-small-caps"
	ShapeLegendgrouptitleFontVariantAllPetiteCaps ShapeLegendgrouptitleFontVariant = "all-petite-caps"
	ShapeLegendgrouptitleFontVariantPetiteCaps    ShapeLegendgrouptitleFontVariant = "petite-caps"
	ShapeLegendgrouptitleFontVariantUnicase       ShapeLegendgrouptitleFontVariant = "unicase"
)

// ShapeType Specifies the shape type to be drawn. If *line*, a line is drawn from (`x0`,`y0`) to (`x1`,`y1`) with respect to the axes' sizing mode. If *circle*, a circle is drawn from ((`x0`+`x1`)/2, (`y0`+`y1`)/2)) with radius (|(`x0`+`x1`)/2 - `x0`|, |(`y0`+`y1`)/2 -`y0`)|) with respect to the axes' sizing mode. If *rect*, a rectangle is drawn linking (`x0`,`y0`), (`x1`,`y0`), (`x1`,`y1`), (`x0`,`y1`), (`x0`,`y0`) with respect to the axes' sizing mode. If *path*, draw a custom SVG path using `path`. with respect to the axes' sizing mode.
// .schema.layout.layoutAttributes.shapes.items.shape.type
type ShapeType string

const (
	ShapeTypeCircle ShapeType = "circle"
	ShapeTypeRect   ShapeType = "rect"
	ShapeTypePath   ShapeType = "path"
	ShapeTypeLine   ShapeType = "line"
)

// ShapeVisible Determines whether or not this shape is visible. If *legendonly*, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).
// .schema.layout.layoutAttributes.shapes.items.shape.visible
type ShapeVisible interface{}

var (
	ShapeVisibleTrue       ShapeVisible = true
	ShapeVisibleFalse      ShapeVisible = false
	ShapeVisibleLegendonly ShapeVisible = "legendonly"
)

// ShapeXref Sets the shape's x coordinate axis. If set to a x axis id (e.g. *x* or *x2*), the `x` position refers to a x coordinate. If set to *paper*, the `x` position refers to the distance from the left of the plotting area in normalized coordinates where *0* (*1*) corresponds to the left (right). If set to a x axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the left of the domain of that axis: e.g., *x2 domain* refers to the domain of the second x  axis and a x position of 0.5 refers to the point between the left and the right of the domain of the second x axis.
// .schema.layout.layoutAttributes.shapes.items.shape.xref
type ShapeXref string

const (
	ShapeXrefPaper                                                                                                                   ShapeXref = "paper"
	ShapeXrefSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash ShapeXref = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// ShapeXsizemode Sets the shapes's sizing mode along the x axis. If set to *scaled*, `x0`, `x1` and x coordinates within `path` refer to data values on the x axis or a fraction of the plot area's width (`xref` set to *paper*). If set to *pixel*, `xanchor` specifies the x position in terms of data or plot fraction but `x0`, `x1` and x coordinates within `path` are pixels relative to `xanchor`. This way, the shape can have a fixed width while maintaining a position relative to data or plot fraction.
// .schema.layout.layoutAttributes.shapes.items.shape.xsizemode
type ShapeXsizemode string

const (
	ShapeXsizemodeScaled ShapeXsizemode = "scaled"
	ShapeXsizemodePixel  ShapeXsizemode = "pixel"
)

// ShapeYref Sets the shape's y coordinate axis. If set to a y axis id (e.g. *y* or *y2*), the `y` position refers to a y coordinate. If set to *paper*, the `y` position refers to the distance from the bottom of the plotting area in normalized coordinates where *0* (*1*) corresponds to the bottom (top). If set to a y axis ID followed by *domain* (separated by a space), the position behaves like for *paper*, but refers to the distance in fractions of the domain length from the bottom of the domain of that axis: e.g., *y2 domain* refers to the domain of the second y  axis and a y position of 0.5 refers to the point between the bottom and the top of the domain of the second y axis.
// .schema.layout.layoutAttributes.shapes.items.shape.yref
type ShapeYref string

const (
	ShapeYrefPaper                                                                                                                   ShapeYref = "paper"
	ShapeYrefSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash ShapeYref = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// ShapeYsizemode Sets the shapes's sizing mode along the y axis. If set to *scaled*, `y0`, `y1` and y coordinates within `path` refer to data values on the y axis or a fraction of the plot area's height (`yref` set to *paper*). If set to *pixel*, `yanchor` specifies the y position in terms of data or plot fraction but `y0`, `y1` and y coordinates within `path` are pixels relative to `yanchor`. This way, the shape can have a fixed height while maintaining a position relative to data or plot fraction.
// .schema.layout.layoutAttributes.shapes.items.shape.ysizemode
type ShapeYsizemode string

const (
	ShapeYsizemodeScaled ShapeYsizemode = "scaled"
	ShapeYsizemodePixel  ShapeYsizemode = "pixel"
)

// SliderCurrentvalueFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.style
type SliderCurrentvalueFontStyle string

const (
	SliderCurrentvalueFontStyleNormal SliderCurrentvalueFontStyle = "normal"
	SliderCurrentvalueFontStyleItalic SliderCurrentvalueFontStyle = "italic"
)

// SliderCurrentvalueFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.textcase
type SliderCurrentvalueFontTextcase string

const (
	SliderCurrentvalueFontTextcaseNormal   SliderCurrentvalueFontTextcase = "normal"
	SliderCurrentvalueFontTextcaseWordCaps SliderCurrentvalueFontTextcase = "word caps"
	SliderCurrentvalueFontTextcaseUpper    SliderCurrentvalueFontTextcase = "upper"
	SliderCurrentvalueFontTextcaseLower    SliderCurrentvalueFontTextcase = "lower"
)

// SliderCurrentvalueFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.variant
type SliderCurrentvalueFontVariant string

const (
	SliderCurrentvalueFontVariantNormal        SliderCurrentvalueFontVariant = "normal"
	SliderCurrentvalueFontVariantSmallCaps     SliderCurrentvalueFontVariant = "small-caps"
	SliderCurrentvalueFontVariantAllSmallCaps  SliderCurrentvalueFontVariant = "all-small-caps"
	SliderCurrentvalueFontVariantAllPetiteCaps SliderCurrentvalueFontVariant = "all-petite-caps"
	SliderCurrentvalueFontVariantPetiteCaps    SliderCurrentvalueFontVariant = "petite-caps"
	SliderCurrentvalueFontVariantUnicase       SliderCurrentvalueFontVariant = "unicase"
)

// SliderCurrentvalueXanchor The alignment of the value readout relative to the length of the slider.
// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.xanchor
type SliderCurrentvalueXanchor string

const (
	SliderCurrentvalueXanchorLeft   SliderCurrentvalueXanchor = "left"
	SliderCurrentvalueXanchorCenter SliderCurrentvalueXanchor = "center"
	SliderCurrentvalueXanchorRight  SliderCurrentvalueXanchor = "right"
)

// SliderFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.sliders.items.slider.font.style
type SliderFontStyle string

const (
	SliderFontStyleNormal SliderFontStyle = "normal"
	SliderFontStyleItalic SliderFontStyle = "italic"
)

// SliderFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.sliders.items.slider.font.textcase
type SliderFontTextcase string

const (
	SliderFontTextcaseNormal   SliderFontTextcase = "normal"
	SliderFontTextcaseWordCaps SliderFontTextcase = "word caps"
	SliderFontTextcaseUpper    SliderFontTextcase = "upper"
	SliderFontTextcaseLower    SliderFontTextcase = "lower"
)

// SliderFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.sliders.items.slider.font.variant
type SliderFontVariant string

const (
	SliderFontVariantNormal        SliderFontVariant = "normal"
	SliderFontVariantSmallCaps     SliderFontVariant = "small-caps"
	SliderFontVariantAllSmallCaps  SliderFontVariant = "all-small-caps"
	SliderFontVariantAllPetiteCaps SliderFontVariant = "all-petite-caps"
	SliderFontVariantPetiteCaps    SliderFontVariant = "petite-caps"
	SliderFontVariantUnicase       SliderFontVariant = "unicase"
)

// SliderLenmode Determines whether this slider length is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
// .schema.layout.layoutAttributes.sliders.items.slider.lenmode
type SliderLenmode string

const (
	SliderLenmodeFraction SliderLenmode = "fraction"
	SliderLenmodePixels   SliderLenmode = "pixels"
)

// SliderTransitionEasing Sets the easing function of the slider transition
// .schema.layout.layoutAttributes.sliders.items.slider.transition.easing
type SliderTransitionEasing string

const (
	SliderTransitionEasingLinear       SliderTransitionEasing = "linear"
	SliderTransitionEasingQuad         SliderTransitionEasing = "quad"
	SliderTransitionEasingCubic        SliderTransitionEasing = "cubic"
	SliderTransitionEasingSin          SliderTransitionEasing = "sin"
	SliderTransitionEasingExp          SliderTransitionEasing = "exp"
	SliderTransitionEasingCircle       SliderTransitionEasing = "circle"
	SliderTransitionEasingElastic      SliderTransitionEasing = "elastic"
	SliderTransitionEasingBack         SliderTransitionEasing = "back"
	SliderTransitionEasingBounce       SliderTransitionEasing = "bounce"
	SliderTransitionEasingLinearIn     SliderTransitionEasing = "linear-in"
	SliderTransitionEasingQuadIn       SliderTransitionEasing = "quad-in"
	SliderTransitionEasingCubicIn      SliderTransitionEasing = "cubic-in"
	SliderTransitionEasingSinIn        SliderTransitionEasing = "sin-in"
	SliderTransitionEasingExpIn        SliderTransitionEasing = "exp-in"
	SliderTransitionEasingCircleIn     SliderTransitionEasing = "circle-in"
	SliderTransitionEasingElasticIn    SliderTransitionEasing = "elastic-in"
	SliderTransitionEasingBackIn       SliderTransitionEasing = "back-in"
	SliderTransitionEasingBounceIn     SliderTransitionEasing = "bounce-in"
	SliderTransitionEasingLinearOut    SliderTransitionEasing = "linear-out"
	SliderTransitionEasingQuadOut      SliderTransitionEasing = "quad-out"
	SliderTransitionEasingCubicOut     SliderTransitionEasing = "cubic-out"
	SliderTransitionEasingSinOut       SliderTransitionEasing = "sin-out"
	SliderTransitionEasingExpOut       SliderTransitionEasing = "exp-out"
	SliderTransitionEasingCircleOut    SliderTransitionEasing = "circle-out"
	SliderTransitionEasingElasticOut   SliderTransitionEasing = "elastic-out"
	SliderTransitionEasingBackOut      SliderTransitionEasing = "back-out"
	SliderTransitionEasingBounceOut    SliderTransitionEasing = "bounce-out"
	SliderTransitionEasingLinearInOut  SliderTransitionEasing = "linear-in-out"
	SliderTransitionEasingQuadInOut    SliderTransitionEasing = "quad-in-out"
	SliderTransitionEasingCubicInOut   SliderTransitionEasing = "cubic-in-out"
	SliderTransitionEasingSinInOut     SliderTransitionEasing = "sin-in-out"
	SliderTransitionEasingExpInOut     SliderTransitionEasing = "exp-in-out"
	SliderTransitionEasingCircleInOut  SliderTransitionEasing = "circle-in-out"
	SliderTransitionEasingElasticInOut SliderTransitionEasing = "elastic-in-out"
	SliderTransitionEasingBackInOut    SliderTransitionEasing = "back-in-out"
	SliderTransitionEasingBounceInOut  SliderTransitionEasing = "bounce-in-out"
)

// SliderXanchor Sets the slider's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
// .schema.layout.layoutAttributes.sliders.items.slider.xanchor
type SliderXanchor string

const (
	SliderXanchorAuto   SliderXanchor = "auto"
	SliderXanchorLeft   SliderXanchor = "left"
	SliderXanchorCenter SliderXanchor = "center"
	SliderXanchorRight  SliderXanchor = "right"
)

// SliderYanchor Sets the slider's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
// .schema.layout.layoutAttributes.sliders.items.slider.yanchor
type SliderYanchor string

const (
	SliderYanchorAuto   SliderYanchor = "auto"
	SliderYanchorTop    SliderYanchor = "top"
	SliderYanchorMiddle SliderYanchor = "middle"
	SliderYanchorBottom SliderYanchor = "bottom"
)

// StepMethod Sets the Plotly method to be called when the slider value is changed. If the `skip` method is used, the API slider will function as normal but will perform no API calls and will not bind automatically to state updates. This may be used to create a component interface and attach to slider events manually via JavaScript.
// .schema.layout.layoutAttributes.sliders.items.slider.steps.items.step.method
type StepMethod string

const (
	StepMethodRestyle  StepMethod = "restyle"
	StepMethodRelayout StepMethod = "relayout"
	StepMethodAnimate  StepMethod = "animate"
	StepMethodUpdate   StepMethod = "update"
	StepMethodSkip     StepMethod = "skip"
)

// UpdatemenuDirection Determines the direction in which the buttons are laid out, whether in a dropdown menu or a row/column of buttons. For `left` and `up`, the buttons will still appear in left-to-right or top-to-bottom order respectively.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.direction
type UpdatemenuDirection string

const (
	UpdatemenuDirectionLeft  UpdatemenuDirection = "left"
	UpdatemenuDirectionRight UpdatemenuDirection = "right"
	UpdatemenuDirectionUp    UpdatemenuDirection = "up"
	UpdatemenuDirectionDown  UpdatemenuDirection = "down"
)

// UpdatemenuFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.style
type UpdatemenuFontStyle string

const (
	UpdatemenuFontStyleNormal UpdatemenuFontStyle = "normal"
	UpdatemenuFontStyleItalic UpdatemenuFontStyle = "italic"
)

// UpdatemenuFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.textcase
type UpdatemenuFontTextcase string

const (
	UpdatemenuFontTextcaseNormal   UpdatemenuFontTextcase = "normal"
	UpdatemenuFontTextcaseWordCaps UpdatemenuFontTextcase = "word caps"
	UpdatemenuFontTextcaseUpper    UpdatemenuFontTextcase = "upper"
	UpdatemenuFontTextcaseLower    UpdatemenuFontTextcase = "lower"
)

// UpdatemenuFontVariant Sets the variant of the font.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.variant
type UpdatemenuFontVariant string

const (
	UpdatemenuFontVariantNormal        UpdatemenuFontVariant = "normal"
	UpdatemenuFontVariantSmallCaps     UpdatemenuFontVariant = "small-caps"
	UpdatemenuFontVariantAllSmallCaps  UpdatemenuFontVariant = "all-small-caps"
	UpdatemenuFontVariantAllPetiteCaps UpdatemenuFontVariant = "all-petite-caps"
	UpdatemenuFontVariantPetiteCaps    UpdatemenuFontVariant = "petite-caps"
	UpdatemenuFontVariantUnicase       UpdatemenuFontVariant = "unicase"
)

// UpdatemenuType Determines whether the buttons are accessible via a dropdown menu or whether the buttons are stacked horizontally or vertically
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.type
type UpdatemenuType string

const (
	UpdatemenuTypeDropdown UpdatemenuType = "dropdown"
	UpdatemenuTypeButtons  UpdatemenuType = "buttons"
)

// UpdatemenuXanchor Sets the update menu's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.xanchor
type UpdatemenuXanchor string

const (
	UpdatemenuXanchorAuto   UpdatemenuXanchor = "auto"
	UpdatemenuXanchorLeft   UpdatemenuXanchor = "left"
	UpdatemenuXanchorCenter UpdatemenuXanchor = "center"
	UpdatemenuXanchorRight  UpdatemenuXanchor = "right"
)

// UpdatemenuYanchor Sets the update menu's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.yanchor
type UpdatemenuYanchor string

const (
	UpdatemenuYanchorAuto   UpdatemenuYanchor = "auto"
	UpdatemenuYanchorTop    UpdatemenuYanchor = "top"
	UpdatemenuYanchorMiddle UpdatemenuYanchor = "middle"
	UpdatemenuYanchorBottom UpdatemenuYanchor = "bottom"
)

// AnnotationArrowside Sets the annotation arrow head position.
// .schema.layout.layoutAttributes.annotations.items.annotation.arrowside
type AnnotationArrowside string

const (
	// Flags
	AnnotationArrowsideEnd   AnnotationArrowside = "end"
	AnnotationArrowsideStart AnnotationArrowside = "start"

	// Extra
	AnnotationArrowsideNone AnnotationArrowside = "none"
)

// AnnotationFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.annotations.items.annotation.font.lineposition
type AnnotationFontLineposition string

const (
	// Flags
	AnnotationFontLinepositionUnder   AnnotationFontLineposition = "under"
	AnnotationFontLinepositionOver    AnnotationFontLineposition = "over"
	AnnotationFontLinepositionThrough AnnotationFontLineposition = "through"

	// Extra
	AnnotationFontLinepositionNone AnnotationFontLineposition = "none"
)

// AnnotationHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.annotations.items.annotation.hoverlabel.font.lineposition
type AnnotationHoverlabelFontLineposition string

const (
	// Flags
	AnnotationHoverlabelFontLinepositionUnder   AnnotationHoverlabelFontLineposition = "under"
	AnnotationHoverlabelFontLinepositionOver    AnnotationHoverlabelFontLineposition = "over"
	AnnotationHoverlabelFontLinepositionThrough AnnotationHoverlabelFontLineposition = "through"

	// Extra
	AnnotationHoverlabelFontLinepositionNone AnnotationHoverlabelFontLineposition = "none"
)

// LayoutClickmode Determines the mode of single click interactions. *event* is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes *lasso* and *select*, but with no event data attached (kept for compatibility reasons). The *select* flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. *select* with `hovermode`: *x* can be confusing, consider explicitly setting `hovermode`: *closest* when using this feature. Selection events are sent accordingly as long as *event* flag is set as well. When the *event* flag is missing, `plotly_click` and `plotly_selected` events are not fired.
// .schema.layout.layoutAttributes.clickmode
type LayoutClickmode string

const (
	// Flags
	LayoutClickmodeEvent  LayoutClickmode = "event"
	LayoutClickmodeSelect LayoutClickmode = "select"

	// Extra
	LayoutClickmodeNone LayoutClickmode = "none"
)

// LayoutColoraxisColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.coloraxis.colorbar.tickfont.lineposition
type LayoutColoraxisColorbarTickfontLineposition string

const (
	// Flags
	LayoutColoraxisColorbarTickfontLinepositionUnder   LayoutColoraxisColorbarTickfontLineposition = "under"
	LayoutColoraxisColorbarTickfontLinepositionOver    LayoutColoraxisColorbarTickfontLineposition = "over"
	LayoutColoraxisColorbarTickfontLinepositionThrough LayoutColoraxisColorbarTickfontLineposition = "through"

	// Extra
	LayoutColoraxisColorbarTickfontLinepositionNone LayoutColoraxisColorbarTickfontLineposition = "none"
)

// LayoutColoraxisColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.coloraxis.colorbar.title.font.lineposition
type LayoutColoraxisColorbarTitleFontLineposition string

const (
	// Flags
	LayoutColoraxisColorbarTitleFontLinepositionUnder   LayoutColoraxisColorbarTitleFontLineposition = "under"
	LayoutColoraxisColorbarTitleFontLinepositionOver    LayoutColoraxisColorbarTitleFontLineposition = "over"
	LayoutColoraxisColorbarTitleFontLinepositionThrough LayoutColoraxisColorbarTitleFontLineposition = "through"

	// Extra
	LayoutColoraxisColorbarTitleFontLinepositionNone LayoutColoraxisColorbarTitleFontLineposition = "none"
)

// LayoutFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.font.lineposition
type LayoutFontLineposition string

const (
	// Flags
	LayoutFontLinepositionUnder   LayoutFontLineposition = "under"
	LayoutFontLinepositionOver    LayoutFontLineposition = "over"
	LayoutFontLinepositionThrough LayoutFontLineposition = "through"

	// Extra
	LayoutFontLinepositionNone LayoutFontLineposition = "none"
)

// LayoutHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.hoverlabel.font.lineposition
type LayoutHoverlabelFontLineposition string

const (
	// Flags
	LayoutHoverlabelFontLinepositionUnder   LayoutHoverlabelFontLineposition = "under"
	LayoutHoverlabelFontLinepositionOver    LayoutHoverlabelFontLineposition = "over"
	LayoutHoverlabelFontLinepositionThrough LayoutHoverlabelFontLineposition = "through"

	// Extra
	LayoutHoverlabelFontLinepositionNone LayoutHoverlabelFontLineposition = "none"
)

// LayoutHoverlabelGrouptitlefontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.hoverlabel.grouptitlefont.lineposition
type LayoutHoverlabelGrouptitlefontLineposition string

const (
	// Flags
	LayoutHoverlabelGrouptitlefontLinepositionUnder   LayoutHoverlabelGrouptitlefontLineposition = "under"
	LayoutHoverlabelGrouptitlefontLinepositionOver    LayoutHoverlabelGrouptitlefontLineposition = "over"
	LayoutHoverlabelGrouptitlefontLinepositionThrough LayoutHoverlabelGrouptitlefontLineposition = "through"

	// Extra
	LayoutHoverlabelGrouptitlefontLinepositionNone LayoutHoverlabelGrouptitlefontLineposition = "none"
)

// LayoutLegendFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.legend.font.lineposition
type LayoutLegendFontLineposition string

const (
	// Flags
	LayoutLegendFontLinepositionUnder   LayoutLegendFontLineposition = "under"
	LayoutLegendFontLinepositionOver    LayoutLegendFontLineposition = "over"
	LayoutLegendFontLinepositionThrough LayoutLegendFontLineposition = "through"

	// Extra
	LayoutLegendFontLinepositionNone LayoutLegendFontLineposition = "none"
)

// LayoutLegendGrouptitlefontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.legend.grouptitlefont.lineposition
type LayoutLegendGrouptitlefontLineposition string

const (
	// Flags
	LayoutLegendGrouptitlefontLinepositionUnder   LayoutLegendGrouptitlefontLineposition = "under"
	LayoutLegendGrouptitlefontLinepositionOver    LayoutLegendGrouptitlefontLineposition = "over"
	LayoutLegendGrouptitlefontLinepositionThrough LayoutLegendGrouptitlefontLineposition = "through"

	// Extra
	LayoutLegendGrouptitlefontLinepositionNone LayoutLegendGrouptitlefontLineposition = "none"
)

// LayoutLegendTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.legend.title.font.lineposition
type LayoutLegendTitleFontLineposition string

const (
	// Flags
	LayoutLegendTitleFontLinepositionUnder   LayoutLegendTitleFontLineposition = "under"
	LayoutLegendTitleFontLinepositionOver    LayoutLegendTitleFontLineposition = "over"
	LayoutLegendTitleFontLinepositionThrough LayoutLegendTitleFontLineposition = "through"

	// Extra
	LayoutLegendTitleFontLinepositionNone LayoutLegendTitleFontLineposition = "none"
)

// LayoutLegendTraceorder Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.
// .schema.layout.layoutAttributes.legend.traceorder
type LayoutLegendTraceorder string

const (
	// Flags
	LayoutLegendTraceorderReversed LayoutLegendTraceorder = "reversed"
	LayoutLegendTraceorderGrouped  LayoutLegendTraceorder = "grouped"

	// Extra
	LayoutLegendTraceorderNormal LayoutLegendTraceorder = "normal"
)

// LayoutNewshapeLabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.newshape.label.font.lineposition
type LayoutNewshapeLabelFontLineposition string

const (
	// Flags
	LayoutNewshapeLabelFontLinepositionUnder   LayoutNewshapeLabelFontLineposition = "under"
	LayoutNewshapeLabelFontLinepositionOver    LayoutNewshapeLabelFontLineposition = "over"
	LayoutNewshapeLabelFontLinepositionThrough LayoutNewshapeLabelFontLineposition = "through"

	// Extra
	LayoutNewshapeLabelFontLinepositionNone LayoutNewshapeLabelFontLineposition = "none"
)

// LayoutNewshapeLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.newshape.legendgrouptitle.font.lineposition
type LayoutNewshapeLegendgrouptitleFontLineposition string

const (
	// Flags
	LayoutNewshapeLegendgrouptitleFontLinepositionUnder   LayoutNewshapeLegendgrouptitleFontLineposition = "under"
	LayoutNewshapeLegendgrouptitleFontLinepositionOver    LayoutNewshapeLegendgrouptitleFontLineposition = "over"
	LayoutNewshapeLegendgrouptitleFontLinepositionThrough LayoutNewshapeLegendgrouptitleFontLineposition = "through"

	// Extra
	LayoutNewshapeLegendgrouptitleFontLinepositionNone LayoutNewshapeLegendgrouptitleFontLineposition = "none"
)

// LayoutPolarAngularaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.polar.angularaxis.tickfont.lineposition
type LayoutPolarAngularaxisTickfontLineposition string

const (
	// Flags
	LayoutPolarAngularaxisTickfontLinepositionUnder   LayoutPolarAngularaxisTickfontLineposition = "under"
	LayoutPolarAngularaxisTickfontLinepositionOver    LayoutPolarAngularaxisTickfontLineposition = "over"
	LayoutPolarAngularaxisTickfontLinepositionThrough LayoutPolarAngularaxisTickfontLineposition = "through"

	// Extra
	LayoutPolarAngularaxisTickfontLinepositionNone LayoutPolarAngularaxisTickfontLineposition = "none"
)

// LayoutPolarRadialaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.polar.radialaxis.tickfont.lineposition
type LayoutPolarRadialaxisTickfontLineposition string

const (
	// Flags
	LayoutPolarRadialaxisTickfontLinepositionUnder   LayoutPolarRadialaxisTickfontLineposition = "under"
	LayoutPolarRadialaxisTickfontLinepositionOver    LayoutPolarRadialaxisTickfontLineposition = "over"
	LayoutPolarRadialaxisTickfontLinepositionThrough LayoutPolarRadialaxisTickfontLineposition = "through"

	// Extra
	LayoutPolarRadialaxisTickfontLinepositionNone LayoutPolarRadialaxisTickfontLineposition = "none"
)

// LayoutPolarRadialaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.polar.radialaxis.title.font.lineposition
type LayoutPolarRadialaxisTitleFontLineposition string

const (
	// Flags
	LayoutPolarRadialaxisTitleFontLinepositionUnder   LayoutPolarRadialaxisTitleFontLineposition = "under"
	LayoutPolarRadialaxisTitleFontLinepositionOver    LayoutPolarRadialaxisTitleFontLineposition = "over"
	LayoutPolarRadialaxisTitleFontLinepositionThrough LayoutPolarRadialaxisTitleFontLineposition = "through"

	// Extra
	LayoutPolarRadialaxisTitleFontLinepositionNone LayoutPolarRadialaxisTitleFontLineposition = "none"
)

// LayoutSceneXaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.scene.xaxis.tickfont.lineposition
type LayoutSceneXaxisTickfontLineposition string

const (
	// Flags
	LayoutSceneXaxisTickfontLinepositionUnder   LayoutSceneXaxisTickfontLineposition = "under"
	LayoutSceneXaxisTickfontLinepositionOver    LayoutSceneXaxisTickfontLineposition = "over"
	LayoutSceneXaxisTickfontLinepositionThrough LayoutSceneXaxisTickfontLineposition = "through"

	// Extra
	LayoutSceneXaxisTickfontLinepositionNone LayoutSceneXaxisTickfontLineposition = "none"
)

// LayoutSceneXaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.scene.xaxis.title.font.lineposition
type LayoutSceneXaxisTitleFontLineposition string

const (
	// Flags
	LayoutSceneXaxisTitleFontLinepositionUnder   LayoutSceneXaxisTitleFontLineposition = "under"
	LayoutSceneXaxisTitleFontLinepositionOver    LayoutSceneXaxisTitleFontLineposition = "over"
	LayoutSceneXaxisTitleFontLinepositionThrough LayoutSceneXaxisTitleFontLineposition = "through"

	// Extra
	LayoutSceneXaxisTitleFontLinepositionNone LayoutSceneXaxisTitleFontLineposition = "none"
)

// LayoutSceneYaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.scene.yaxis.tickfont.lineposition
type LayoutSceneYaxisTickfontLineposition string

const (
	// Flags
	LayoutSceneYaxisTickfontLinepositionUnder   LayoutSceneYaxisTickfontLineposition = "under"
	LayoutSceneYaxisTickfontLinepositionOver    LayoutSceneYaxisTickfontLineposition = "over"
	LayoutSceneYaxisTickfontLinepositionThrough LayoutSceneYaxisTickfontLineposition = "through"

	// Extra
	LayoutSceneYaxisTickfontLinepositionNone LayoutSceneYaxisTickfontLineposition = "none"
)

// LayoutSceneYaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.scene.yaxis.title.font.lineposition
type LayoutSceneYaxisTitleFontLineposition string

const (
	// Flags
	LayoutSceneYaxisTitleFontLinepositionUnder   LayoutSceneYaxisTitleFontLineposition = "under"
	LayoutSceneYaxisTitleFontLinepositionOver    LayoutSceneYaxisTitleFontLineposition = "over"
	LayoutSceneYaxisTitleFontLinepositionThrough LayoutSceneYaxisTitleFontLineposition = "through"

	// Extra
	LayoutSceneYaxisTitleFontLinepositionNone LayoutSceneYaxisTitleFontLineposition = "none"
)

// LayoutSceneZaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.scene.zaxis.tickfont.lineposition
type LayoutSceneZaxisTickfontLineposition string

const (
	// Flags
	LayoutSceneZaxisTickfontLinepositionUnder   LayoutSceneZaxisTickfontLineposition = "under"
	LayoutSceneZaxisTickfontLinepositionOver    LayoutSceneZaxisTickfontLineposition = "over"
	LayoutSceneZaxisTickfontLinepositionThrough LayoutSceneZaxisTickfontLineposition = "through"

	// Extra
	LayoutSceneZaxisTickfontLinepositionNone LayoutSceneZaxisTickfontLineposition = "none"
)

// LayoutSceneZaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.scene.zaxis.title.font.lineposition
type LayoutSceneZaxisTitleFontLineposition string

const (
	// Flags
	LayoutSceneZaxisTitleFontLinepositionUnder   LayoutSceneZaxisTitleFontLineposition = "under"
	LayoutSceneZaxisTitleFontLinepositionOver    LayoutSceneZaxisTitleFontLineposition = "over"
	LayoutSceneZaxisTitleFontLinepositionThrough LayoutSceneZaxisTitleFontLineposition = "through"

	// Extra
	LayoutSceneZaxisTitleFontLinepositionNone LayoutSceneZaxisTitleFontLineposition = "none"
)

// ShapeLabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.shapes.items.shape.label.font.lineposition
type ShapeLabelFontLineposition string

const (
	// Flags
	ShapeLabelFontLinepositionUnder   ShapeLabelFontLineposition = "under"
	ShapeLabelFontLinepositionOver    ShapeLabelFontLineposition = "over"
	ShapeLabelFontLinepositionThrough ShapeLabelFontLineposition = "through"

	// Extra
	ShapeLabelFontLinepositionNone ShapeLabelFontLineposition = "none"
)

// ShapeLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.shapes.items.shape.legendgrouptitle.font.lineposition
type ShapeLegendgrouptitleFontLineposition string

const (
	// Flags
	ShapeLegendgrouptitleFontLinepositionUnder   ShapeLegendgrouptitleFontLineposition = "under"
	ShapeLegendgrouptitleFontLinepositionOver    ShapeLegendgrouptitleFontLineposition = "over"
	ShapeLegendgrouptitleFontLinepositionThrough ShapeLegendgrouptitleFontLineposition = "through"

	// Extra
	ShapeLegendgrouptitleFontLinepositionNone ShapeLegendgrouptitleFontLineposition = "none"
)

// SliderCurrentvalueFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.sliders.items.slider.currentvalue.font.lineposition
type SliderCurrentvalueFontLineposition string

const (
	// Flags
	SliderCurrentvalueFontLinepositionUnder   SliderCurrentvalueFontLineposition = "under"
	SliderCurrentvalueFontLinepositionOver    SliderCurrentvalueFontLineposition = "over"
	SliderCurrentvalueFontLinepositionThrough SliderCurrentvalueFontLineposition = "through"

	// Extra
	SliderCurrentvalueFontLinepositionNone SliderCurrentvalueFontLineposition = "none"
)

// SliderFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.sliders.items.slider.font.lineposition
type SliderFontLineposition string

const (
	// Flags
	SliderFontLinepositionUnder   SliderFontLineposition = "under"
	SliderFontLinepositionOver    SliderFontLineposition = "over"
	SliderFontLinepositionThrough SliderFontLineposition = "through"

	// Extra
	SliderFontLinepositionNone SliderFontLineposition = "none"
)

// LayoutSmithImaginaryaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.smith.imaginaryaxis.tickfont.lineposition
type LayoutSmithImaginaryaxisTickfontLineposition string

const (
	// Flags
	LayoutSmithImaginaryaxisTickfontLinepositionUnder   LayoutSmithImaginaryaxisTickfontLineposition = "under"
	LayoutSmithImaginaryaxisTickfontLinepositionOver    LayoutSmithImaginaryaxisTickfontLineposition = "over"
	LayoutSmithImaginaryaxisTickfontLinepositionThrough LayoutSmithImaginaryaxisTickfontLineposition = "through"

	// Extra
	LayoutSmithImaginaryaxisTickfontLinepositionNone LayoutSmithImaginaryaxisTickfontLineposition = "none"
)

// LayoutSmithRealaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.smith.realaxis.tickfont.lineposition
type LayoutSmithRealaxisTickfontLineposition string

const (
	// Flags
	LayoutSmithRealaxisTickfontLinepositionUnder   LayoutSmithRealaxisTickfontLineposition = "under"
	LayoutSmithRealaxisTickfontLinepositionOver    LayoutSmithRealaxisTickfontLineposition = "over"
	LayoutSmithRealaxisTickfontLinepositionThrough LayoutSmithRealaxisTickfontLineposition = "through"

	// Extra
	LayoutSmithRealaxisTickfontLinepositionNone LayoutSmithRealaxisTickfontLineposition = "none"
)

// LayoutTernaryAaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.ternary.aaxis.tickfont.lineposition
type LayoutTernaryAaxisTickfontLineposition string

const (
	// Flags
	LayoutTernaryAaxisTickfontLinepositionUnder   LayoutTernaryAaxisTickfontLineposition = "under"
	LayoutTernaryAaxisTickfontLinepositionOver    LayoutTernaryAaxisTickfontLineposition = "over"
	LayoutTernaryAaxisTickfontLinepositionThrough LayoutTernaryAaxisTickfontLineposition = "through"

	// Extra
	LayoutTernaryAaxisTickfontLinepositionNone LayoutTernaryAaxisTickfontLineposition = "none"
)

// LayoutTernaryAaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.ternary.aaxis.title.font.lineposition
type LayoutTernaryAaxisTitleFontLineposition string

const (
	// Flags
	LayoutTernaryAaxisTitleFontLinepositionUnder   LayoutTernaryAaxisTitleFontLineposition = "under"
	LayoutTernaryAaxisTitleFontLinepositionOver    LayoutTernaryAaxisTitleFontLineposition = "over"
	LayoutTernaryAaxisTitleFontLinepositionThrough LayoutTernaryAaxisTitleFontLineposition = "through"

	// Extra
	LayoutTernaryAaxisTitleFontLinepositionNone LayoutTernaryAaxisTitleFontLineposition = "none"
)

// LayoutTernaryBaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.ternary.baxis.tickfont.lineposition
type LayoutTernaryBaxisTickfontLineposition string

const (
	// Flags
	LayoutTernaryBaxisTickfontLinepositionUnder   LayoutTernaryBaxisTickfontLineposition = "under"
	LayoutTernaryBaxisTickfontLinepositionOver    LayoutTernaryBaxisTickfontLineposition = "over"
	LayoutTernaryBaxisTickfontLinepositionThrough LayoutTernaryBaxisTickfontLineposition = "through"

	// Extra
	LayoutTernaryBaxisTickfontLinepositionNone LayoutTernaryBaxisTickfontLineposition = "none"
)

// LayoutTernaryBaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.ternary.baxis.title.font.lineposition
type LayoutTernaryBaxisTitleFontLineposition string

const (
	// Flags
	LayoutTernaryBaxisTitleFontLinepositionUnder   LayoutTernaryBaxisTitleFontLineposition = "under"
	LayoutTernaryBaxisTitleFontLinepositionOver    LayoutTernaryBaxisTitleFontLineposition = "over"
	LayoutTernaryBaxisTitleFontLinepositionThrough LayoutTernaryBaxisTitleFontLineposition = "through"

	// Extra
	LayoutTernaryBaxisTitleFontLinepositionNone LayoutTernaryBaxisTitleFontLineposition = "none"
)

// LayoutTernaryCaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.ternary.caxis.tickfont.lineposition
type LayoutTernaryCaxisTickfontLineposition string

const (
	// Flags
	LayoutTernaryCaxisTickfontLinepositionUnder   LayoutTernaryCaxisTickfontLineposition = "under"
	LayoutTernaryCaxisTickfontLinepositionOver    LayoutTernaryCaxisTickfontLineposition = "over"
	LayoutTernaryCaxisTickfontLinepositionThrough LayoutTernaryCaxisTickfontLineposition = "through"

	// Extra
	LayoutTernaryCaxisTickfontLinepositionNone LayoutTernaryCaxisTickfontLineposition = "none"
)

// LayoutTernaryCaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.ternary.caxis.title.font.lineposition
type LayoutTernaryCaxisTitleFontLineposition string

const (
	// Flags
	LayoutTernaryCaxisTitleFontLinepositionUnder   LayoutTernaryCaxisTitleFontLineposition = "under"
	LayoutTernaryCaxisTitleFontLinepositionOver    LayoutTernaryCaxisTitleFontLineposition = "over"
	LayoutTernaryCaxisTitleFontLinepositionThrough LayoutTernaryCaxisTitleFontLineposition = "through"

	// Extra
	LayoutTernaryCaxisTitleFontLinepositionNone LayoutTernaryCaxisTitleFontLineposition = "none"
)

// LayoutTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.title.font.lineposition
type LayoutTitleFontLineposition string

const (
	// Flags
	LayoutTitleFontLinepositionUnder   LayoutTitleFontLineposition = "under"
	LayoutTitleFontLinepositionOver    LayoutTitleFontLineposition = "over"
	LayoutTitleFontLinepositionThrough LayoutTitleFontLineposition = "through"

	// Extra
	LayoutTitleFontLinepositionNone LayoutTitleFontLineposition = "none"
)

// LayoutTitleSubtitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.title.subtitle.font.lineposition
type LayoutTitleSubtitleFontLineposition string

const (
	// Flags
	LayoutTitleSubtitleFontLinepositionUnder   LayoutTitleSubtitleFontLineposition = "under"
	LayoutTitleSubtitleFontLinepositionOver    LayoutTitleSubtitleFontLineposition = "over"
	LayoutTitleSubtitleFontLinepositionThrough LayoutTitleSubtitleFontLineposition = "through"

	// Extra
	LayoutTitleSubtitleFontLinepositionNone LayoutTitleSubtitleFontLineposition = "none"
)

// UpdatemenuFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.updatemenus.items.updatemenu.font.lineposition
type UpdatemenuFontLineposition string

const (
	// Flags
	UpdatemenuFontLinepositionUnder   UpdatemenuFontLineposition = "under"
	UpdatemenuFontLinepositionOver    UpdatemenuFontLineposition = "over"
	UpdatemenuFontLinepositionThrough UpdatemenuFontLineposition = "through"

	// Extra
	UpdatemenuFontLinepositionNone UpdatemenuFontLineposition = "none"
)

// LayoutXaxisAutomargin Determines whether long tick labels automatically grow the figure margins.
// .schema.layout.layoutAttributes.xaxis.automargin
type LayoutXaxisAutomargin interface{}

var (
	// Flags
	LayoutXaxisAutomarginHeight LayoutXaxisAutomargin = "height"
	LayoutXaxisAutomarginWidth  LayoutXaxisAutomargin = "width"
	LayoutXaxisAutomarginLeft   LayoutXaxisAutomargin = "left"
	LayoutXaxisAutomarginRight  LayoutXaxisAutomargin = "right"
	LayoutXaxisAutomarginTop    LayoutXaxisAutomargin = "top"
	LayoutXaxisAutomarginBottom LayoutXaxisAutomargin = "bottom"

	// Extra
	LayoutXaxisAutomarginTrue  LayoutXaxisAutomargin = true
	LayoutXaxisAutomarginFalse LayoutXaxisAutomargin = false
)

// LayoutXaxisRangeselectorFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.xaxis.rangeselector.font.lineposition
type LayoutXaxisRangeselectorFontLineposition string

const (
	// Flags
	LayoutXaxisRangeselectorFontLinepositionUnder   LayoutXaxisRangeselectorFontLineposition = "under"
	LayoutXaxisRangeselectorFontLinepositionOver    LayoutXaxisRangeselectorFontLineposition = "over"
	LayoutXaxisRangeselectorFontLinepositionThrough LayoutXaxisRangeselectorFontLineposition = "through"

	// Extra
	LayoutXaxisRangeselectorFontLinepositionNone LayoutXaxisRangeselectorFontLineposition = "none"
)

// LayoutXaxisSpikemode Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
// .schema.layout.layoutAttributes.xaxis.spikemode
type LayoutXaxisSpikemode string

const (
	// Flags
	LayoutXaxisSpikemodeToaxis LayoutXaxisSpikemode = "toaxis"
	LayoutXaxisSpikemodeAcross LayoutXaxisSpikemode = "across"
	LayoutXaxisSpikemodeMarker LayoutXaxisSpikemode = "marker"

	// Extra

)

// LayoutXaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.xaxis.tickfont.lineposition
type LayoutXaxisTickfontLineposition string

const (
	// Flags
	LayoutXaxisTickfontLinepositionUnder   LayoutXaxisTickfontLineposition = "under"
	LayoutXaxisTickfontLinepositionOver    LayoutXaxisTickfontLineposition = "over"
	LayoutXaxisTickfontLinepositionThrough LayoutXaxisTickfontLineposition = "through"

	// Extra
	LayoutXaxisTickfontLinepositionNone LayoutXaxisTickfontLineposition = "none"
)

// LayoutXaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.xaxis.title.font.lineposition
type LayoutXaxisTitleFontLineposition string

const (
	// Flags
	LayoutXaxisTitleFontLinepositionUnder   LayoutXaxisTitleFontLineposition = "under"
	LayoutXaxisTitleFontLinepositionOver    LayoutXaxisTitleFontLineposition = "over"
	LayoutXaxisTitleFontLinepositionThrough LayoutXaxisTitleFontLineposition = "through"

	// Extra
	LayoutXaxisTitleFontLinepositionNone LayoutXaxisTitleFontLineposition = "none"
)

// LayoutYaxisAutomargin Determines whether long tick labels automatically grow the figure margins.
// .schema.layout.layoutAttributes.yaxis.automargin
type LayoutYaxisAutomargin interface{}

var (
	// Flags
	LayoutYaxisAutomarginHeight LayoutYaxisAutomargin = "height"
	LayoutYaxisAutomarginWidth  LayoutYaxisAutomargin = "width"
	LayoutYaxisAutomarginLeft   LayoutYaxisAutomargin = "left"
	LayoutYaxisAutomarginRight  LayoutYaxisAutomargin = "right"
	LayoutYaxisAutomarginTop    LayoutYaxisAutomargin = "top"
	LayoutYaxisAutomarginBottom LayoutYaxisAutomargin = "bottom"

	// Extra
	LayoutYaxisAutomarginTrue  LayoutYaxisAutomargin = true
	LayoutYaxisAutomarginFalse LayoutYaxisAutomargin = false
)

// LayoutYaxisSpikemode Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
// .schema.layout.layoutAttributes.yaxis.spikemode
type LayoutYaxisSpikemode string

const (
	// Flags
	LayoutYaxisSpikemodeToaxis LayoutYaxisSpikemode = "toaxis"
	LayoutYaxisSpikemodeAcross LayoutYaxisSpikemode = "across"
	LayoutYaxisSpikemodeMarker LayoutYaxisSpikemode = "marker"

	// Extra

)

// LayoutYaxisTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.yaxis.tickfont.lineposition
type LayoutYaxisTickfontLineposition string

const (
	// Flags
	LayoutYaxisTickfontLinepositionUnder   LayoutYaxisTickfontLineposition = "under"
	LayoutYaxisTickfontLinepositionOver    LayoutYaxisTickfontLineposition = "over"
	LayoutYaxisTickfontLinepositionThrough LayoutYaxisTickfontLineposition = "through"

	// Extra
	LayoutYaxisTickfontLinepositionNone LayoutYaxisTickfontLineposition = "none"
)

// LayoutYaxisTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.layout.layoutAttributes.yaxis.title.font.lineposition
type LayoutYaxisTitleFontLineposition string

const (
	// Flags
	LayoutYaxisTitleFontLinepositionUnder   LayoutYaxisTitleFontLineposition = "under"
	LayoutYaxisTitleFontLinepositionOver    LayoutYaxisTitleFontLineposition = "over"
	LayoutYaxisTitleFontLinepositionThrough LayoutYaxisTitleFontLineposition = "through"

	// Extra
	LayoutYaxisTitleFontLinepositionNone LayoutYaxisTitleFontLineposition = "none"
)
