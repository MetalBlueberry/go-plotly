package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeContour types.TraceType = "contour"

func (t *Contour) GetType() types.TraceType {
	return TraceTypeContour
}

func (t *Contour) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Contour
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Contour The data from which contour lines are computed is set in `z`. Data in `z` must be a {2D array} of numbers. Say that `z` has N rows and M columns, then by default, these N rows correspond to N y coordinates (set in `y` or auto-generated) and the M columns correspond to M x coordinates (set in `x` or auto-generated). By setting `transpose` to *true*, the above behavior is flipped.
type Contour struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	// .schema.traces.contour.attributes.autocolorscale
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Autocontour
	// arrayOK: false
	// type: boolean
	// Determines whether or not the contour level attributes are picked by an algorithm. If *true*, the number of contour levels can be set in `ncontours`. If *false*, set the contour level attributes in `contours`.
	// .schema.traces.contour.attributes.autocontour
	Autocontour types.BoolType `json:"autocontour,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	// .schema.traces.contour.attributes.coloraxis
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.colorbar
	Colorbar *ContourColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	// .schema.traces.contour.attributes.colorscale
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Connectgaps
	// arrayOK: false
	// type: boolean
	// Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data are filled in. It is defaulted to true if `z` is a one dimensional array otherwise it is defaulted to false.
	// .schema.traces.contour.attributes.connectgaps
	Connectgaps types.BoolType `json:"connectgaps,omitempty"`

	// Contours
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.contours
	Contours *ContourContours `json:"contours,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.customdata
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	// .schema.traces.contour.attributes.customdatasrc
	Customdatasrc types.StringType `json:"customdatasrc,omitempty"`

	// Dx
	// arrayOK: false
	// type: number
	// Sets the x coordinate step. See `x0` for more info.
	// .schema.traces.contour.attributes.dx
	Dx types.NumberType `json:"dx,omitempty"`

	// Dy
	// arrayOK: false
	// type: number
	// Sets the y coordinate step. See `y0` for more info.
	// .schema.traces.contour.attributes.dy
	Dy types.NumberType `json:"dy,omitempty"`

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the fill color if `contours.type` is *constraint*. Defaults to a half-transparent variant of the line color, marker color, or marker line color, whichever is available.
	// .schema.traces.contour.attributes.fillcolor
	Fillcolor types.Color `json:"fillcolor,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	// .schema.traces.contour.attributes.hoverinfo
	Hoverinfo *types.ArrayOK[*ContourHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	// .schema.traces.contour.attributes.hoverinfosrc
	Hoverinfosrc types.StringType `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.hoverlabel
	Hoverlabel *ContourHoverlabel `json:"hoverlabel,omitempty"`

	// Hoverongaps
	// arrayOK: false
	// type: boolean
	// Determines whether or not gaps (i.e. {nan} or missing values) in the `z` data have hover labels associated with them.
	// .schema.traces.contour.attributes.hoverongaps
	Hoverongaps types.BoolType `json:"hoverongaps,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	// .schema.traces.contour.attributes.hovertemplate
	Hovertemplate *types.ArrayOK[*types.StringType] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	// .schema.traces.contour.attributes.hovertemplatesrc
	Hovertemplatesrc types.StringType `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: false
	// type: data_array
	// Same as `text`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.hovertext
	Hovertext *types.DataArrayType `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	// .schema.traces.contour.attributes.hovertextsrc
	Hovertextsrc types.StringType `json:"hovertextsrc,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.ids
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	// .schema.traces.contour.attributes.idssrc
	Idssrc types.StringType `json:"idssrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	// .schema.traces.contour.attributes.legend
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	// .schema.traces.contour.attributes.legendgroup
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.legendgrouptitle
	Legendgrouptitle *ContourLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	// .schema.traces.contour.attributes.legendrank
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	// .schema.traces.contour.attributes.legendwidth
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.line
	Line *ContourLine `json:"line,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	// .schema.traces.contour.attributes.meta
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	// .schema.traces.contour.attributes.metasrc
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	// .schema.traces.contour.attributes.name
	Name types.StringType `json:"name,omitempty"`

	// Ncontours
	// arrayOK: false
	// type: integer
	// Sets the maximum number of contour levels. The actual number of contours will be chosen automatically to be less than or equal to the value of `ncontours`. Has an effect only if `autocontour` is *true* or if `contours.size` is missing.
	// .schema.traces.contour.attributes.ncontours
	Ncontours types.IntegerType `json:"ncontours,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the trace.
	// .schema.traces.contour.attributes.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
	// .schema.traces.contour.attributes.reversescale
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	// .schema.traces.contour.attributes.showlegend
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace.
	// .schema.traces.contour.attributes.showscale
	Showscale types.BoolType `json:"showscale,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.stream
	Stream *ContourStream `json:"stream,omitempty"`

	// Text
	// arrayOK: false
	// type: data_array
	// Sets the text elements associated with each z value.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.text
	Text *types.DataArrayType `json:"text,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.textfont
	Textfont *ContourTextfont `json:"textfont,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	// .schema.traces.contour.attributes.textsrc
	Textsrc types.StringType `json:"textsrc,omitempty"`

	// Texttemplate
	// arrayOK: false
	// type: string
	// For this trace it only has an effect if `coloring` is set to *heatmap*. Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `x`, `y`, `z` and `text`.
	// .schema.traces.contour.attributes.texttemplate
	Texttemplate types.StringType `json:"texttemplate,omitempty"`

	// Transforms
	// role: Object
	// items: ContourTransform
	// .schema.traces.contour.attributes.transforms
	Transforms []ContourTransform `json:"transforms,omitempty"`

	// Transpose
	// arrayOK: false
	// type: boolean
	// Transposes the z data.
	// .schema.traces.contour.attributes.transpose
	Transpose types.BoolType `json:"transpose,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	// .schema.traces.contour.attributes.uid
	Uid types.StringType `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	// .schema.traces.contour.attributes.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	// .schema.traces.contour.attributes.visible
	Visible ContourVisible `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: data_array
	// Sets the x coordinates.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.x
	X *types.DataArrayType `json:"x,omitempty"`

	// X0
	// arrayOK: false
	// type: any
	// Alternate to `x`. Builds a linear space of x coordinates. Use with `dx` where `x0` is the starting coordinate and `dx` the step.
	// .schema.traces.contour.attributes.x0
	X0 interface{} `json:"x0,omitempty"`

	// Xaxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's x coordinates and a 2D cartesian x axis. If *x* (the default value), the x coordinates refer to `layout.xaxis`. If *x2*, the x coordinates refer to `layout.xaxis2`, and so on.
	// .schema.traces.contour.attributes.xaxis
	Xaxis types.StringType `json:"xaxis,omitempty"`

	// Xcalendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use with `x` date data.
	// .schema.traces.contour.attributes.xcalendar
	Xcalendar ContourXcalendar `json:"xcalendar,omitempty"`

	// Xhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.
	// .schema.traces.contour.attributes.xhoverformat
	Xhoverformat types.StringType `json:"xhoverformat,omitempty"`

	// Xperiod
	// arrayOK: false
	// type: any
	// Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the x axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
	// .schema.traces.contour.attributes.xperiod
	Xperiod interface{} `json:"xperiod,omitempty"`

	// Xperiod0
	// arrayOK: false
	// type: any
	// Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the x0 axis. When `x0period` is round number of weeks, the `x0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
	// .schema.traces.contour.attributes.xperiod0
	Xperiod0 interface{} `json:"xperiod0,omitempty"`

	// Xperiodalignment
	// arrayOK: false
	// default: middle
	// type: enumerated
	// Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
	// .schema.traces.contour.attributes.xperiodalignment
	Xperiodalignment ContourXperiodalignment `json:"xperiodalignment,omitempty"`

	// Xsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `x`.
	// .schema.traces.contour.attributes.xsrc
	Xsrc types.StringType `json:"xsrc,omitempty"`

	// Xtype
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
	// .schema.traces.contour.attributes.xtype
	Xtype ContourXtype `json:"xtype,omitempty"`

	// Y
	// arrayOK: false
	// type: data_array
	// Sets the y coordinates.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.y
	Y *types.DataArrayType `json:"y,omitempty"`

	// Y0
	// arrayOK: false
	// type: any
	// Alternate to `y`. Builds a linear space of y coordinates. Use with `dy` where `y0` is the starting coordinate and `dy` the step.
	// .schema.traces.contour.attributes.y0
	Y0 interface{} `json:"y0,omitempty"`

	// Yaxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's y coordinates and a 2D cartesian y axis. If *y* (the default value), the y coordinates refer to `layout.yaxis`. If *y2*, the y coordinates refer to `layout.yaxis2`, and so on.
	// .schema.traces.contour.attributes.yaxis
	Yaxis types.StringType `json:"yaxis,omitempty"`

	// Ycalendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use with `y` date data.
	// .schema.traces.contour.attributes.ycalendar
	Ycalendar ContourYcalendar `json:"ycalendar,omitempty"`

	// Yhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.
	// .schema.traces.contour.attributes.yhoverformat
	Yhoverformat types.StringType `json:"yhoverformat,omitempty"`

	// Yperiod
	// arrayOK: false
	// type: any
	// Only relevant when the axis `type` is *date*. Sets the period positioning in milliseconds or *M<n>* on the y axis. Special values in the form of *M<n>* could be used to declare the number of months. In this case `n` must be a positive integer.
	// .schema.traces.contour.attributes.yperiod
	Yperiod interface{} `json:"yperiod,omitempty"`

	// Yperiod0
	// arrayOK: false
	// type: any
	// Only relevant when the axis `type` is *date*. Sets the base for period positioning in milliseconds or date string on the y0 axis. When `y0period` is round number of weeks, the `y0period0` by default would be on a Sunday i.e. 2000-01-02, otherwise it would be at 2000-01-01.
	// .schema.traces.contour.attributes.yperiod0
	Yperiod0 interface{} `json:"yperiod0,omitempty"`

	// Yperiodalignment
	// arrayOK: false
	// default: middle
	// type: enumerated
	// Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
	// .schema.traces.contour.attributes.yperiodalignment
	Yperiodalignment ContourYperiodalignment `json:"yperiodalignment,omitempty"`

	// Ysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `y`.
	// .schema.traces.contour.attributes.ysrc
	Ysrc types.StringType `json:"ysrc,omitempty"`

	// Ytype
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
	// .schema.traces.contour.attributes.ytype
	Ytype ContourYtype `json:"ytype,omitempty"`

	// Z
	// arrayOK: false
	// type: data_array
	// Sets the z data.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.z
	Z *types.DataArrayType `json:"z,omitempty"`

	// Zauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.
	// .schema.traces.contour.attributes.zauto
	Zauto types.BoolType `json:"zauto,omitempty"`

	// Zhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.
	// .schema.traces.contour.attributes.zhoverformat
	Zhoverformat types.StringType `json:"zhoverformat,omitempty"`

	// Zmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
	// .schema.traces.contour.attributes.zmax
	Zmax types.NumberType `json:"zmax,omitempty"`

	// Zmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
	// .schema.traces.contour.attributes.zmid
	Zmid types.NumberType `json:"zmid,omitempty"`

	// Zmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
	// .schema.traces.contour.attributes.zmin
	Zmin types.NumberType `json:"zmin,omitempty"`

	// Zorder
	// arrayOK: false
	// type: integer
	// Sets the layer on which this trace is displayed, relative to other SVG traces on the same subplot. SVG traces with higher `zorder` appear in front of those with lower `zorder`.
	// .schema.traces.contour.attributes.zorder
	Zorder types.IntegerType `json:"zorder,omitempty"`

	// Zsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `z`.
	// .schema.traces.contour.attributes.zsrc
	Zsrc types.StringType `json:"zsrc,omitempty"`
}

// ContourColorbarTickfont Sets the color bar's tick label font
type ContourColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.contour.attributes.colorbar.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.contour.attributes.colorbar.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.contour.attributes.colorbar.tickfont.lineposition
	Lineposition ContourColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.contour.attributes.colorbar.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.contour.attributes.colorbar.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.contour.attributes.colorbar.tickfont.style
	Style ContourColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.contour.attributes.colorbar.tickfont.textcase
	Textcase ContourColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.contour.attributes.colorbar.tickfont.variant
	Variant ContourColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.contour.attributes.colorbar.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ContourColorbarTickformatstop
type ContourColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.traces.contour.attributes.colorbar.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.traces.contour.attributes.colorbar.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.traces.contour.attributes.colorbar.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.traces.contour.attributes.colorbar.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.traces.contour.attributes.colorbar.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// ContourColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type ContourColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.contour.attributes.colorbar.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.contour.attributes.colorbar.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.contour.attributes.colorbar.title.font.lineposition
	Lineposition ContourColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.contour.attributes.colorbar.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.contour.attributes.colorbar.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.contour.attributes.colorbar.title.font.style
	Style ContourColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.contour.attributes.colorbar.title.font.textcase
	Textcase ContourColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.contour.attributes.colorbar.title.font.variant
	Variant ContourColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.contour.attributes.colorbar.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ContourColorbarTitle
type ContourColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.colorbar.title.font
	Font *ContourColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	// .schema.traces.contour.attributes.colorbar.title.side
	Side ContourColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.traces.contour.attributes.colorbar.title.text
	Text types.StringType `json:"text,omitempty"`
}

// ContourColorbar
type ContourColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	// .schema.traces.contour.attributes.colorbar.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.traces.contour.attributes.colorbar.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	// .schema.traces.contour.attributes.colorbar.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.traces.contour.attributes.colorbar.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.traces.contour.attributes.colorbar.exponentformat
	Exponentformat ContourColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.traces.contour.attributes.colorbar.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	// .schema.traces.contour.attributes.colorbar.len
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	// .schema.traces.contour.attributes.colorbar.lenmode
	Lenmode ContourColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.traces.contour.attributes.colorbar.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.traces.contour.attributes.colorbar.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	// .schema.traces.contour.attributes.colorbar.orientation
	Orientation ContourColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.traces.contour.attributes.colorbar.outlinecolor
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.traces.contour.attributes.colorbar.outlinewidth
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.traces.contour.attributes.colorbar.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.traces.contour.attributes.colorbar.showexponent
	Showexponent ContourColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.traces.contour.attributes.colorbar.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.traces.contour.attributes.colorbar.showtickprefix
	Showtickprefix ContourColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.traces.contour.attributes.colorbar.showticksuffix
	Showticksuffix ContourColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	// .schema.traces.contour.attributes.colorbar.thickness
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	// .schema.traces.contour.attributes.colorbar.thicknessmode
	Thicknessmode ContourColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.traces.contour.attributes.colorbar.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.traces.contour.attributes.colorbar.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.traces.contour.attributes.colorbar.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.colorbar.tickfont
	Tickfont *ContourColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.traces.contour.attributes.colorbar.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: ContourColorbarTickformatstop
	// .schema.traces.contour.attributes.colorbar.tickformatstops
	Tickformatstops []ContourColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	// .schema.traces.contour.attributes.colorbar.ticklabeloverflow
	Ticklabeloverflow ContourColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	// .schema.traces.contour.attributes.colorbar.ticklabelposition
	Ticklabelposition ContourColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.traces.contour.attributes.colorbar.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.traces.contour.attributes.colorbar.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.traces.contour.attributes.colorbar.tickmode
	Tickmode ContourColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.traces.contour.attributes.colorbar.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.traces.contour.attributes.colorbar.ticks
	Ticks ContourColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.traces.contour.attributes.colorbar.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.colorbar.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.traces.contour.attributes.colorbar.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.contour.attributes.colorbar.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.traces.contour.attributes.colorbar.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.traces.contour.attributes.colorbar.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.colorbar.title
	Title *ContourColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	// .schema.traces.contour.attributes.colorbar.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	// .schema.traces.contour.attributes.colorbar.xanchor
	Xanchor ContourColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	// .schema.traces.contour.attributes.colorbar.xpad
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	// .schema.traces.contour.attributes.colorbar.xref
	Xref ContourColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	// .schema.traces.contour.attributes.colorbar.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	// .schema.traces.contour.attributes.colorbar.yanchor
	Yanchor ContourColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	// .schema.traces.contour.attributes.colorbar.ypad
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	// .schema.traces.contour.attributes.colorbar.yref
	Yref ContourColorbarYref `json:"yref,omitempty"`
}

// ContourContoursLabelfont Sets the font used for labeling the contour levels. The default color comes from the lines, if shown. The default family and size come from `layout.font`.
type ContourContoursLabelfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.contour.attributes.contours.labelfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.contour.attributes.contours.labelfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.contour.attributes.contours.labelfont.lineposition
	Lineposition ContourContoursLabelfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.contour.attributes.contours.labelfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.contour.attributes.contours.labelfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.contour.attributes.contours.labelfont.style
	Style ContourContoursLabelfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.contour.attributes.contours.labelfont.textcase
	Textcase ContourContoursLabelfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.contour.attributes.contours.labelfont.variant
	Variant ContourContoursLabelfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.contour.attributes.contours.labelfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ContourContours
type ContourContours struct {

	// Coloring
	// arrayOK: false
	// default: fill
	// type: enumerated
	// Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
	// .schema.traces.contour.attributes.contours.coloring
	Coloring ContourContoursColoring `json:"coloring,omitempty"`

	// End
	// arrayOK: false
	// type: number
	// Sets the end contour level value. Must be more than `contours.start`
	// .schema.traces.contour.attributes.contours.end
	End types.NumberType `json:"end,omitempty"`

	// Labelfont
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.contours.labelfont
	Labelfont *ContourContoursLabelfont `json:"labelfont,omitempty"`

	// Labelformat
	// arrayOK: false
	// type: string
	// Sets the contour label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
	// .schema.traces.contour.attributes.contours.labelformat
	Labelformat types.StringType `json:"labelformat,omitempty"`

	// Operation
	// arrayOK: false
	// default: =
	// type: enumerated
	// Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
	// .schema.traces.contour.attributes.contours.operation
	Operation ContourContoursOperation `json:"operation,omitempty"`

	// Showlabels
	// arrayOK: false
	// type: boolean
	// Determines whether to label the contour lines with their values.
	// .schema.traces.contour.attributes.contours.showlabels
	Showlabels types.BoolType `json:"showlabels,omitempty"`

	// Showlines
	// arrayOK: false
	// type: boolean
	// Determines whether or not the contour lines are drawn. Has an effect only if `contours.coloring` is set to *fill*.
	// .schema.traces.contour.attributes.contours.showlines
	Showlines types.BoolType `json:"showlines,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	// Sets the step between each contour level. Must be positive.
	// .schema.traces.contour.attributes.contours.size
	Size types.NumberType `json:"size,omitempty"`

	// Start
	// arrayOK: false
	// type: number
	// Sets the starting contour level value. Must be less than `contours.end`
	// .schema.traces.contour.attributes.contours.start
	Start types.NumberType `json:"start,omitempty"`

	// Type
	// arrayOK: false
	// default: levels
	// type: enumerated
	// If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
	// .schema.traces.contour.attributes.contours.type
	Type ContourContoursType `json:"type,omitempty"`

	// Value
	// arrayOK: false
	// type: any
	// Sets the value or values of the constraint boundary. When `operation` is set to one of the comparison values (=,<,>=,>,<=) *value* is expected to be a number. When `operation` is set to one of the interval values ([],(),[),(],][,)(,](,)[) *value* is expected to be an array of two numbers where the first is the lower bound and the second is the upper bound.
	// .schema.traces.contour.attributes.contours.value
	Value interface{} `json:"value,omitempty"`
}

// ContourHoverlabelFont Sets the font used in hover labels.
type ContourHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	// .schema.traces.contour.attributes.hoverlabel.font.color
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	// .schema.traces.contour.attributes.hoverlabel.font.colorsrc
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.contour.attributes.hoverlabel.font.family
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	// .schema.traces.contour.attributes.hoverlabel.font.familysrc
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.contour.attributes.hoverlabel.font.lineposition
	Lineposition *types.ArrayOK[*ContourHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	// .schema.traces.contour.attributes.hoverlabel.font.linepositionsrc
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.contour.attributes.hoverlabel.font.shadow
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	// .schema.traces.contour.attributes.hoverlabel.font.shadowsrc
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	// .schema.traces.contour.attributes.hoverlabel.font.size
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	// .schema.traces.contour.attributes.hoverlabel.font.sizesrc
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.contour.attributes.hoverlabel.font.style
	Style *types.ArrayOK[*ContourHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	// .schema.traces.contour.attributes.hoverlabel.font.stylesrc
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.contour.attributes.hoverlabel.font.textcase
	Textcase *types.ArrayOK[*ContourHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	// .schema.traces.contour.attributes.hoverlabel.font.textcasesrc
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.contour.attributes.hoverlabel.font.variant
	Variant *types.ArrayOK[*ContourHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	// .schema.traces.contour.attributes.hoverlabel.font.variantsrc
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.contour.attributes.hoverlabel.font.weight
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	// .schema.traces.contour.attributes.hoverlabel.font.weightsrc
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// ContourHoverlabel
type ContourHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	// .schema.traces.contour.attributes.hoverlabel.align
	Align *types.ArrayOK[*ContourHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	// .schema.traces.contour.attributes.hoverlabel.alignsrc
	Alignsrc types.StringType `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	// .schema.traces.contour.attributes.hoverlabel.bgcolor
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	// .schema.traces.contour.attributes.hoverlabel.bgcolorsrc
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	// .schema.traces.contour.attributes.hoverlabel.bordercolor
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	// .schema.traces.contour.attributes.hoverlabel.bordercolorsrc
	Bordercolorsrc types.StringType `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.hoverlabel.font
	Font *ContourHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	// .schema.traces.contour.attributes.hoverlabel.namelength
	Namelength *types.ArrayOK[*types.IntegerType] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	// .schema.traces.contour.attributes.hoverlabel.namelengthsrc
	Namelengthsrc types.StringType `json:"namelengthsrc,omitempty"`
}

// ContourLegendgrouptitleFont Sets this legend group's title font.
type ContourLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.contour.attributes.legendgrouptitle.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.contour.attributes.legendgrouptitle.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.contour.attributes.legendgrouptitle.font.lineposition
	Lineposition ContourLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.contour.attributes.legendgrouptitle.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.contour.attributes.legendgrouptitle.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.contour.attributes.legendgrouptitle.font.style
	Style ContourLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.contour.attributes.legendgrouptitle.font.textcase
	Textcase ContourLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.contour.attributes.legendgrouptitle.font.variant
	Variant ContourLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.contour.attributes.legendgrouptitle.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ContourLegendgrouptitle
type ContourLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.contour.attributes.legendgrouptitle.font
	Font *ContourLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	// .schema.traces.contour.attributes.legendgrouptitle.text
	Text types.StringType `json:"text,omitempty"`
}

// ContourLine
type ContourLine struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the color of the contour level. Has no effect if `contours.coloring` is set to *lines*.
	// .schema.traces.contour.attributes.line.color
	Color types.Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	// .schema.traces.contour.attributes.line.dash
	Dash types.StringType `json:"dash,omitempty"`

	// Smoothing
	// arrayOK: false
	// type: number
	// Sets the amount of smoothing for the contour lines, where *0* corresponds to no smoothing.
	// .schema.traces.contour.attributes.line.smoothing
	Smoothing types.NumberType `json:"smoothing,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the contour line width in (in px) Defaults to *0.5* when `contours.type` is *levels*. Defaults to *2* when `contour.type` is *constraint*.
	// .schema.traces.contour.attributes.line.width
	Width types.NumberType `json:"width,omitempty"`
}

// ContourStream
type ContourStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	// .schema.traces.contour.attributes.stream.maxpoints
	Maxpoints types.NumberType `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	// .schema.traces.contour.attributes.stream.token
	Token types.StringType `json:"token,omitempty"`
}

// ContourTextfont For this trace it only has an effect if `coloring` is set to *heatmap*. Sets the text font.
type ContourTextfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.contour.attributes.textfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.contour.attributes.textfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.contour.attributes.textfont.lineposition
	Lineposition ContourTextfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.contour.attributes.textfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.contour.attributes.textfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.contour.attributes.textfont.style
	Style ContourTextfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.contour.attributes.textfont.textcase
	Textcase ContourTextfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.contour.attributes.textfont.variant
	Variant ContourTextfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.contour.attributes.textfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ContourTransform WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.
type ContourTransform struct {
}

// ContourColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.traces.contour.attributes.colorbar.exponentformat
type ContourColorbarExponentformat string

const (
	ContourColorbarExponentformatNone  ContourColorbarExponentformat = "none"
	ContourColorbarExponentformatE1    ContourColorbarExponentformat = "e"
	ContourColorbarExponentformatE2    ContourColorbarExponentformat = "E"
	ContourColorbarExponentformatPower ContourColorbarExponentformat = "power"
	ContourColorbarExponentformatSI    ContourColorbarExponentformat = "SI"
	ContourColorbarExponentformatB     ContourColorbarExponentformat = "B"
)

// ContourColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
// .schema.traces.contour.attributes.colorbar.lenmode
type ContourColorbarLenmode string

const (
	ContourColorbarLenmodeFraction ContourColorbarLenmode = "fraction"
	ContourColorbarLenmodePixels   ContourColorbarLenmode = "pixels"
)

// ContourColorbarOrientation Sets the orientation of the colorbar.
// .schema.traces.contour.attributes.colorbar.orientation
type ContourColorbarOrientation string

const (
	ContourColorbarOrientationH ContourColorbarOrientation = "h"
	ContourColorbarOrientationV ContourColorbarOrientation = "v"
)

// ContourColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.traces.contour.attributes.colorbar.showexponent
type ContourColorbarShowexponent string

const (
	ContourColorbarShowexponentAll   ContourColorbarShowexponent = "all"
	ContourColorbarShowexponentFirst ContourColorbarShowexponent = "first"
	ContourColorbarShowexponentLast  ContourColorbarShowexponent = "last"
	ContourColorbarShowexponentNone  ContourColorbarShowexponent = "none"
)

// ContourColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.traces.contour.attributes.colorbar.showtickprefix
type ContourColorbarShowtickprefix string

const (
	ContourColorbarShowtickprefixAll   ContourColorbarShowtickprefix = "all"
	ContourColorbarShowtickprefixFirst ContourColorbarShowtickprefix = "first"
	ContourColorbarShowtickprefixLast  ContourColorbarShowtickprefix = "last"
	ContourColorbarShowtickprefixNone  ContourColorbarShowtickprefix = "none"
)

// ContourColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.traces.contour.attributes.colorbar.showticksuffix
type ContourColorbarShowticksuffix string

const (
	ContourColorbarShowticksuffixAll   ContourColorbarShowticksuffix = "all"
	ContourColorbarShowticksuffixFirst ContourColorbarShowticksuffix = "first"
	ContourColorbarShowticksuffixLast  ContourColorbarShowticksuffix = "last"
	ContourColorbarShowticksuffixNone  ContourColorbarShowticksuffix = "none"
)

// ContourColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
// .schema.traces.contour.attributes.colorbar.thicknessmode
type ContourColorbarThicknessmode string

const (
	ContourColorbarThicknessmodeFraction ContourColorbarThicknessmode = "fraction"
	ContourColorbarThicknessmodePixels   ContourColorbarThicknessmode = "pixels"
)

// ContourColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.contour.attributes.colorbar.tickfont.style
type ContourColorbarTickfontStyle string

const (
	ContourColorbarTickfontStyleNormal ContourColorbarTickfontStyle = "normal"
	ContourColorbarTickfontStyleItalic ContourColorbarTickfontStyle = "italic"
)

// ContourColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.contour.attributes.colorbar.tickfont.textcase
type ContourColorbarTickfontTextcase string

const (
	ContourColorbarTickfontTextcaseNormal   ContourColorbarTickfontTextcase = "normal"
	ContourColorbarTickfontTextcaseWordCaps ContourColorbarTickfontTextcase = "word caps"
	ContourColorbarTickfontTextcaseUpper    ContourColorbarTickfontTextcase = "upper"
	ContourColorbarTickfontTextcaseLower    ContourColorbarTickfontTextcase = "lower"
)

// ContourColorbarTickfontVariant Sets the variant of the font.
// .schema.traces.contour.attributes.colorbar.tickfont.variant
type ContourColorbarTickfontVariant string

const (
	ContourColorbarTickfontVariantNormal        ContourColorbarTickfontVariant = "normal"
	ContourColorbarTickfontVariantSmallCaps     ContourColorbarTickfontVariant = "small-caps"
	ContourColorbarTickfontVariantAllSmallCaps  ContourColorbarTickfontVariant = "all-small-caps"
	ContourColorbarTickfontVariantAllPetiteCaps ContourColorbarTickfontVariant = "all-petite-caps"
	ContourColorbarTickfontVariantPetiteCaps    ContourColorbarTickfontVariant = "petite-caps"
	ContourColorbarTickfontVariantUnicase       ContourColorbarTickfontVariant = "unicase"
)

// ContourColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
// .schema.traces.contour.attributes.colorbar.ticklabeloverflow
type ContourColorbarTicklabeloverflow string

const (
	ContourColorbarTicklabeloverflowAllow          ContourColorbarTicklabeloverflow = "allow"
	ContourColorbarTicklabeloverflowHidePastDiv    ContourColorbarTicklabeloverflow = "hide past div"
	ContourColorbarTicklabeloverflowHidePastDomain ContourColorbarTicklabeloverflow = "hide past domain"
)

// ContourColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
// .schema.traces.contour.attributes.colorbar.ticklabelposition
type ContourColorbarTicklabelposition string

const (
	ContourColorbarTicklabelpositionOutside       ContourColorbarTicklabelposition = "outside"
	ContourColorbarTicklabelpositionInside        ContourColorbarTicklabelposition = "inside"
	ContourColorbarTicklabelpositionOutsideTop    ContourColorbarTicklabelposition = "outside top"
	ContourColorbarTicklabelpositionInsideTop     ContourColorbarTicklabelposition = "inside top"
	ContourColorbarTicklabelpositionOutsideLeft   ContourColorbarTicklabelposition = "outside left"
	ContourColorbarTicklabelpositionInsideLeft    ContourColorbarTicklabelposition = "inside left"
	ContourColorbarTicklabelpositionOutsideRight  ContourColorbarTicklabelposition = "outside right"
	ContourColorbarTicklabelpositionInsideRight   ContourColorbarTicklabelposition = "inside right"
	ContourColorbarTicklabelpositionOutsideBottom ContourColorbarTicklabelposition = "outside bottom"
	ContourColorbarTicklabelpositionInsideBottom  ContourColorbarTicklabelposition = "inside bottom"
)

// ContourColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.traces.contour.attributes.colorbar.tickmode
type ContourColorbarTickmode string

const (
	ContourColorbarTickmodeAuto   ContourColorbarTickmode = "auto"
	ContourColorbarTickmodeLinear ContourColorbarTickmode = "linear"
	ContourColorbarTickmodeArray  ContourColorbarTickmode = "array"
)

// ContourColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.traces.contour.attributes.colorbar.ticks
type ContourColorbarTicks string

const (
	ContourColorbarTicksOutside ContourColorbarTicks = "outside"
	ContourColorbarTicksInside  ContourColorbarTicks = "inside"
	ContourColorbarTicksEmpty   ContourColorbarTicks = ""
)

// ContourColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.contour.attributes.colorbar.title.font.style
type ContourColorbarTitleFontStyle string

const (
	ContourColorbarTitleFontStyleNormal ContourColorbarTitleFontStyle = "normal"
	ContourColorbarTitleFontStyleItalic ContourColorbarTitleFontStyle = "italic"
)

// ContourColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.contour.attributes.colorbar.title.font.textcase
type ContourColorbarTitleFontTextcase string

const (
	ContourColorbarTitleFontTextcaseNormal   ContourColorbarTitleFontTextcase = "normal"
	ContourColorbarTitleFontTextcaseWordCaps ContourColorbarTitleFontTextcase = "word caps"
	ContourColorbarTitleFontTextcaseUpper    ContourColorbarTitleFontTextcase = "upper"
	ContourColorbarTitleFontTextcaseLower    ContourColorbarTitleFontTextcase = "lower"
)

// ContourColorbarTitleFontVariant Sets the variant of the font.
// .schema.traces.contour.attributes.colorbar.title.font.variant
type ContourColorbarTitleFontVariant string

const (
	ContourColorbarTitleFontVariantNormal        ContourColorbarTitleFontVariant = "normal"
	ContourColorbarTitleFontVariantSmallCaps     ContourColorbarTitleFontVariant = "small-caps"
	ContourColorbarTitleFontVariantAllSmallCaps  ContourColorbarTitleFontVariant = "all-small-caps"
	ContourColorbarTitleFontVariantAllPetiteCaps ContourColorbarTitleFontVariant = "all-petite-caps"
	ContourColorbarTitleFontVariantPetiteCaps    ContourColorbarTitleFontVariant = "petite-caps"
	ContourColorbarTitleFontVariantUnicase       ContourColorbarTitleFontVariant = "unicase"
)

// ContourColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
// .schema.traces.contour.attributes.colorbar.title.side
type ContourColorbarTitleSide string

const (
	ContourColorbarTitleSideRight  ContourColorbarTitleSide = "right"
	ContourColorbarTitleSideTop    ContourColorbarTitleSide = "top"
	ContourColorbarTitleSideBottom ContourColorbarTitleSide = "bottom"
)

// ContourColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
// .schema.traces.contour.attributes.colorbar.xanchor
type ContourColorbarXanchor string

const (
	ContourColorbarXanchorLeft   ContourColorbarXanchor = "left"
	ContourColorbarXanchorCenter ContourColorbarXanchor = "center"
	ContourColorbarXanchorRight  ContourColorbarXanchor = "right"
)

// ContourColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
// .schema.traces.contour.attributes.colorbar.xref
type ContourColorbarXref string

const (
	ContourColorbarXrefContainer ContourColorbarXref = "container"
	ContourColorbarXrefPaper     ContourColorbarXref = "paper"
)

// ContourColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
// .schema.traces.contour.attributes.colorbar.yanchor
type ContourColorbarYanchor string

const (
	ContourColorbarYanchorTop    ContourColorbarYanchor = "top"
	ContourColorbarYanchorMiddle ContourColorbarYanchor = "middle"
	ContourColorbarYanchorBottom ContourColorbarYanchor = "bottom"
)

// ContourColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
// .schema.traces.contour.attributes.colorbar.yref
type ContourColorbarYref string

const (
	ContourColorbarYrefContainer ContourColorbarYref = "container"
	ContourColorbarYrefPaper     ContourColorbarYref = "paper"
)

// ContourContoursColoring Determines the coloring method showing the contour values. If *fill*, coloring is done evenly between each contour level If *heatmap*, a heatmap gradient coloring is applied between each contour level. If *lines*, coloring is done on the contour lines. If *none*, no coloring is applied on this trace.
// .schema.traces.contour.attributes.contours.coloring
type ContourContoursColoring string

const (
	ContourContoursColoringFill    ContourContoursColoring = "fill"
	ContourContoursColoringHeatmap ContourContoursColoring = "heatmap"
	ContourContoursColoringLines   ContourContoursColoring = "lines"
	ContourContoursColoringNone    ContourContoursColoring = "none"
)

// ContourContoursLabelfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.contour.attributes.contours.labelfont.style
type ContourContoursLabelfontStyle string

const (
	ContourContoursLabelfontStyleNormal ContourContoursLabelfontStyle = "normal"
	ContourContoursLabelfontStyleItalic ContourContoursLabelfontStyle = "italic"
)

// ContourContoursLabelfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.contour.attributes.contours.labelfont.textcase
type ContourContoursLabelfontTextcase string

const (
	ContourContoursLabelfontTextcaseNormal   ContourContoursLabelfontTextcase = "normal"
	ContourContoursLabelfontTextcaseWordCaps ContourContoursLabelfontTextcase = "word caps"
	ContourContoursLabelfontTextcaseUpper    ContourContoursLabelfontTextcase = "upper"
	ContourContoursLabelfontTextcaseLower    ContourContoursLabelfontTextcase = "lower"
)

// ContourContoursLabelfontVariant Sets the variant of the font.
// .schema.traces.contour.attributes.contours.labelfont.variant
type ContourContoursLabelfontVariant string

const (
	ContourContoursLabelfontVariantNormal        ContourContoursLabelfontVariant = "normal"
	ContourContoursLabelfontVariantSmallCaps     ContourContoursLabelfontVariant = "small-caps"
	ContourContoursLabelfontVariantAllSmallCaps  ContourContoursLabelfontVariant = "all-small-caps"
	ContourContoursLabelfontVariantAllPetiteCaps ContourContoursLabelfontVariant = "all-petite-caps"
	ContourContoursLabelfontVariantPetiteCaps    ContourContoursLabelfontVariant = "petite-caps"
	ContourContoursLabelfontVariantUnicase       ContourContoursLabelfontVariant = "unicase"
)

// ContourContoursOperation Sets the constraint operation. *=* keeps regions equal to `value` *<* and *<=* keep regions less than `value` *>* and *>=* keep regions greater than `value` *[]*, *()*, *[)*, and *(]* keep regions inside `value[0]` to `value[1]` *][*, *)(*, *](*, *)[* keep regions outside `value[0]` to value[1]` Open vs. closed intervals make no difference to constraint display, but all versions are allowed for consistency with filter transforms.
// .schema.traces.contour.attributes.contours.operation
type ContourContoursOperation string

const (
	ContourContoursOperationEq               ContourContoursOperation = "="
	ContourContoursOperationLt               ContourContoursOperation = "<"
	ContourContoursOperationGtEq             ContourContoursOperation = ">="
	ContourContoursOperationGt               ContourContoursOperation = ">"
	ContourContoursOperationLtEq             ContourContoursOperation = "<="
	ContourContoursOperationLbracketRbracket ContourContoursOperation = "[]"
	ContourContoursOperationLparRpar         ContourContoursOperation = "()"
	ContourContoursOperationLbracketRpar     ContourContoursOperation = "[)"
	ContourContoursOperationLparRbracket     ContourContoursOperation = "(]"
	ContourContoursOperationRbracketLbracket ContourContoursOperation = "]["
	ContourContoursOperationRparLpar         ContourContoursOperation = ")("
	ContourContoursOperationRbracketLpar     ContourContoursOperation = "]("
	ContourContoursOperationRparLbracket     ContourContoursOperation = ")["
)

// ContourContoursType If `levels`, the data is represented as a contour plot with multiple levels displayed. If `constraint`, the data is represented as constraints with the invalid region shaded as specified by the `operation` and `value` parameters.
// .schema.traces.contour.attributes.contours.type
type ContourContoursType string

const (
	ContourContoursTypeLevels     ContourContoursType = "levels"
	ContourContoursTypeConstraint ContourContoursType = "constraint"
)

// ContourHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
// .schema.traces.contour.attributes.hoverlabel.align
type ContourHoverlabelAlign string

const (
	ContourHoverlabelAlignLeft  ContourHoverlabelAlign = "left"
	ContourHoverlabelAlignRight ContourHoverlabelAlign = "right"
	ContourHoverlabelAlignAuto  ContourHoverlabelAlign = "auto"
)

// ContourHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.contour.attributes.hoverlabel.font.style
type ContourHoverlabelFontStyle string

const (
	ContourHoverlabelFontStyleNormal ContourHoverlabelFontStyle = "normal"
	ContourHoverlabelFontStyleItalic ContourHoverlabelFontStyle = "italic"
)

// ContourHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.contour.attributes.hoverlabel.font.textcase
type ContourHoverlabelFontTextcase string

const (
	ContourHoverlabelFontTextcaseNormal   ContourHoverlabelFontTextcase = "normal"
	ContourHoverlabelFontTextcaseWordCaps ContourHoverlabelFontTextcase = "word caps"
	ContourHoverlabelFontTextcaseUpper    ContourHoverlabelFontTextcase = "upper"
	ContourHoverlabelFontTextcaseLower    ContourHoverlabelFontTextcase = "lower"
)

// ContourHoverlabelFontVariant Sets the variant of the font.
// .schema.traces.contour.attributes.hoverlabel.font.variant
type ContourHoverlabelFontVariant string

const (
	ContourHoverlabelFontVariantNormal        ContourHoverlabelFontVariant = "normal"
	ContourHoverlabelFontVariantSmallCaps     ContourHoverlabelFontVariant = "small-caps"
	ContourHoverlabelFontVariantAllSmallCaps  ContourHoverlabelFontVariant = "all-small-caps"
	ContourHoverlabelFontVariantAllPetiteCaps ContourHoverlabelFontVariant = "all-petite-caps"
	ContourHoverlabelFontVariantPetiteCaps    ContourHoverlabelFontVariant = "petite-caps"
	ContourHoverlabelFontVariantUnicase       ContourHoverlabelFontVariant = "unicase"
)

// ContourLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.contour.attributes.legendgrouptitle.font.style
type ContourLegendgrouptitleFontStyle string

const (
	ContourLegendgrouptitleFontStyleNormal ContourLegendgrouptitleFontStyle = "normal"
	ContourLegendgrouptitleFontStyleItalic ContourLegendgrouptitleFontStyle = "italic"
)

// ContourLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.contour.attributes.legendgrouptitle.font.textcase
type ContourLegendgrouptitleFontTextcase string

const (
	ContourLegendgrouptitleFontTextcaseNormal   ContourLegendgrouptitleFontTextcase = "normal"
	ContourLegendgrouptitleFontTextcaseWordCaps ContourLegendgrouptitleFontTextcase = "word caps"
	ContourLegendgrouptitleFontTextcaseUpper    ContourLegendgrouptitleFontTextcase = "upper"
	ContourLegendgrouptitleFontTextcaseLower    ContourLegendgrouptitleFontTextcase = "lower"
)

// ContourLegendgrouptitleFontVariant Sets the variant of the font.
// .schema.traces.contour.attributes.legendgrouptitle.font.variant
type ContourLegendgrouptitleFontVariant string

const (
	ContourLegendgrouptitleFontVariantNormal        ContourLegendgrouptitleFontVariant = "normal"
	ContourLegendgrouptitleFontVariantSmallCaps     ContourLegendgrouptitleFontVariant = "small-caps"
	ContourLegendgrouptitleFontVariantAllSmallCaps  ContourLegendgrouptitleFontVariant = "all-small-caps"
	ContourLegendgrouptitleFontVariantAllPetiteCaps ContourLegendgrouptitleFontVariant = "all-petite-caps"
	ContourLegendgrouptitleFontVariantPetiteCaps    ContourLegendgrouptitleFontVariant = "petite-caps"
	ContourLegendgrouptitleFontVariantUnicase       ContourLegendgrouptitleFontVariant = "unicase"
)

// ContourTextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.contour.attributes.textfont.style
type ContourTextfontStyle string

const (
	ContourTextfontStyleNormal ContourTextfontStyle = "normal"
	ContourTextfontStyleItalic ContourTextfontStyle = "italic"
)

// ContourTextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.contour.attributes.textfont.textcase
type ContourTextfontTextcase string

const (
	ContourTextfontTextcaseNormal   ContourTextfontTextcase = "normal"
	ContourTextfontTextcaseWordCaps ContourTextfontTextcase = "word caps"
	ContourTextfontTextcaseUpper    ContourTextfontTextcase = "upper"
	ContourTextfontTextcaseLower    ContourTextfontTextcase = "lower"
)

// ContourTextfontVariant Sets the variant of the font.
// .schema.traces.contour.attributes.textfont.variant
type ContourTextfontVariant string

const (
	ContourTextfontVariantNormal        ContourTextfontVariant = "normal"
	ContourTextfontVariantSmallCaps     ContourTextfontVariant = "small-caps"
	ContourTextfontVariantAllSmallCaps  ContourTextfontVariant = "all-small-caps"
	ContourTextfontVariantAllPetiteCaps ContourTextfontVariant = "all-petite-caps"
	ContourTextfontVariantPetiteCaps    ContourTextfontVariant = "petite-caps"
	ContourTextfontVariantUnicase       ContourTextfontVariant = "unicase"
)

// ContourVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
// .schema.traces.contour.attributes.visible
type ContourVisible interface{}

var (
	ContourVisibleTrue       ContourVisible = true
	ContourVisibleFalse      ContourVisible = false
	ContourVisibleLegendonly ContourVisible = "legendonly"
)

// ContourXcalendar Sets the calendar system to use with `x` date data.
// .schema.traces.contour.attributes.xcalendar
type ContourXcalendar string

const (
	ContourXcalendarChinese    ContourXcalendar = "chinese"
	ContourXcalendarCoptic     ContourXcalendar = "coptic"
	ContourXcalendarDiscworld  ContourXcalendar = "discworld"
	ContourXcalendarEthiopian  ContourXcalendar = "ethiopian"
	ContourXcalendarGregorian  ContourXcalendar = "gregorian"
	ContourXcalendarHebrew     ContourXcalendar = "hebrew"
	ContourXcalendarIslamic    ContourXcalendar = "islamic"
	ContourXcalendarJalali     ContourXcalendar = "jalali"
	ContourXcalendarJulian     ContourXcalendar = "julian"
	ContourXcalendarMayan      ContourXcalendar = "mayan"
	ContourXcalendarNanakshahi ContourXcalendar = "nanakshahi"
	ContourXcalendarNepali     ContourXcalendar = "nepali"
	ContourXcalendarPersian    ContourXcalendar = "persian"
	ContourXcalendarTaiwan     ContourXcalendar = "taiwan"
	ContourXcalendarThai       ContourXcalendar = "thai"
	ContourXcalendarUmmalqura  ContourXcalendar = "ummalqura"
)

// ContourXperiodalignment Only relevant when the axis `type` is *date*. Sets the alignment of data points on the x axis.
// .schema.traces.contour.attributes.xperiodalignment
type ContourXperiodalignment string

const (
	ContourXperiodalignmentStart  ContourXperiodalignment = "start"
	ContourXperiodalignmentMiddle ContourXperiodalignment = "middle"
	ContourXperiodalignmentEnd    ContourXperiodalignment = "end"
)

// ContourXtype If *array*, the heatmap's x coordinates are given by *x* (the default behavior when `x` is provided). If *scaled*, the heatmap's x coordinates are given by *x0* and *dx* (the default behavior when `x` is not provided).
// .schema.traces.contour.attributes.xtype
type ContourXtype string

const (
	ContourXtypeArray  ContourXtype = "array"
	ContourXtypeScaled ContourXtype = "scaled"
)

// ContourYcalendar Sets the calendar system to use with `y` date data.
// .schema.traces.contour.attributes.ycalendar
type ContourYcalendar string

const (
	ContourYcalendarChinese    ContourYcalendar = "chinese"
	ContourYcalendarCoptic     ContourYcalendar = "coptic"
	ContourYcalendarDiscworld  ContourYcalendar = "discworld"
	ContourYcalendarEthiopian  ContourYcalendar = "ethiopian"
	ContourYcalendarGregorian  ContourYcalendar = "gregorian"
	ContourYcalendarHebrew     ContourYcalendar = "hebrew"
	ContourYcalendarIslamic    ContourYcalendar = "islamic"
	ContourYcalendarJalali     ContourYcalendar = "jalali"
	ContourYcalendarJulian     ContourYcalendar = "julian"
	ContourYcalendarMayan      ContourYcalendar = "mayan"
	ContourYcalendarNanakshahi ContourYcalendar = "nanakshahi"
	ContourYcalendarNepali     ContourYcalendar = "nepali"
	ContourYcalendarPersian    ContourYcalendar = "persian"
	ContourYcalendarTaiwan     ContourYcalendar = "taiwan"
	ContourYcalendarThai       ContourYcalendar = "thai"
	ContourYcalendarUmmalqura  ContourYcalendar = "ummalqura"
)

// ContourYperiodalignment Only relevant when the axis `type` is *date*. Sets the alignment of data points on the y axis.
// .schema.traces.contour.attributes.yperiodalignment
type ContourYperiodalignment string

const (
	ContourYperiodalignmentStart  ContourYperiodalignment = "start"
	ContourYperiodalignmentMiddle ContourYperiodalignment = "middle"
	ContourYperiodalignmentEnd    ContourYperiodalignment = "end"
)

// ContourYtype If *array*, the heatmap's y coordinates are given by *y* (the default behavior when `y` is provided) If *scaled*, the heatmap's y coordinates are given by *y0* and *dy* (the default behavior when `y` is not provided)
// .schema.traces.contour.attributes.ytype
type ContourYtype string

const (
	ContourYtypeArray  ContourYtype = "array"
	ContourYtypeScaled ContourYtype = "scaled"
)

// ContourColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.contour.attributes.colorbar.tickfont.lineposition
type ContourColorbarTickfontLineposition string

const (
	// Flags
	ContourColorbarTickfontLinepositionUnder   ContourColorbarTickfontLineposition = "under"
	ContourColorbarTickfontLinepositionOver    ContourColorbarTickfontLineposition = "over"
	ContourColorbarTickfontLinepositionThrough ContourColorbarTickfontLineposition = "through"

	// Extra
	ContourColorbarTickfontLinepositionNone ContourColorbarTickfontLineposition = "none"
)

// ContourColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.contour.attributes.colorbar.title.font.lineposition
type ContourColorbarTitleFontLineposition string

const (
	// Flags
	ContourColorbarTitleFontLinepositionUnder   ContourColorbarTitleFontLineposition = "under"
	ContourColorbarTitleFontLinepositionOver    ContourColorbarTitleFontLineposition = "over"
	ContourColorbarTitleFontLinepositionThrough ContourColorbarTitleFontLineposition = "through"

	// Extra
	ContourColorbarTitleFontLinepositionNone ContourColorbarTitleFontLineposition = "none"
)

// ContourContoursLabelfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.contour.attributes.contours.labelfont.lineposition
type ContourContoursLabelfontLineposition string

const (
	// Flags
	ContourContoursLabelfontLinepositionUnder   ContourContoursLabelfontLineposition = "under"
	ContourContoursLabelfontLinepositionOver    ContourContoursLabelfontLineposition = "over"
	ContourContoursLabelfontLinepositionThrough ContourContoursLabelfontLineposition = "through"

	// Extra
	ContourContoursLabelfontLinepositionNone ContourContoursLabelfontLineposition = "none"
)

// ContourHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
// .schema.traces.contour.attributes.hoverinfo
type ContourHoverinfo string

const (
	// Flags
	ContourHoverinfoX    ContourHoverinfo = "x"
	ContourHoverinfoY    ContourHoverinfo = "y"
	ContourHoverinfoZ    ContourHoverinfo = "z"
	ContourHoverinfoText ContourHoverinfo = "text"
	ContourHoverinfoName ContourHoverinfo = "name"

	// Extra
	ContourHoverinfoAll  ContourHoverinfo = "all"
	ContourHoverinfoNone ContourHoverinfo = "none"
	ContourHoverinfoSkip ContourHoverinfo = "skip"
)

// ContourHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.contour.attributes.hoverlabel.font.lineposition
type ContourHoverlabelFontLineposition string

const (
	// Flags
	ContourHoverlabelFontLinepositionUnder   ContourHoverlabelFontLineposition = "under"
	ContourHoverlabelFontLinepositionOver    ContourHoverlabelFontLineposition = "over"
	ContourHoverlabelFontLinepositionThrough ContourHoverlabelFontLineposition = "through"

	// Extra
	ContourHoverlabelFontLinepositionNone ContourHoverlabelFontLineposition = "none"
)

// ContourLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.contour.attributes.legendgrouptitle.font.lineposition
type ContourLegendgrouptitleFontLineposition string

const (
	// Flags
	ContourLegendgrouptitleFontLinepositionUnder   ContourLegendgrouptitleFontLineposition = "under"
	ContourLegendgrouptitleFontLinepositionOver    ContourLegendgrouptitleFontLineposition = "over"
	ContourLegendgrouptitleFontLinepositionThrough ContourLegendgrouptitleFontLineposition = "through"

	// Extra
	ContourLegendgrouptitleFontLinepositionNone ContourLegendgrouptitleFontLineposition = "none"
)

// ContourTextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.contour.attributes.textfont.lineposition
type ContourTextfontLineposition string

const (
	// Flags
	ContourTextfontLinepositionUnder   ContourTextfontLineposition = "under"
	ContourTextfontLinepositionOver    ContourTextfontLineposition = "over"
	ContourTextfontLinepositionThrough ContourTextfontLineposition = "through"

	// Extra
	ContourTextfontLinepositionNone ContourTextfontLineposition = "none"
)
