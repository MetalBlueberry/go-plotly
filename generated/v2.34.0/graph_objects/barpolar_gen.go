package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeBarpolar types.TraceType = "barpolar"

func (t *Barpolar) GetType() types.TraceType {
	return TraceTypeBarpolar
}

func (t *Barpolar) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Barpolar
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Barpolar The data visualized by the radial span of the bars is set in `r`
type Barpolar struct {

	// Base
	// arrayOK: true
	// type: any
	// Sets where the bar base is drawn (in radial axis units). In *stack* barmode, traces that set *base* will be excluded and drawn in *overlay* mode instead.
	// .schema.traces.barpolar.attributes.base
	Base *types.ArrayOK[*interface{}] `json:"base,omitempty"`

	// Basesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `base`.
	// .schema.traces.barpolar.attributes.basesrc
	Basesrc types.StringType `json:"basesrc,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.barpolar.attributes.customdata
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	// .schema.traces.barpolar.attributes.customdatasrc
	Customdatasrc types.StringType `json:"customdatasrc,omitempty"`

	// Dr
	// arrayOK: false
	// type: number
	// Sets the r coordinate step.
	// .schema.traces.barpolar.attributes.dr
	Dr types.NumberType `json:"dr,omitempty"`

	// Dtheta
	// arrayOK: false
	// type: number
	// Sets the theta coordinate step. By default, the `dtheta` step equals the subplot's period divided by the length of the `r` coordinates.
	// .schema.traces.barpolar.attributes.dtheta
	Dtheta types.NumberType `json:"dtheta,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	// .schema.traces.barpolar.attributes.hoverinfo
	Hoverinfo *types.ArrayOK[*BarpolarHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	// .schema.traces.barpolar.attributes.hoverinfosrc
	Hoverinfosrc types.StringType `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.hoverlabel
	Hoverlabel *BarpolarHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	// .schema.traces.barpolar.attributes.hovertemplate
	Hovertemplate *types.ArrayOK[*types.StringType] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	// .schema.traces.barpolar.attributes.hovertemplatesrc
	Hovertemplatesrc types.StringType `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: true
	// type: string
	// Same as `text`.
	// .schema.traces.barpolar.attributes.hovertext
	Hovertext *types.ArrayOK[*types.StringType] `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	// .schema.traces.barpolar.attributes.hovertextsrc
	Hovertextsrc types.StringType `json:"hovertextsrc,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.barpolar.attributes.ids
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	// .schema.traces.barpolar.attributes.idssrc
	Idssrc types.StringType `json:"idssrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	// .schema.traces.barpolar.attributes.legend
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	// .schema.traces.barpolar.attributes.legendgroup
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.legendgrouptitle
	Legendgrouptitle *BarpolarLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	// .schema.traces.barpolar.attributes.legendrank
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	// .schema.traces.barpolar.attributes.legendwidth
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Marker
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.marker
	Marker *BarpolarMarker `json:"marker,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	// .schema.traces.barpolar.attributes.meta
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	// .schema.traces.barpolar.attributes.metasrc
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	// .schema.traces.barpolar.attributes.name
	Name types.StringType `json:"name,omitempty"`

	// Offset
	// arrayOK: true
	// type: number
	// Shifts the angular position where the bar is drawn (in *thetatunit* units).
	// .schema.traces.barpolar.attributes.offset
	Offset *types.ArrayOK[*types.NumberType] `json:"offset,omitempty"`

	// Offsetsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `offset`.
	// .schema.traces.barpolar.attributes.offsetsrc
	Offsetsrc types.StringType `json:"offsetsrc,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the trace.
	// .schema.traces.barpolar.attributes.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// R
	// arrayOK: false
	// type: data_array
	// Sets the radial coordinates
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.barpolar.attributes.r
	R *types.DataArrayType `json:"r,omitempty"`

	// R0
	// arrayOK: false
	// type: any
	// Alternate to `r`. Builds a linear space of r coordinates. Use with `dr` where `r0` is the starting coordinate and `dr` the step.
	// .schema.traces.barpolar.attributes.r0
	R0 interface{} `json:"r0,omitempty"`

	// Rsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `r`.
	// .schema.traces.barpolar.attributes.rsrc
	Rsrc types.StringType `json:"rsrc,omitempty"`

	// Selected
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.selected
	Selected *BarpolarSelected `json:"selected,omitempty"`

	// Selectedpoints
	// arrayOK: false
	// type: any
	// Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
	// .schema.traces.barpolar.attributes.selectedpoints
	Selectedpoints interface{} `json:"selectedpoints,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	// .schema.traces.barpolar.attributes.showlegend
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.stream
	Stream *BarpolarStream `json:"stream,omitempty"`

	// Subplot
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's data coordinates and a polar subplot. If *polar* (the default value), the data refer to `layout.polar`. If *polar2*, the data refer to `layout.polar2`, and so on.
	// .schema.traces.barpolar.attributes.subplot
	Subplot types.StringType `json:"subplot,omitempty"`

	// Text
	// arrayOK: true
	// type: string
	// Sets hover text elements associated with each bar. If a single string, the same string appears over all bars. If an array of string, the items are mapped in order to the this trace's coordinates.
	// .schema.traces.barpolar.attributes.text
	Text *types.ArrayOK[*types.StringType] `json:"text,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	// .schema.traces.barpolar.attributes.textsrc
	Textsrc types.StringType `json:"textsrc,omitempty"`

	// Theta
	// arrayOK: false
	// type: data_array
	// Sets the angular coordinates
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.barpolar.attributes.theta
	Theta *types.DataArrayType `json:"theta,omitempty"`

	// Theta0
	// arrayOK: false
	// type: any
	// Alternate to `theta`. Builds a linear space of theta coordinates. Use with `dtheta` where `theta0` is the starting coordinate and `dtheta` the step.
	// .schema.traces.barpolar.attributes.theta0
	Theta0 interface{} `json:"theta0,omitempty"`

	// Thetasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `theta`.
	// .schema.traces.barpolar.attributes.thetasrc
	Thetasrc types.StringType `json:"thetasrc,omitempty"`

	// Thetaunit
	// arrayOK: false
	// default: degrees
	// type: enumerated
	// Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
	// .schema.traces.barpolar.attributes.thetaunit
	Thetaunit BarpolarThetaunit `json:"thetaunit,omitempty"`

	// Transforms
	// role: Object
	// items: BarpolarTransform
	// .schema.traces.barpolar.attributes.transforms
	Transforms []BarpolarTransform `json:"transforms,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	// .schema.traces.barpolar.attributes.uid
	Uid types.StringType `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	// .schema.traces.barpolar.attributes.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Unselected
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.unselected
	Unselected *BarpolarUnselected `json:"unselected,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	// .schema.traces.barpolar.attributes.visible
	Visible BarpolarVisible `json:"visible,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	// Sets the bar angular width (in *thetaunit* units).
	// .schema.traces.barpolar.attributes.width
	Width *types.ArrayOK[*types.NumberType] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	// .schema.traces.barpolar.attributes.widthsrc
	Widthsrc types.StringType `json:"widthsrc,omitempty"`
}

// BarpolarHoverlabelFont Sets the font used in hover labels.
type BarpolarHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	// .schema.traces.barpolar.attributes.hoverlabel.font.color
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.colorsrc
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.barpolar.attributes.hoverlabel.font.family
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.familysrc
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.barpolar.attributes.hoverlabel.font.lineposition
	Lineposition *types.ArrayOK[*BarpolarHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.linepositionsrc
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.barpolar.attributes.hoverlabel.font.shadow
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.shadowsrc
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	// .schema.traces.barpolar.attributes.hoverlabel.font.size
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.sizesrc
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.barpolar.attributes.hoverlabel.font.style
	Style *types.ArrayOK[*BarpolarHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.stylesrc
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.barpolar.attributes.hoverlabel.font.textcase
	Textcase *types.ArrayOK[*BarpolarHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.textcasesrc
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.barpolar.attributes.hoverlabel.font.variant
	Variant *types.ArrayOK[*BarpolarHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.variantsrc
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.barpolar.attributes.hoverlabel.font.weight
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	// .schema.traces.barpolar.attributes.hoverlabel.font.weightsrc
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// BarpolarHoverlabel
type BarpolarHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	// .schema.traces.barpolar.attributes.hoverlabel.align
	Align *types.ArrayOK[*BarpolarHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	// .schema.traces.barpolar.attributes.hoverlabel.alignsrc
	Alignsrc types.StringType `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	// .schema.traces.barpolar.attributes.hoverlabel.bgcolor
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	// .schema.traces.barpolar.attributes.hoverlabel.bgcolorsrc
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	// .schema.traces.barpolar.attributes.hoverlabel.bordercolor
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	// .schema.traces.barpolar.attributes.hoverlabel.bordercolorsrc
	Bordercolorsrc types.StringType `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.hoverlabel.font
	Font *BarpolarHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	// .schema.traces.barpolar.attributes.hoverlabel.namelength
	Namelength *types.ArrayOK[*types.IntegerType] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	// .schema.traces.barpolar.attributes.hoverlabel.namelengthsrc
	Namelengthsrc types.StringType `json:"namelengthsrc,omitempty"`
}

// BarpolarLegendgrouptitleFont Sets this legend group's title font.
type BarpolarLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.lineposition
	Lineposition BarpolarLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.style
	Style BarpolarLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.textcase
	Textcase BarpolarLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.variant
	Variant BarpolarLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.barpolar.attributes.legendgrouptitle.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// BarpolarLegendgrouptitle
type BarpolarLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.legendgrouptitle.font
	Font *BarpolarLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	// .schema.traces.barpolar.attributes.legendgrouptitle.text
	Text types.StringType `json:"text,omitempty"`
}

// BarpolarMarkerColorbarTickfont Sets the color bar's tick label font
type BarpolarMarkerColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.lineposition
	Lineposition BarpolarMarkerColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.style
	Style BarpolarMarkerColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.textcase
	Textcase BarpolarMarkerColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.variant
	Variant BarpolarMarkerColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// BarpolarMarkerColorbarTickformatstop
type BarpolarMarkerColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.traces.barpolar.attributes.marker.colorbar.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.traces.barpolar.attributes.marker.colorbar.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// BarpolarMarkerColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type BarpolarMarkerColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.lineposition
	Lineposition BarpolarMarkerColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.style
	Style BarpolarMarkerColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.textcase
	Textcase BarpolarMarkerColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.variant
	Variant BarpolarMarkerColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// BarpolarMarkerColorbarTitle
type BarpolarMarkerColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.marker.colorbar.title.font
	Font *BarpolarMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.side
	Side BarpolarMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.traces.barpolar.attributes.marker.colorbar.title.text
	Text types.StringType `json:"text,omitempty"`
}

// BarpolarMarkerColorbar
type BarpolarMarkerColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	// .schema.traces.barpolar.attributes.marker.colorbar.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.traces.barpolar.attributes.marker.colorbar.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	// .schema.traces.barpolar.attributes.marker.colorbar.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.traces.barpolar.attributes.marker.colorbar.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.traces.barpolar.attributes.marker.colorbar.exponentformat
	Exponentformat BarpolarMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.traces.barpolar.attributes.marker.colorbar.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	// .schema.traces.barpolar.attributes.marker.colorbar.len
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	// .schema.traces.barpolar.attributes.marker.colorbar.lenmode
	Lenmode BarpolarMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.traces.barpolar.attributes.marker.colorbar.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.traces.barpolar.attributes.marker.colorbar.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	// .schema.traces.barpolar.attributes.marker.colorbar.orientation
	Orientation BarpolarMarkerColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.traces.barpolar.attributes.marker.colorbar.outlinecolor
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.traces.barpolar.attributes.marker.colorbar.outlinewidth
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.traces.barpolar.attributes.marker.colorbar.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.traces.barpolar.attributes.marker.colorbar.showexponent
	Showexponent BarpolarMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.traces.barpolar.attributes.marker.colorbar.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.traces.barpolar.attributes.marker.colorbar.showtickprefix
	Showtickprefix BarpolarMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.traces.barpolar.attributes.marker.colorbar.showticksuffix
	Showticksuffix BarpolarMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	// .schema.traces.barpolar.attributes.marker.colorbar.thickness
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	// .schema.traces.barpolar.attributes.marker.colorbar.thicknessmode
	Thicknessmode BarpolarMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.traces.barpolar.attributes.marker.colorbar.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.marker.colorbar.tickfont
	Tickfont *BarpolarMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.traces.barpolar.attributes.marker.colorbar.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: BarpolarMarkerColorbarTickformatstop
	// .schema.traces.barpolar.attributes.marker.colorbar.tickformatstops
	Tickformatstops []BarpolarMarkerColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	// .schema.traces.barpolar.attributes.marker.colorbar.ticklabeloverflow
	Ticklabeloverflow BarpolarMarkerColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	// .schema.traces.barpolar.attributes.marker.colorbar.ticklabelposition
	Ticklabelposition BarpolarMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.traces.barpolar.attributes.marker.colorbar.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.traces.barpolar.attributes.marker.colorbar.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.traces.barpolar.attributes.marker.colorbar.tickmode
	Tickmode BarpolarMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.traces.barpolar.attributes.marker.colorbar.ticks
	Ticks BarpolarMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.traces.barpolar.attributes.marker.colorbar.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.barpolar.attributes.marker.colorbar.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.traces.barpolar.attributes.marker.colorbar.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.barpolar.attributes.marker.colorbar.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.traces.barpolar.attributes.marker.colorbar.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.traces.barpolar.attributes.marker.colorbar.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.marker.colorbar.title
	Title *BarpolarMarkerColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	// .schema.traces.barpolar.attributes.marker.colorbar.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	// .schema.traces.barpolar.attributes.marker.colorbar.xanchor
	Xanchor BarpolarMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	// .schema.traces.barpolar.attributes.marker.colorbar.xpad
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	// .schema.traces.barpolar.attributes.marker.colorbar.xref
	Xref BarpolarMarkerColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	// .schema.traces.barpolar.attributes.marker.colorbar.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	// .schema.traces.barpolar.attributes.marker.colorbar.yanchor
	Yanchor BarpolarMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	// .schema.traces.barpolar.attributes.marker.colorbar.ypad
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	// .schema.traces.barpolar.attributes.marker.colorbar.yref
	Yref BarpolarMarkerColorbarYref `json:"yref,omitempty"`
}

// BarpolarMarkerLine
type BarpolarMarkerLine struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.line.colorscale`. Has an effect only if in `marker.line.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	// .schema.traces.barpolar.attributes.marker.line.autocolorscale
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here in `marker.line.color`) or the bounds set in `marker.line.cmin` and `marker.line.cmax` Has an effect only if in `marker.line.color` is set to a numerical array. Defaults to `false` when `marker.line.cmin` and `marker.line.cmax` are set by the user.
	// .schema.traces.barpolar.attributes.marker.line.cauto
	Cauto types.BoolType `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmin` must be set as well.
	// .schema.traces.barpolar.attributes.marker.line.cmax
	Cmax types.NumberType `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `marker.line.cmin` and/or `marker.line.cmax` to be equidistant to this point. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color`. Has no effect when `marker.line.cauto` is `false`.
	// .schema.traces.barpolar.attributes.marker.line.cmid
	Cmid types.NumberType `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Has an effect only if in `marker.line.color` is set to a numerical array. Value should have the same units as in `marker.line.color` and if set, `marker.line.cmax` must be set as well.
	// .schema.traces.barpolar.attributes.marker.line.cmin
	Cmin types.NumberType `json:"cmin,omitempty"`

	// Color
	// arrayOK: true
	// type: color
	// Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	// .schema.traces.barpolar.attributes.marker.line.color
	Color *types.ArrayOK[*types.ColorWithColorScale] `json:"color,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	// .schema.traces.barpolar.attributes.marker.line.coloraxis
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. Has an effect only if in `marker.line.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.line.cmin` and `marker.line.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	// .schema.traces.barpolar.attributes.marker.line.colorscale
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	// .schema.traces.barpolar.attributes.marker.line.colorsrc
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. Has an effect only if in `marker.line.color` is set to a numerical array. If true, `marker.line.cmin` will correspond to the last color in the array and `marker.line.cmax` will correspond to the first color.
	// .schema.traces.barpolar.attributes.marker.line.reversescale
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	// Sets the width (in px) of the lines bounding the marker points.
	// .schema.traces.barpolar.attributes.marker.line.width
	Width *types.ArrayOK[*types.NumberType] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	// .schema.traces.barpolar.attributes.marker.line.widthsrc
	Widthsrc types.StringType `json:"widthsrc,omitempty"`
}

// BarpolarMarkerPattern Sets the pattern within the marker.
type BarpolarMarkerPattern struct {

	// Bgcolor
	// arrayOK: true
	// type: color
	// When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is *overlay*. Otherwise, defaults to a transparent background.
	// .schema.traces.barpolar.attributes.marker.pattern.bgcolor
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	// .schema.traces.barpolar.attributes.marker.pattern.bgcolorsrc
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Fgcolor
	// arrayOK: true
	// type: color
	// When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is *replace*. Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.
	// .schema.traces.barpolar.attributes.marker.pattern.fgcolor
	Fgcolor *types.ArrayOK[*types.Color] `json:"fgcolor,omitempty"`

	// Fgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `fgcolor`.
	// .schema.traces.barpolar.attributes.marker.pattern.fgcolorsrc
	Fgcolorsrc types.StringType `json:"fgcolorsrc,omitempty"`

	// Fgopacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.
	// .schema.traces.barpolar.attributes.marker.pattern.fgopacity
	Fgopacity types.NumberType `json:"fgopacity,omitempty"`

	// Fillmode
	// arrayOK: false
	// default: replace
	// type: enumerated
	// Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.
	// .schema.traces.barpolar.attributes.marker.pattern.fillmode
	Fillmode BarpolarMarkerPatternFillmode `json:"fillmode,omitempty"`

	// Shape
	// arrayOK: true
	// default:
	// type: enumerated
	// Sets the shape of the pattern fill. By default, no pattern is used for filling the area.
	// .schema.traces.barpolar.attributes.marker.pattern.shape
	Shape *types.ArrayOK[*BarpolarMarkerPatternShape] `json:"shape,omitempty"`

	// Shapesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shape`.
	// .schema.traces.barpolar.attributes.marker.pattern.shapesrc
	Shapesrc types.StringType `json:"shapesrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	// Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.
	// .schema.traces.barpolar.attributes.marker.pattern.size
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	// .schema.traces.barpolar.attributes.marker.pattern.sizesrc
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Solidity
	// arrayOK: true
	// type: number
	// Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.
	// .schema.traces.barpolar.attributes.marker.pattern.solidity
	Solidity *types.ArrayOK[*types.NumberType] `json:"solidity,omitempty"`

	// Soliditysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `solidity`.
	// .schema.traces.barpolar.attributes.marker.pattern.soliditysrc
	Soliditysrc types.StringType `json:"soliditysrc,omitempty"`
}

// BarpolarMarker
type BarpolarMarker struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if in `marker.color` is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	// .schema.traces.barpolar.attributes.marker.autocolorscale
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here in `marker.color`) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if in `marker.color` is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	// .schema.traces.barpolar.attributes.marker.cauto
	Cauto types.BoolType `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmin` must be set as well.
	// .schema.traces.barpolar.attributes.marker.cmax
	Cmax types.NumberType `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color`. Has no effect when `marker.cauto` is `false`.
	// .schema.traces.barpolar.attributes.marker.cmid
	Cmid types.NumberType `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Has an effect only if in `marker.color` is set to a numerical array. Value should have the same units as in `marker.color` and if set, `marker.cmax` must be set as well.
	// .schema.traces.barpolar.attributes.marker.cmin
	Cmin types.NumberType `json:"cmin,omitempty"`

	// Color
	// arrayOK: true
	// type: color
	// Sets the marker color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.cmin` and `marker.cmax` if set.
	// .schema.traces.barpolar.attributes.marker.color
	Color *types.ArrayOK[*types.ColorWithColorScale] `json:"color,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	// .schema.traces.barpolar.attributes.marker.coloraxis
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.marker.colorbar
	Colorbar *BarpolarMarkerColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. Has an effect only if in `marker.color` is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	// .schema.traces.barpolar.attributes.marker.colorscale
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	// .schema.traces.barpolar.attributes.marker.colorsrc
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.marker.line
	Line *BarpolarMarkerLine `json:"line,omitempty"`

	// Opacity
	// arrayOK: true
	// type: number
	// Sets the opacity of the bars.
	// .schema.traces.barpolar.attributes.marker.opacity
	Opacity *types.ArrayOK[*types.NumberType] `json:"opacity,omitempty"`

	// Opacitysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `opacity`.
	// .schema.traces.barpolar.attributes.marker.opacitysrc
	Opacitysrc types.StringType `json:"opacitysrc,omitempty"`

	// Pattern
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.marker.pattern
	Pattern *BarpolarMarkerPattern `json:"pattern,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. Has an effect only if in `marker.color` is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	// .schema.traces.barpolar.attributes.marker.reversescale
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace. Has an effect only if in `marker.color` is set to a numerical array.
	// .schema.traces.barpolar.attributes.marker.showscale
	Showscale types.BoolType `json:"showscale,omitempty"`
}

// BarpolarSelectedMarker
type BarpolarSelectedMarker struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the marker color of selected points.
	// .schema.traces.barpolar.attributes.selected.marker.color
	Color types.Color `json:"color,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of selected points.
	// .schema.traces.barpolar.attributes.selected.marker.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// BarpolarSelectedTextfont
type BarpolarSelectedTextfont struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the text font color of selected points.
	// .schema.traces.barpolar.attributes.selected.textfont.color
	Color types.Color `json:"color,omitempty"`
}

// BarpolarSelected
type BarpolarSelected struct {

	// Marker
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.selected.marker
	Marker *BarpolarSelectedMarker `json:"marker,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.selected.textfont
	Textfont *BarpolarSelectedTextfont `json:"textfont,omitempty"`
}

// BarpolarStream
type BarpolarStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	// .schema.traces.barpolar.attributes.stream.maxpoints
	Maxpoints types.NumberType `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	// .schema.traces.barpolar.attributes.stream.token
	Token types.StringType `json:"token,omitempty"`
}

// BarpolarTransform WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.
type BarpolarTransform struct {
}

// BarpolarUnselectedMarker
type BarpolarUnselectedMarker struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the marker color of unselected points, applied only when a selection exists.
	// .schema.traces.barpolar.attributes.unselected.marker.color
	Color types.Color `json:"color,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of unselected points, applied only when a selection exists.
	// .schema.traces.barpolar.attributes.unselected.marker.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// BarpolarUnselectedTextfont
type BarpolarUnselectedTextfont struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the text font color of unselected points, applied only when a selection exists.
	// .schema.traces.barpolar.attributes.unselected.textfont.color
	Color types.Color `json:"color,omitempty"`
}

// BarpolarUnselected
type BarpolarUnselected struct {

	// Marker
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.unselected.marker
	Marker *BarpolarUnselectedMarker `json:"marker,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	// .schema.traces.barpolar.attributes.unselected.textfont
	Textfont *BarpolarUnselectedTextfont `json:"textfont,omitempty"`
}

// BarpolarHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
// .schema.traces.barpolar.attributes.hoverlabel.align
type BarpolarHoverlabelAlign string

const (
	BarpolarHoverlabelAlignLeft  BarpolarHoverlabelAlign = "left"
	BarpolarHoverlabelAlignRight BarpolarHoverlabelAlign = "right"
	BarpolarHoverlabelAlignAuto  BarpolarHoverlabelAlign = "auto"
)

// BarpolarHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.barpolar.attributes.hoverlabel.font.style
type BarpolarHoverlabelFontStyle string

const (
	BarpolarHoverlabelFontStyleNormal BarpolarHoverlabelFontStyle = "normal"
	BarpolarHoverlabelFontStyleItalic BarpolarHoverlabelFontStyle = "italic"
)

// BarpolarHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.barpolar.attributes.hoverlabel.font.textcase
type BarpolarHoverlabelFontTextcase string

const (
	BarpolarHoverlabelFontTextcaseNormal   BarpolarHoverlabelFontTextcase = "normal"
	BarpolarHoverlabelFontTextcaseWordCaps BarpolarHoverlabelFontTextcase = "word caps"
	BarpolarHoverlabelFontTextcaseUpper    BarpolarHoverlabelFontTextcase = "upper"
	BarpolarHoverlabelFontTextcaseLower    BarpolarHoverlabelFontTextcase = "lower"
)

// BarpolarHoverlabelFontVariant Sets the variant of the font.
// .schema.traces.barpolar.attributes.hoverlabel.font.variant
type BarpolarHoverlabelFontVariant string

const (
	BarpolarHoverlabelFontVariantNormal        BarpolarHoverlabelFontVariant = "normal"
	BarpolarHoverlabelFontVariantSmallCaps     BarpolarHoverlabelFontVariant = "small-caps"
	BarpolarHoverlabelFontVariantAllSmallCaps  BarpolarHoverlabelFontVariant = "all-small-caps"
	BarpolarHoverlabelFontVariantAllPetiteCaps BarpolarHoverlabelFontVariant = "all-petite-caps"
	BarpolarHoverlabelFontVariantPetiteCaps    BarpolarHoverlabelFontVariant = "petite-caps"
	BarpolarHoverlabelFontVariantUnicase       BarpolarHoverlabelFontVariant = "unicase"
)

// BarpolarLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.barpolar.attributes.legendgrouptitle.font.style
type BarpolarLegendgrouptitleFontStyle string

const (
	BarpolarLegendgrouptitleFontStyleNormal BarpolarLegendgrouptitleFontStyle = "normal"
	BarpolarLegendgrouptitleFontStyleItalic BarpolarLegendgrouptitleFontStyle = "italic"
)

// BarpolarLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.barpolar.attributes.legendgrouptitle.font.textcase
type BarpolarLegendgrouptitleFontTextcase string

const (
	BarpolarLegendgrouptitleFontTextcaseNormal   BarpolarLegendgrouptitleFontTextcase = "normal"
	BarpolarLegendgrouptitleFontTextcaseWordCaps BarpolarLegendgrouptitleFontTextcase = "word caps"
	BarpolarLegendgrouptitleFontTextcaseUpper    BarpolarLegendgrouptitleFontTextcase = "upper"
	BarpolarLegendgrouptitleFontTextcaseLower    BarpolarLegendgrouptitleFontTextcase = "lower"
)

// BarpolarLegendgrouptitleFontVariant Sets the variant of the font.
// .schema.traces.barpolar.attributes.legendgrouptitle.font.variant
type BarpolarLegendgrouptitleFontVariant string

const (
	BarpolarLegendgrouptitleFontVariantNormal        BarpolarLegendgrouptitleFontVariant = "normal"
	BarpolarLegendgrouptitleFontVariantSmallCaps     BarpolarLegendgrouptitleFontVariant = "small-caps"
	BarpolarLegendgrouptitleFontVariantAllSmallCaps  BarpolarLegendgrouptitleFontVariant = "all-small-caps"
	BarpolarLegendgrouptitleFontVariantAllPetiteCaps BarpolarLegendgrouptitleFontVariant = "all-petite-caps"
	BarpolarLegendgrouptitleFontVariantPetiteCaps    BarpolarLegendgrouptitleFontVariant = "petite-caps"
	BarpolarLegendgrouptitleFontVariantUnicase       BarpolarLegendgrouptitleFontVariant = "unicase"
)

// BarpolarMarkerColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.traces.barpolar.attributes.marker.colorbar.exponentformat
type BarpolarMarkerColorbarExponentformat string

const (
	BarpolarMarkerColorbarExponentformatNone  BarpolarMarkerColorbarExponentformat = "none"
	BarpolarMarkerColorbarExponentformatE1    BarpolarMarkerColorbarExponentformat = "e"
	BarpolarMarkerColorbarExponentformatE2    BarpolarMarkerColorbarExponentformat = "E"
	BarpolarMarkerColorbarExponentformatPower BarpolarMarkerColorbarExponentformat = "power"
	BarpolarMarkerColorbarExponentformatSI    BarpolarMarkerColorbarExponentformat = "SI"
	BarpolarMarkerColorbarExponentformatB     BarpolarMarkerColorbarExponentformat = "B"
)

// BarpolarMarkerColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
// .schema.traces.barpolar.attributes.marker.colorbar.lenmode
type BarpolarMarkerColorbarLenmode string

const (
	BarpolarMarkerColorbarLenmodeFraction BarpolarMarkerColorbarLenmode = "fraction"
	BarpolarMarkerColorbarLenmodePixels   BarpolarMarkerColorbarLenmode = "pixels"
)

// BarpolarMarkerColorbarOrientation Sets the orientation of the colorbar.
// .schema.traces.barpolar.attributes.marker.colorbar.orientation
type BarpolarMarkerColorbarOrientation string

const (
	BarpolarMarkerColorbarOrientationH BarpolarMarkerColorbarOrientation = "h"
	BarpolarMarkerColorbarOrientationV BarpolarMarkerColorbarOrientation = "v"
)

// BarpolarMarkerColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.traces.barpolar.attributes.marker.colorbar.showexponent
type BarpolarMarkerColorbarShowexponent string

const (
	BarpolarMarkerColorbarShowexponentAll   BarpolarMarkerColorbarShowexponent = "all"
	BarpolarMarkerColorbarShowexponentFirst BarpolarMarkerColorbarShowexponent = "first"
	BarpolarMarkerColorbarShowexponentLast  BarpolarMarkerColorbarShowexponent = "last"
	BarpolarMarkerColorbarShowexponentNone  BarpolarMarkerColorbarShowexponent = "none"
)

// BarpolarMarkerColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.traces.barpolar.attributes.marker.colorbar.showtickprefix
type BarpolarMarkerColorbarShowtickprefix string

const (
	BarpolarMarkerColorbarShowtickprefixAll   BarpolarMarkerColorbarShowtickprefix = "all"
	BarpolarMarkerColorbarShowtickprefixFirst BarpolarMarkerColorbarShowtickprefix = "first"
	BarpolarMarkerColorbarShowtickprefixLast  BarpolarMarkerColorbarShowtickprefix = "last"
	BarpolarMarkerColorbarShowtickprefixNone  BarpolarMarkerColorbarShowtickprefix = "none"
)

// BarpolarMarkerColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.traces.barpolar.attributes.marker.colorbar.showticksuffix
type BarpolarMarkerColorbarShowticksuffix string

const (
	BarpolarMarkerColorbarShowticksuffixAll   BarpolarMarkerColorbarShowticksuffix = "all"
	BarpolarMarkerColorbarShowticksuffixFirst BarpolarMarkerColorbarShowticksuffix = "first"
	BarpolarMarkerColorbarShowticksuffixLast  BarpolarMarkerColorbarShowticksuffix = "last"
	BarpolarMarkerColorbarShowticksuffixNone  BarpolarMarkerColorbarShowticksuffix = "none"
)

// BarpolarMarkerColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
// .schema.traces.barpolar.attributes.marker.colorbar.thicknessmode
type BarpolarMarkerColorbarThicknessmode string

const (
	BarpolarMarkerColorbarThicknessmodeFraction BarpolarMarkerColorbarThicknessmode = "fraction"
	BarpolarMarkerColorbarThicknessmodePixels   BarpolarMarkerColorbarThicknessmode = "pixels"
)

// BarpolarMarkerColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.style
type BarpolarMarkerColorbarTickfontStyle string

const (
	BarpolarMarkerColorbarTickfontStyleNormal BarpolarMarkerColorbarTickfontStyle = "normal"
	BarpolarMarkerColorbarTickfontStyleItalic BarpolarMarkerColorbarTickfontStyle = "italic"
)

// BarpolarMarkerColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.textcase
type BarpolarMarkerColorbarTickfontTextcase string

const (
	BarpolarMarkerColorbarTickfontTextcaseNormal   BarpolarMarkerColorbarTickfontTextcase = "normal"
	BarpolarMarkerColorbarTickfontTextcaseWordCaps BarpolarMarkerColorbarTickfontTextcase = "word caps"
	BarpolarMarkerColorbarTickfontTextcaseUpper    BarpolarMarkerColorbarTickfontTextcase = "upper"
	BarpolarMarkerColorbarTickfontTextcaseLower    BarpolarMarkerColorbarTickfontTextcase = "lower"
)

// BarpolarMarkerColorbarTickfontVariant Sets the variant of the font.
// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.variant
type BarpolarMarkerColorbarTickfontVariant string

const (
	BarpolarMarkerColorbarTickfontVariantNormal        BarpolarMarkerColorbarTickfontVariant = "normal"
	BarpolarMarkerColorbarTickfontVariantSmallCaps     BarpolarMarkerColorbarTickfontVariant = "small-caps"
	BarpolarMarkerColorbarTickfontVariantAllSmallCaps  BarpolarMarkerColorbarTickfontVariant = "all-small-caps"
	BarpolarMarkerColorbarTickfontVariantAllPetiteCaps BarpolarMarkerColorbarTickfontVariant = "all-petite-caps"
	BarpolarMarkerColorbarTickfontVariantPetiteCaps    BarpolarMarkerColorbarTickfontVariant = "petite-caps"
	BarpolarMarkerColorbarTickfontVariantUnicase       BarpolarMarkerColorbarTickfontVariant = "unicase"
)

// BarpolarMarkerColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
// .schema.traces.barpolar.attributes.marker.colorbar.ticklabeloverflow
type BarpolarMarkerColorbarTicklabeloverflow string

const (
	BarpolarMarkerColorbarTicklabeloverflowAllow          BarpolarMarkerColorbarTicklabeloverflow = "allow"
	BarpolarMarkerColorbarTicklabeloverflowHidePastDiv    BarpolarMarkerColorbarTicklabeloverflow = "hide past div"
	BarpolarMarkerColorbarTicklabeloverflowHidePastDomain BarpolarMarkerColorbarTicklabeloverflow = "hide past domain"
)

// BarpolarMarkerColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
// .schema.traces.barpolar.attributes.marker.colorbar.ticklabelposition
type BarpolarMarkerColorbarTicklabelposition string

const (
	BarpolarMarkerColorbarTicklabelpositionOutside       BarpolarMarkerColorbarTicklabelposition = "outside"
	BarpolarMarkerColorbarTicklabelpositionInside        BarpolarMarkerColorbarTicklabelposition = "inside"
	BarpolarMarkerColorbarTicklabelpositionOutsideTop    BarpolarMarkerColorbarTicklabelposition = "outside top"
	BarpolarMarkerColorbarTicklabelpositionInsideTop     BarpolarMarkerColorbarTicklabelposition = "inside top"
	BarpolarMarkerColorbarTicklabelpositionOutsideLeft   BarpolarMarkerColorbarTicklabelposition = "outside left"
	BarpolarMarkerColorbarTicklabelpositionInsideLeft    BarpolarMarkerColorbarTicklabelposition = "inside left"
	BarpolarMarkerColorbarTicklabelpositionOutsideRight  BarpolarMarkerColorbarTicklabelposition = "outside right"
	BarpolarMarkerColorbarTicklabelpositionInsideRight   BarpolarMarkerColorbarTicklabelposition = "inside right"
	BarpolarMarkerColorbarTicklabelpositionOutsideBottom BarpolarMarkerColorbarTicklabelposition = "outside bottom"
	BarpolarMarkerColorbarTicklabelpositionInsideBottom  BarpolarMarkerColorbarTicklabelposition = "inside bottom"
)

// BarpolarMarkerColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.traces.barpolar.attributes.marker.colorbar.tickmode
type BarpolarMarkerColorbarTickmode string

const (
	BarpolarMarkerColorbarTickmodeAuto   BarpolarMarkerColorbarTickmode = "auto"
	BarpolarMarkerColorbarTickmodeLinear BarpolarMarkerColorbarTickmode = "linear"
	BarpolarMarkerColorbarTickmodeArray  BarpolarMarkerColorbarTickmode = "array"
)

// BarpolarMarkerColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.traces.barpolar.attributes.marker.colorbar.ticks
type BarpolarMarkerColorbarTicks string

const (
	BarpolarMarkerColorbarTicksOutside BarpolarMarkerColorbarTicks = "outside"
	BarpolarMarkerColorbarTicksInside  BarpolarMarkerColorbarTicks = "inside"
	BarpolarMarkerColorbarTicksEmpty   BarpolarMarkerColorbarTicks = ""
)

// BarpolarMarkerColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.barpolar.attributes.marker.colorbar.title.font.style
type BarpolarMarkerColorbarTitleFontStyle string

const (
	BarpolarMarkerColorbarTitleFontStyleNormal BarpolarMarkerColorbarTitleFontStyle = "normal"
	BarpolarMarkerColorbarTitleFontStyleItalic BarpolarMarkerColorbarTitleFontStyle = "italic"
)

// BarpolarMarkerColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.barpolar.attributes.marker.colorbar.title.font.textcase
type BarpolarMarkerColorbarTitleFontTextcase string

const (
	BarpolarMarkerColorbarTitleFontTextcaseNormal   BarpolarMarkerColorbarTitleFontTextcase = "normal"
	BarpolarMarkerColorbarTitleFontTextcaseWordCaps BarpolarMarkerColorbarTitleFontTextcase = "word caps"
	BarpolarMarkerColorbarTitleFontTextcaseUpper    BarpolarMarkerColorbarTitleFontTextcase = "upper"
	BarpolarMarkerColorbarTitleFontTextcaseLower    BarpolarMarkerColorbarTitleFontTextcase = "lower"
)

// BarpolarMarkerColorbarTitleFontVariant Sets the variant of the font.
// .schema.traces.barpolar.attributes.marker.colorbar.title.font.variant
type BarpolarMarkerColorbarTitleFontVariant string

const (
	BarpolarMarkerColorbarTitleFontVariantNormal        BarpolarMarkerColorbarTitleFontVariant = "normal"
	BarpolarMarkerColorbarTitleFontVariantSmallCaps     BarpolarMarkerColorbarTitleFontVariant = "small-caps"
	BarpolarMarkerColorbarTitleFontVariantAllSmallCaps  BarpolarMarkerColorbarTitleFontVariant = "all-small-caps"
	BarpolarMarkerColorbarTitleFontVariantAllPetiteCaps BarpolarMarkerColorbarTitleFontVariant = "all-petite-caps"
	BarpolarMarkerColorbarTitleFontVariantPetiteCaps    BarpolarMarkerColorbarTitleFontVariant = "petite-caps"
	BarpolarMarkerColorbarTitleFontVariantUnicase       BarpolarMarkerColorbarTitleFontVariant = "unicase"
)

// BarpolarMarkerColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
// .schema.traces.barpolar.attributes.marker.colorbar.title.side
type BarpolarMarkerColorbarTitleSide string

const (
	BarpolarMarkerColorbarTitleSideRight  BarpolarMarkerColorbarTitleSide = "right"
	BarpolarMarkerColorbarTitleSideTop    BarpolarMarkerColorbarTitleSide = "top"
	BarpolarMarkerColorbarTitleSideBottom BarpolarMarkerColorbarTitleSide = "bottom"
)

// BarpolarMarkerColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
// .schema.traces.barpolar.attributes.marker.colorbar.xanchor
type BarpolarMarkerColorbarXanchor string

const (
	BarpolarMarkerColorbarXanchorLeft   BarpolarMarkerColorbarXanchor = "left"
	BarpolarMarkerColorbarXanchorCenter BarpolarMarkerColorbarXanchor = "center"
	BarpolarMarkerColorbarXanchorRight  BarpolarMarkerColorbarXanchor = "right"
)

// BarpolarMarkerColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
// .schema.traces.barpolar.attributes.marker.colorbar.xref
type BarpolarMarkerColorbarXref string

const (
	BarpolarMarkerColorbarXrefContainer BarpolarMarkerColorbarXref = "container"
	BarpolarMarkerColorbarXrefPaper     BarpolarMarkerColorbarXref = "paper"
)

// BarpolarMarkerColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
// .schema.traces.barpolar.attributes.marker.colorbar.yanchor
type BarpolarMarkerColorbarYanchor string

const (
	BarpolarMarkerColorbarYanchorTop    BarpolarMarkerColorbarYanchor = "top"
	BarpolarMarkerColorbarYanchorMiddle BarpolarMarkerColorbarYanchor = "middle"
	BarpolarMarkerColorbarYanchorBottom BarpolarMarkerColorbarYanchor = "bottom"
)

// BarpolarMarkerColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
// .schema.traces.barpolar.attributes.marker.colorbar.yref
type BarpolarMarkerColorbarYref string

const (
	BarpolarMarkerColorbarYrefContainer BarpolarMarkerColorbarYref = "container"
	BarpolarMarkerColorbarYrefPaper     BarpolarMarkerColorbarYref = "paper"
)

// BarpolarMarkerPatternFillmode Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.
// .schema.traces.barpolar.attributes.marker.pattern.fillmode
type BarpolarMarkerPatternFillmode string

const (
	BarpolarMarkerPatternFillmodeReplace BarpolarMarkerPatternFillmode = "replace"
	BarpolarMarkerPatternFillmodeOverlay BarpolarMarkerPatternFillmode = "overlay"
)

// BarpolarMarkerPatternShape Sets the shape of the pattern fill. By default, no pattern is used for filling the area.
// .schema.traces.barpolar.attributes.marker.pattern.shape
type BarpolarMarkerPatternShape string

const (
	BarpolarMarkerPatternShapeEmpty           BarpolarMarkerPatternShape = ""
	BarpolarMarkerPatternShapeSlash           BarpolarMarkerPatternShape = "/"
	BarpolarMarkerPatternShapeDoublebackslash BarpolarMarkerPatternShape = "\\"
	BarpolarMarkerPatternShapeX               BarpolarMarkerPatternShape = "x"
	BarpolarMarkerPatternShapeHyphenHyphen    BarpolarMarkerPatternShape = "-"
	BarpolarMarkerPatternShapeOr              BarpolarMarkerPatternShape = "|"
	BarpolarMarkerPatternShapePlus            BarpolarMarkerPatternShape = "+"
	BarpolarMarkerPatternShapeDot             BarpolarMarkerPatternShape = "."
)

// BarpolarThetaunit Sets the unit of input *theta* values. Has an effect only when on *linear* angular axes.
// .schema.traces.barpolar.attributes.thetaunit
type BarpolarThetaunit string

const (
	BarpolarThetaunitRadians  BarpolarThetaunit = "radians"
	BarpolarThetaunitDegrees  BarpolarThetaunit = "degrees"
	BarpolarThetaunitGradians BarpolarThetaunit = "gradians"
)

// BarpolarVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
// .schema.traces.barpolar.attributes.visible
type BarpolarVisible interface{}

var (
	BarpolarVisibleTrue       BarpolarVisible = true
	BarpolarVisibleFalse      BarpolarVisible = false
	BarpolarVisibleLegendonly BarpolarVisible = "legendonly"
)

// BarpolarHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
// .schema.traces.barpolar.attributes.hoverinfo
type BarpolarHoverinfo string

const (
	// Flags
	BarpolarHoverinfoR     BarpolarHoverinfo = "r"
	BarpolarHoverinfoTheta BarpolarHoverinfo = "theta"
	BarpolarHoverinfoText  BarpolarHoverinfo = "text"
	BarpolarHoverinfoName  BarpolarHoverinfo = "name"

	// Extra
	BarpolarHoverinfoAll  BarpolarHoverinfo = "all"
	BarpolarHoverinfoNone BarpolarHoverinfo = "none"
	BarpolarHoverinfoSkip BarpolarHoverinfo = "skip"
)

// BarpolarHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.barpolar.attributes.hoverlabel.font.lineposition
type BarpolarHoverlabelFontLineposition string

const (
	// Flags
	BarpolarHoverlabelFontLinepositionUnder   BarpolarHoverlabelFontLineposition = "under"
	BarpolarHoverlabelFontLinepositionOver    BarpolarHoverlabelFontLineposition = "over"
	BarpolarHoverlabelFontLinepositionThrough BarpolarHoverlabelFontLineposition = "through"

	// Extra
	BarpolarHoverlabelFontLinepositionNone BarpolarHoverlabelFontLineposition = "none"
)

// BarpolarLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.barpolar.attributes.legendgrouptitle.font.lineposition
type BarpolarLegendgrouptitleFontLineposition string

const (
	// Flags
	BarpolarLegendgrouptitleFontLinepositionUnder   BarpolarLegendgrouptitleFontLineposition = "under"
	BarpolarLegendgrouptitleFontLinepositionOver    BarpolarLegendgrouptitleFontLineposition = "over"
	BarpolarLegendgrouptitleFontLinepositionThrough BarpolarLegendgrouptitleFontLineposition = "through"

	// Extra
	BarpolarLegendgrouptitleFontLinepositionNone BarpolarLegendgrouptitleFontLineposition = "none"
)

// BarpolarMarkerColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.barpolar.attributes.marker.colorbar.tickfont.lineposition
type BarpolarMarkerColorbarTickfontLineposition string

const (
	// Flags
	BarpolarMarkerColorbarTickfontLinepositionUnder   BarpolarMarkerColorbarTickfontLineposition = "under"
	BarpolarMarkerColorbarTickfontLinepositionOver    BarpolarMarkerColorbarTickfontLineposition = "over"
	BarpolarMarkerColorbarTickfontLinepositionThrough BarpolarMarkerColorbarTickfontLineposition = "through"

	// Extra
	BarpolarMarkerColorbarTickfontLinepositionNone BarpolarMarkerColorbarTickfontLineposition = "none"
)

// BarpolarMarkerColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.barpolar.attributes.marker.colorbar.title.font.lineposition
type BarpolarMarkerColorbarTitleFontLineposition string

const (
	// Flags
	BarpolarMarkerColorbarTitleFontLinepositionUnder   BarpolarMarkerColorbarTitleFontLineposition = "under"
	BarpolarMarkerColorbarTitleFontLinepositionOver    BarpolarMarkerColorbarTitleFontLineposition = "over"
	BarpolarMarkerColorbarTitleFontLinepositionThrough BarpolarMarkerColorbarTitleFontLineposition = "through"

	// Extra
	BarpolarMarkerColorbarTitleFontLinepositionNone BarpolarMarkerColorbarTitleFontLineposition = "none"
)
