package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeTable types.TraceType = "table"

func (t *Table) GetType() types.TraceType {
	return TraceTypeTable
}

func (t *Table) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Table
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Table Table view for detailed data viewing. The data are arranged in a grid of rows and columns. Most styling can be specified for columns, rows or individual cells. Table is using a column-major order, ie. the grid is represented as a vector of column vectors.
type Table struct {

	// Cells
	// arrayOK: false
	// role: Object
	Cells *TableCells `json:"cells,omitempty"`

	// Columnorder
	// arrayOK: false
	// type: data_array
	// Specifies the rendered order of the data columns; for example, a value `2` at position `0` means that column index `0` in the data will be rendered as the third column, as columns have an index base of zero.
	Columnorder interface{} `json:"columnorder,omitempty"`

	// Columnordersrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `columnorder`.
	Columnordersrc types.String `json:"columnordersrc,omitempty"`

	// Columnwidth
	// arrayOK: true
	// type: number
	// The width of columns expressed as a ratio. Columns fill the available width in proportion of their specified column widths.
	Columnwidth *types.ArrayOK[*float64] `json:"columnwidth,omitempty"`

	// Columnwidthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `columnwidth`.
	Columnwidthsrc types.String `json:"columnwidthsrc,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	Customdata interface{} `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	Customdatasrc types.String `json:"customdatasrc,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	Domain *TableDomain `json:"domain,omitempty"`

	// Header
	// arrayOK: false
	// role: Object
	Header *TableHeader `json:"header,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo *types.ArrayOK[*TableHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	Hoverinfosrc types.String `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	Hoverlabel *TableHoverlabel `json:"hoverlabel,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	Ids interface{} `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	Idssrc types.String `json:"idssrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend types.String `json:"legend,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	Legendgrouptitle *TableLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	Legendrank float64 `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	Legendwidth float64 `json:"legendwidth,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc types.String `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	Name types.String `json:"name,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	Stream *TableStream `json:"stream,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	Uid types.String `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible TableVisible `json:"visible,omitempty"`
}

// TableCellsFill
type TableCellsFill struct {

	// Color
	// arrayOK: true
	// type: color
	// Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`
}

// TableCellsFont
type TableCellsFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*TableCellsFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*TableCellsFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*TableCellsFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*TableCellsFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// TableCellsLine
type TableCellsLine struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	//
	Width *types.ArrayOK[*float64] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	Widthsrc types.String `json:"widthsrc,omitempty"`
}

// TableCells
type TableCells struct {

	// Align
	// arrayOK: true
	// default: center
	// type: enumerated
	// Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
	Align *types.ArrayOK[*TableCellsAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.String `json:"alignsrc,omitempty"`

	// Fill
	// arrayOK: false
	// role: Object
	Fill *TableCellsFill `json:"fill,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *TableCellsFont `json:"font,omitempty"`

	// Format
	// arrayOK: false
	// type: data_array
	// Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
	Format interface{} `json:"format,omitempty"`

	// Formatsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `format`.
	Formatsrc types.String `json:"formatsrc,omitempty"`

	// Height
	// arrayOK: false
	// type: number
	// The height of cells.
	Height float64 `json:"height,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	Line *TableCellsLine `json:"line,omitempty"`

	// Prefix
	// arrayOK: true
	// type: string
	// Prefix for cell values.
	Prefix *types.ArrayOK[*types.String] `json:"prefix,omitempty"`

	// Prefixsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `prefix`.
	Prefixsrc types.String `json:"prefixsrc,omitempty"`

	// Suffix
	// arrayOK: true
	// type: string
	// Suffix for cell values.
	Suffix *types.ArrayOK[*types.String] `json:"suffix,omitempty"`

	// Suffixsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `suffix`.
	Suffixsrc types.String `json:"suffixsrc,omitempty"`

	// Values
	// arrayOK: false
	// type: data_array
	// Cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.
	Values interface{} `json:"values,omitempty"`

	// Valuessrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `values`.
	Valuessrc types.String `json:"valuessrc,omitempty"`
}

// TableDomain
type TableDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this table trace .
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this table trace .
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this table trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this table trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// TableHeaderFill
type TableHeaderFill struct {

	// Color
	// arrayOK: true
	// type: color
	// Sets the cell fill color. It accepts either a specific color or an array of colors or a 2D array of colors.
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`
}

// TableHeaderFont
type TableHeaderFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*TableHeaderFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*TableHeaderFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*TableHeaderFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*TableHeaderFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// TableHeaderLine
type TableHeaderLine struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	//
	Width *types.ArrayOK[*float64] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	Widthsrc types.String `json:"widthsrc,omitempty"`
}

// TableHeader
type TableHeader struct {

	// Align
	// arrayOK: true
	// default: center
	// type: enumerated
	// Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
	Align *types.ArrayOK[*TableHeaderAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.String `json:"alignsrc,omitempty"`

	// Fill
	// arrayOK: false
	// role: Object
	Fill *TableHeaderFill `json:"fill,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *TableHeaderFont `json:"font,omitempty"`

	// Format
	// arrayOK: false
	// type: data_array
	// Sets the cell value formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.
	Format interface{} `json:"format,omitempty"`

	// Formatsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `format`.
	Formatsrc types.String `json:"formatsrc,omitempty"`

	// Height
	// arrayOK: false
	// type: number
	// The height of cells.
	Height float64 `json:"height,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	Line *TableHeaderLine `json:"line,omitempty"`

	// Prefix
	// arrayOK: true
	// type: string
	// Prefix for cell values.
	Prefix *types.ArrayOK[*types.String] `json:"prefix,omitempty"`

	// Prefixsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `prefix`.
	Prefixsrc types.String `json:"prefixsrc,omitempty"`

	// Suffix
	// arrayOK: true
	// type: string
	// Suffix for cell values.
	Suffix *types.ArrayOK[*types.String] `json:"suffix,omitempty"`

	// Suffixsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `suffix`.
	Suffixsrc types.String `json:"suffixsrc,omitempty"`

	// Values
	// arrayOK: false
	// type: data_array
	// Header cell values. `values[m][n]` represents the value of the `n`th point in column `m`, therefore the `values[m]` vector length for all columns must be the same (longer vectors will be truncated). Each value must be a finite number or a string.
	Values interface{} `json:"values,omitempty"`

	// Valuessrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `values`.
	Valuessrc types.String `json:"valuessrc,omitempty"`
}

// TableHoverlabelFont Sets the font used in hover labels.
type TableHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*TableHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*TableHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*TableHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*TableHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// TableHoverlabel
type TableHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align *types.ArrayOK[*TableHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.String `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.String `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	Bordercolorsrc types.String `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *TableHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength *types.ArrayOK[*int64] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	Namelengthsrc types.String `json:"namelengthsrc,omitempty"`
}

// TableLegendgrouptitleFont Sets this legend group's title font.
type TableLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.String `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition TableLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.String `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style TableLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase TableLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant TableLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight int64 `json:"weight,omitempty"`
}

// TableLegendgrouptitle
type TableLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *TableLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text types.String `json:"text,omitempty"`
}

// TableStream
type TableStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token types.String `json:"token,omitempty"`
}

// TableCellsAlign Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
type TableCellsAlign string

const (
	TableCellsAlignLeft   TableCellsAlign = "left"
	TableCellsAlignCenter TableCellsAlign = "center"
	TableCellsAlignRight  TableCellsAlign = "right"
)

// TableCellsFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type TableCellsFontStyle string

const (
	TableCellsFontStyleNormal TableCellsFontStyle = "normal"
	TableCellsFontStyleItalic TableCellsFontStyle = "italic"
)

// TableCellsFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type TableCellsFontTextcase string

const (
	TableCellsFontTextcaseNormal   TableCellsFontTextcase = "normal"
	TableCellsFontTextcaseWordCaps TableCellsFontTextcase = "word caps"
	TableCellsFontTextcaseUpper    TableCellsFontTextcase = "upper"
	TableCellsFontTextcaseLower    TableCellsFontTextcase = "lower"
)

// TableCellsFontVariant Sets the variant of the font.
type TableCellsFontVariant string

const (
	TableCellsFontVariantNormal        TableCellsFontVariant = "normal"
	TableCellsFontVariantSmallCaps     TableCellsFontVariant = "small-caps"
	TableCellsFontVariantAllSmallCaps  TableCellsFontVariant = "all-small-caps"
	TableCellsFontVariantAllPetiteCaps TableCellsFontVariant = "all-petite-caps"
	TableCellsFontVariantPetiteCaps    TableCellsFontVariant = "petite-caps"
	TableCellsFontVariantUnicase       TableCellsFontVariant = "unicase"
)

// TableHeaderAlign Sets the horizontal alignment of the `text` within the box. Has an effect only if `text` spans two or more lines (i.e. `text` contains one or more <br> HTML tags) or if an explicit width is set to override the text width.
type TableHeaderAlign string

const (
	TableHeaderAlignLeft   TableHeaderAlign = "left"
	TableHeaderAlignCenter TableHeaderAlign = "center"
	TableHeaderAlignRight  TableHeaderAlign = "right"
)

// TableHeaderFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type TableHeaderFontStyle string

const (
	TableHeaderFontStyleNormal TableHeaderFontStyle = "normal"
	TableHeaderFontStyleItalic TableHeaderFontStyle = "italic"
)

// TableHeaderFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type TableHeaderFontTextcase string

const (
	TableHeaderFontTextcaseNormal   TableHeaderFontTextcase = "normal"
	TableHeaderFontTextcaseWordCaps TableHeaderFontTextcase = "word caps"
	TableHeaderFontTextcaseUpper    TableHeaderFontTextcase = "upper"
	TableHeaderFontTextcaseLower    TableHeaderFontTextcase = "lower"
)

// TableHeaderFontVariant Sets the variant of the font.
type TableHeaderFontVariant string

const (
	TableHeaderFontVariantNormal        TableHeaderFontVariant = "normal"
	TableHeaderFontVariantSmallCaps     TableHeaderFontVariant = "small-caps"
	TableHeaderFontVariantAllSmallCaps  TableHeaderFontVariant = "all-small-caps"
	TableHeaderFontVariantAllPetiteCaps TableHeaderFontVariant = "all-petite-caps"
	TableHeaderFontVariantPetiteCaps    TableHeaderFontVariant = "petite-caps"
	TableHeaderFontVariantUnicase       TableHeaderFontVariant = "unicase"
)

// TableHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type TableHoverlabelAlign string

const (
	TableHoverlabelAlignLeft  TableHoverlabelAlign = "left"
	TableHoverlabelAlignRight TableHoverlabelAlign = "right"
	TableHoverlabelAlignAuto  TableHoverlabelAlign = "auto"
)

// TableHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type TableHoverlabelFontStyle string

const (
	TableHoverlabelFontStyleNormal TableHoverlabelFontStyle = "normal"
	TableHoverlabelFontStyleItalic TableHoverlabelFontStyle = "italic"
)

// TableHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type TableHoverlabelFontTextcase string

const (
	TableHoverlabelFontTextcaseNormal   TableHoverlabelFontTextcase = "normal"
	TableHoverlabelFontTextcaseWordCaps TableHoverlabelFontTextcase = "word caps"
	TableHoverlabelFontTextcaseUpper    TableHoverlabelFontTextcase = "upper"
	TableHoverlabelFontTextcaseLower    TableHoverlabelFontTextcase = "lower"
)

// TableHoverlabelFontVariant Sets the variant of the font.
type TableHoverlabelFontVariant string

const (
	TableHoverlabelFontVariantNormal        TableHoverlabelFontVariant = "normal"
	TableHoverlabelFontVariantSmallCaps     TableHoverlabelFontVariant = "small-caps"
	TableHoverlabelFontVariantAllSmallCaps  TableHoverlabelFontVariant = "all-small-caps"
	TableHoverlabelFontVariantAllPetiteCaps TableHoverlabelFontVariant = "all-petite-caps"
	TableHoverlabelFontVariantPetiteCaps    TableHoverlabelFontVariant = "petite-caps"
	TableHoverlabelFontVariantUnicase       TableHoverlabelFontVariant = "unicase"
)

// TableLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type TableLegendgrouptitleFontStyle string

const (
	TableLegendgrouptitleFontStyleNormal TableLegendgrouptitleFontStyle = "normal"
	TableLegendgrouptitleFontStyleItalic TableLegendgrouptitleFontStyle = "italic"
)

// TableLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type TableLegendgrouptitleFontTextcase string

const (
	TableLegendgrouptitleFontTextcaseNormal   TableLegendgrouptitleFontTextcase = "normal"
	TableLegendgrouptitleFontTextcaseWordCaps TableLegendgrouptitleFontTextcase = "word caps"
	TableLegendgrouptitleFontTextcaseUpper    TableLegendgrouptitleFontTextcase = "upper"
	TableLegendgrouptitleFontTextcaseLower    TableLegendgrouptitleFontTextcase = "lower"
)

// TableLegendgrouptitleFontVariant Sets the variant of the font.
type TableLegendgrouptitleFontVariant string

const (
	TableLegendgrouptitleFontVariantNormal        TableLegendgrouptitleFontVariant = "normal"
	TableLegendgrouptitleFontVariantSmallCaps     TableLegendgrouptitleFontVariant = "small-caps"
	TableLegendgrouptitleFontVariantAllSmallCaps  TableLegendgrouptitleFontVariant = "all-small-caps"
	TableLegendgrouptitleFontVariantAllPetiteCaps TableLegendgrouptitleFontVariant = "all-petite-caps"
	TableLegendgrouptitleFontVariantPetiteCaps    TableLegendgrouptitleFontVariant = "petite-caps"
	TableLegendgrouptitleFontVariantUnicase       TableLegendgrouptitleFontVariant = "unicase"
)

// TableVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type TableVisible interface{}

var (
	TableVisibleTrue       TableVisible = true
	TableVisibleFalse      TableVisible = false
	TableVisibleLegendonly TableVisible = "legendonly"
)

// TableCellsFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type TableCellsFontLineposition string

const (
	// Flags
	TableCellsFontLinepositionUnder   TableCellsFontLineposition = "under"
	TableCellsFontLinepositionOver    TableCellsFontLineposition = "over"
	TableCellsFontLinepositionThrough TableCellsFontLineposition = "through"

	// Extra
	TableCellsFontLinepositionNone TableCellsFontLineposition = "none"
)

// TableHeaderFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type TableHeaderFontLineposition string

const (
	// Flags
	TableHeaderFontLinepositionUnder   TableHeaderFontLineposition = "under"
	TableHeaderFontLinepositionOver    TableHeaderFontLineposition = "over"
	TableHeaderFontLinepositionThrough TableHeaderFontLineposition = "through"

	// Extra
	TableHeaderFontLinepositionNone TableHeaderFontLineposition = "none"
)

// TableHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
type TableHoverinfo string

const (
	// Flags
	TableHoverinfoX    TableHoverinfo = "x"
	TableHoverinfoY    TableHoverinfo = "y"
	TableHoverinfoZ    TableHoverinfo = "z"
	TableHoverinfoText TableHoverinfo = "text"
	TableHoverinfoName TableHoverinfo = "name"

	// Extra
	TableHoverinfoAll  TableHoverinfo = "all"
	TableHoverinfoNone TableHoverinfo = "none"
	TableHoverinfoSkip TableHoverinfo = "skip"
)

// TableHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type TableHoverlabelFontLineposition string

const (
	// Flags
	TableHoverlabelFontLinepositionUnder   TableHoverlabelFontLineposition = "under"
	TableHoverlabelFontLinepositionOver    TableHoverlabelFontLineposition = "over"
	TableHoverlabelFontLinepositionThrough TableHoverlabelFontLineposition = "through"

	// Extra
	TableHoverlabelFontLinepositionNone TableHoverlabelFontLineposition = "none"
)

// TableLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type TableLegendgrouptitleFontLineposition string

const (
	// Flags
	TableLegendgrouptitleFontLinepositionUnder   TableLegendgrouptitleFontLineposition = "under"
	TableLegendgrouptitleFontLinepositionOver    TableLegendgrouptitleFontLineposition = "over"
	TableLegendgrouptitleFontLinepositionThrough TableLegendgrouptitleFontLineposition = "through"

	// Extra
	TableLegendgrouptitleFontLinepositionNone TableLegendgrouptitleFontLineposition = "none"
)
