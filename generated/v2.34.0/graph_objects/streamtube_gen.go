package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeStreamtube types.TraceType = "streamtube"

func (t *Streamtube) GetType() types.TraceType {
	return TraceTypeStreamtube
}

func (t *Streamtube) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Streamtube
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Streamtube Use a streamtube trace to visualize flow in a vector field.  Specify a vector field using 6 1D arrays of equal length, 3 position arrays `x`, `y` and `z` and 3 vector component arrays `u`, `v`, and `w`.  By default, the tubes' starting positions will be cut from the vector field's x-z plane at its minimum y value. To specify your own starting position, use attributes `starts.x`, `starts.y` and `starts.z`. The color is encoded by the norm of (u, v, w), and the local radius by the divergence of (u, v, w).
type Streamtube struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	// .schema.traces.streamtube.attributes.autocolorscale
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here u/v/w norm) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.
	// .schema.traces.streamtube.attributes.cauto
	Cauto types.BoolType `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmin` must be set as well.
	// .schema.traces.streamtube.attributes.cmax
	Cmax types.NumberType `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as u/v/w norm. Has no effect when `cauto` is `false`.
	// .schema.traces.streamtube.attributes.cmid
	Cmid types.NumberType `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Value should have the same units as u/v/w norm and if set, `cmax` must be set as well.
	// .schema.traces.streamtube.attributes.cmin
	Cmin types.NumberType `json:"cmin,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	// .schema.traces.streamtube.attributes.coloraxis
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.colorbar
	Colorbar *StreamtubeColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	// .schema.traces.streamtube.attributes.colorscale
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.customdata
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	// .schema.traces.streamtube.attributes.customdatasrc
	Customdatasrc types.StringType `json:"customdatasrc,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: x+y+z+norm+text+name
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	// .schema.traces.streamtube.attributes.hoverinfo
	Hoverinfo *types.ArrayOK[*StreamtubeHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	// .schema.traces.streamtube.attributes.hoverinfosrc
	Hoverinfosrc types.StringType `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.hoverlabel
	Hoverlabel *StreamtubeHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `tubex`, `tubey`, `tubez`, `tubeu`, `tubev`, `tubew`, `norm` and `divergence`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	// .schema.traces.streamtube.attributes.hovertemplate
	Hovertemplate *types.ArrayOK[*types.StringType] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	// .schema.traces.streamtube.attributes.hovertemplatesrc
	Hovertemplatesrc types.StringType `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: false
	// type: string
	// Same as `text`.
	// .schema.traces.streamtube.attributes.hovertext
	Hovertext types.StringType `json:"hovertext,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.ids
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	// .schema.traces.streamtube.attributes.idssrc
	Idssrc types.StringType `json:"idssrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	// .schema.traces.streamtube.attributes.legend
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	// .schema.traces.streamtube.attributes.legendgroup
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.legendgrouptitle
	Legendgrouptitle *StreamtubeLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	// .schema.traces.streamtube.attributes.legendrank
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	// .schema.traces.streamtube.attributes.legendwidth
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Lighting
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.lighting
	Lighting *StreamtubeLighting `json:"lighting,omitempty"`

	// Lightposition
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.lightposition
	Lightposition *StreamtubeLightposition `json:"lightposition,omitempty"`

	// Maxdisplayed
	// arrayOK: false
	// type: integer
	// The maximum number of displayed segments in a streamtube.
	// .schema.traces.streamtube.attributes.maxdisplayed
	Maxdisplayed types.IntegerType `json:"maxdisplayed,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	// .schema.traces.streamtube.attributes.meta
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	// .schema.traces.streamtube.attributes.metasrc
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	// .schema.traces.streamtube.attributes.name
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
	// .schema.traces.streamtube.attributes.opacity
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
	// .schema.traces.streamtube.attributes.reversescale
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Scene
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
	// .schema.traces.streamtube.attributes.scene
	Scene types.StringType `json:"scene,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	// .schema.traces.streamtube.attributes.showlegend
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace.
	// .schema.traces.streamtube.attributes.showscale
	Showscale types.BoolType `json:"showscale,omitempty"`

	// Sizeref
	// arrayOK: false
	// type: number
	// The scaling factor for the streamtubes. The default is 1, which avoids two max divergence tubes from touching at adjacent starting positions.
	// .schema.traces.streamtube.attributes.sizeref
	Sizeref types.NumberType `json:"sizeref,omitempty"`

	// Starts
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.starts
	Starts *StreamtubeStarts `json:"starts,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.stream
	Stream *StreamtubeStream `json:"stream,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets a text element associated with this trace. If trace `hoverinfo` contains a *text* flag, this text element will be seen in all hover labels. Note that streamtube traces do not support array `text` values.
	// .schema.traces.streamtube.attributes.text
	Text types.StringType `json:"text,omitempty"`

	// U
	// arrayOK: false
	// type: data_array
	// Sets the x components of the vector field.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.u
	U *types.DataArrayType `json:"u,omitempty"`

	// Uhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `u`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.
	// .schema.traces.streamtube.attributes.uhoverformat
	Uhoverformat types.StringType `json:"uhoverformat,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	// .schema.traces.streamtube.attributes.uid
	Uid types.StringType `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	// .schema.traces.streamtube.attributes.uirevision
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Usrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `u`.
	// .schema.traces.streamtube.attributes.usrc
	Usrc types.StringType `json:"usrc,omitempty"`

	// V
	// arrayOK: false
	// type: data_array
	// Sets the y components of the vector field.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.v
	V *types.DataArrayType `json:"v,omitempty"`

	// Vhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `v`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.
	// .schema.traces.streamtube.attributes.vhoverformat
	Vhoverformat types.StringType `json:"vhoverformat,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	// .schema.traces.streamtube.attributes.visible
	Visible StreamtubeVisible `json:"visible,omitempty"`

	// Vsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `v`.
	// .schema.traces.streamtube.attributes.vsrc
	Vsrc types.StringType `json:"vsrc,omitempty"`

	// W
	// arrayOK: false
	// type: data_array
	// Sets the z components of the vector field.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.w
	W *types.DataArrayType `json:"w,omitempty"`

	// Whoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `w`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format.By default the values are formatted using generic number format.
	// .schema.traces.streamtube.attributes.whoverformat
	Whoverformat types.StringType `json:"whoverformat,omitempty"`

	// Wsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `w`.
	// .schema.traces.streamtube.attributes.wsrc
	Wsrc types.StringType `json:"wsrc,omitempty"`

	// X
	// arrayOK: false
	// type: data_array
	// Sets the x coordinates of the vector field.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.x
	X *types.DataArrayType `json:"x,omitempty"`

	// Xhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.
	// .schema.traces.streamtube.attributes.xhoverformat
	Xhoverformat types.StringType `json:"xhoverformat,omitempty"`

	// Xsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `x`.
	// .schema.traces.streamtube.attributes.xsrc
	Xsrc types.StringType `json:"xsrc,omitempty"`

	// Y
	// arrayOK: false
	// type: data_array
	// Sets the y coordinates of the vector field.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.y
	Y *types.DataArrayType `json:"y,omitempty"`

	// Yhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.
	// .schema.traces.streamtube.attributes.yhoverformat
	Yhoverformat types.StringType `json:"yhoverformat,omitempty"`

	// Ysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `y`.
	// .schema.traces.streamtube.attributes.ysrc
	Ysrc types.StringType `json:"ysrc,omitempty"`

	// Z
	// arrayOK: false
	// type: data_array
	// Sets the z coordinates of the vector field.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.z
	Z *types.DataArrayType `json:"z,omitempty"`

	// Zhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.
	// .schema.traces.streamtube.attributes.zhoverformat
	Zhoverformat types.StringType `json:"zhoverformat,omitempty"`

	// Zsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `z`.
	// .schema.traces.streamtube.attributes.zsrc
	Zsrc types.StringType `json:"zsrc,omitempty"`
}

// StreamtubeColorbarTickfont Sets the color bar's tick label font
type StreamtubeColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.streamtube.attributes.colorbar.tickfont.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.streamtube.attributes.colorbar.tickfont.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.streamtube.attributes.colorbar.tickfont.lineposition
	Lineposition StreamtubeColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.streamtube.attributes.colorbar.tickfont.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.streamtube.attributes.colorbar.tickfont.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.streamtube.attributes.colorbar.tickfont.style
	Style StreamtubeColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.streamtube.attributes.colorbar.tickfont.textcase
	Textcase StreamtubeColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.streamtube.attributes.colorbar.tickfont.variant
	Variant StreamtubeColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.streamtube.attributes.colorbar.tickfont.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// StreamtubeColorbarTickformatstop
type StreamtubeColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	// .schema.traces.streamtube.attributes.colorbar.tickformatstops.items.tickformatstop.dtickrange
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	// .schema.traces.streamtube.attributes.colorbar.tickformatstops.items.tickformatstop.enabled
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	// .schema.traces.streamtube.attributes.colorbar.tickformatstops.items.tickformatstop.name
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	// .schema.traces.streamtube.attributes.colorbar.tickformatstops.items.tickformatstop.templateitemname
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	// .schema.traces.streamtube.attributes.colorbar.tickformatstops.items.tickformatstop.value
	Value types.StringType `json:"value,omitempty"`
}

// StreamtubeColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type StreamtubeColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.streamtube.attributes.colorbar.title.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.streamtube.attributes.colorbar.title.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.streamtube.attributes.colorbar.title.font.lineposition
	Lineposition StreamtubeColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.streamtube.attributes.colorbar.title.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.streamtube.attributes.colorbar.title.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.streamtube.attributes.colorbar.title.font.style
	Style StreamtubeColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.streamtube.attributes.colorbar.title.font.textcase
	Textcase StreamtubeColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.streamtube.attributes.colorbar.title.font.variant
	Variant StreamtubeColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.streamtube.attributes.colorbar.title.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// StreamtubeColorbarTitle
type StreamtubeColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.colorbar.title.font
	Font *StreamtubeColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	// .schema.traces.streamtube.attributes.colorbar.title.side
	Side StreamtubeColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	// .schema.traces.streamtube.attributes.colorbar.title.text
	Text types.StringType `json:"text,omitempty"`
}

// StreamtubeColorbar
type StreamtubeColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	// .schema.traces.streamtube.attributes.colorbar.bgcolor
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.traces.streamtube.attributes.colorbar.bordercolor
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	// .schema.traces.streamtube.attributes.colorbar.borderwidth
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	// .schema.traces.streamtube.attributes.colorbar.dtick
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	// .schema.traces.streamtube.attributes.colorbar.exponentformat
	Exponentformat StreamtubeColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	// .schema.traces.streamtube.attributes.colorbar.labelalias
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	// .schema.traces.streamtube.attributes.colorbar.len
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	// .schema.traces.streamtube.attributes.colorbar.lenmode
	Lenmode StreamtubeColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	// .schema.traces.streamtube.attributes.colorbar.minexponent
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	// .schema.traces.streamtube.attributes.colorbar.nticks
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	// .schema.traces.streamtube.attributes.colorbar.orientation
	Orientation StreamtubeColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	// .schema.traces.streamtube.attributes.colorbar.outlinecolor
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	// .schema.traces.streamtube.attributes.colorbar.outlinewidth
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	// .schema.traces.streamtube.attributes.colorbar.separatethousands
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	// .schema.traces.streamtube.attributes.colorbar.showexponent
	Showexponent StreamtubeColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	// .schema.traces.streamtube.attributes.colorbar.showticklabels
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	// .schema.traces.streamtube.attributes.colorbar.showtickprefix
	Showtickprefix StreamtubeColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	// .schema.traces.streamtube.attributes.colorbar.showticksuffix
	Showticksuffix StreamtubeColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	// .schema.traces.streamtube.attributes.colorbar.thickness
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	// .schema.traces.streamtube.attributes.colorbar.thicknessmode
	Thicknessmode StreamtubeColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	// .schema.traces.streamtube.attributes.colorbar.tick0
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	// .schema.traces.streamtube.attributes.colorbar.tickangle
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	// .schema.traces.streamtube.attributes.colorbar.tickcolor
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.colorbar.tickfont
	Tickfont *StreamtubeColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	// .schema.traces.streamtube.attributes.colorbar.tickformat
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: StreamtubeColorbarTickformatstop
	// .schema.traces.streamtube.attributes.colorbar.tickformatstops
	Tickformatstops []StreamtubeColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	// .schema.traces.streamtube.attributes.colorbar.ticklabeloverflow
	Ticklabeloverflow StreamtubeColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	// .schema.traces.streamtube.attributes.colorbar.ticklabelposition
	Ticklabelposition StreamtubeColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	// .schema.traces.streamtube.attributes.colorbar.ticklabelstep
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	// .schema.traces.streamtube.attributes.colorbar.ticklen
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	// .schema.traces.streamtube.attributes.colorbar.tickmode
	Tickmode StreamtubeColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	// .schema.traces.streamtube.attributes.colorbar.tickprefix
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	// .schema.traces.streamtube.attributes.colorbar.ticks
	Ticks StreamtubeColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	// .schema.traces.streamtube.attributes.colorbar.ticksuffix
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.colorbar.ticktext
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	// .schema.traces.streamtube.attributes.colorbar.ticktextsrc
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.colorbar.tickvals
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	// .schema.traces.streamtube.attributes.colorbar.tickvalssrc
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	// .schema.traces.streamtube.attributes.colorbar.tickwidth
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.colorbar.title
	Title *StreamtubeColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	// .schema.traces.streamtube.attributes.colorbar.x
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	// .schema.traces.streamtube.attributes.colorbar.xanchor
	Xanchor StreamtubeColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	// .schema.traces.streamtube.attributes.colorbar.xpad
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	// .schema.traces.streamtube.attributes.colorbar.xref
	Xref StreamtubeColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	// .schema.traces.streamtube.attributes.colorbar.y
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	// .schema.traces.streamtube.attributes.colorbar.yanchor
	Yanchor StreamtubeColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	// .schema.traces.streamtube.attributes.colorbar.ypad
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	// .schema.traces.streamtube.attributes.colorbar.yref
	Yref StreamtubeColorbarYref `json:"yref,omitempty"`
}

// StreamtubeHoverlabelFont Sets the font used in hover labels.
type StreamtubeHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	// .schema.traces.streamtube.attributes.hoverlabel.font.color
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.colorsrc
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.streamtube.attributes.hoverlabel.font.family
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.familysrc
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.streamtube.attributes.hoverlabel.font.lineposition
	Lineposition *types.ArrayOK[*StreamtubeHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.linepositionsrc
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.streamtube.attributes.hoverlabel.font.shadow
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.shadowsrc
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	// .schema.traces.streamtube.attributes.hoverlabel.font.size
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.sizesrc
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.streamtube.attributes.hoverlabel.font.style
	Style *types.ArrayOK[*StreamtubeHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.stylesrc
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.streamtube.attributes.hoverlabel.font.textcase
	Textcase *types.ArrayOK[*StreamtubeHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.textcasesrc
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.streamtube.attributes.hoverlabel.font.variant
	Variant *types.ArrayOK[*StreamtubeHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.variantsrc
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.streamtube.attributes.hoverlabel.font.weight
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	// .schema.traces.streamtube.attributes.hoverlabel.font.weightsrc
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// StreamtubeHoverlabel
type StreamtubeHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	// .schema.traces.streamtube.attributes.hoverlabel.align
	Align *types.ArrayOK[*StreamtubeHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	// .schema.traces.streamtube.attributes.hoverlabel.alignsrc
	Alignsrc types.StringType `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	// .schema.traces.streamtube.attributes.hoverlabel.bgcolor
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	// .schema.traces.streamtube.attributes.hoverlabel.bgcolorsrc
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	// .schema.traces.streamtube.attributes.hoverlabel.bordercolor
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	// .schema.traces.streamtube.attributes.hoverlabel.bordercolorsrc
	Bordercolorsrc types.StringType `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.hoverlabel.font
	Font *StreamtubeHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	// .schema.traces.streamtube.attributes.hoverlabel.namelength
	Namelength *types.ArrayOK[*types.IntegerType] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	// .schema.traces.streamtube.attributes.hoverlabel.namelengthsrc
	Namelengthsrc types.StringType `json:"namelengthsrc,omitempty"`
}

// StreamtubeLegendgrouptitleFont Sets this legend group's title font.
type StreamtubeLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.color
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.family
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.lineposition
	Lineposition StreamtubeLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.shadow
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.size
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.style
	Style StreamtubeLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.textcase
	Textcase StreamtubeLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.variant
	Variant StreamtubeLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	// .schema.traces.streamtube.attributes.legendgrouptitle.font.weight
	Weight types.IntegerType `json:"weight,omitempty"`
}

// StreamtubeLegendgrouptitle
type StreamtubeLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	// .schema.traces.streamtube.attributes.legendgrouptitle.font
	Font *StreamtubeLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	// .schema.traces.streamtube.attributes.legendgrouptitle.text
	Text types.StringType `json:"text,omitempty"`
}

// StreamtubeLighting
type StreamtubeLighting struct {

	// Ambient
	// arrayOK: false
	// type: number
	// Ambient light increases overall color visibility but can wash out the image.
	// .schema.traces.streamtube.attributes.lighting.ambient
	Ambient types.NumberType `json:"ambient,omitempty"`

	// Diffuse
	// arrayOK: false
	// type: number
	// Represents the extent that incident rays are reflected in a range of angles.
	// .schema.traces.streamtube.attributes.lighting.diffuse
	Diffuse types.NumberType `json:"diffuse,omitempty"`

	// Facenormalsepsilon
	// arrayOK: false
	// type: number
	// Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
	// .schema.traces.streamtube.attributes.lighting.facenormalsepsilon
	Facenormalsepsilon types.NumberType `json:"facenormalsepsilon,omitempty"`

	// Fresnel
	// arrayOK: false
	// type: number
	// Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	// .schema.traces.streamtube.attributes.lighting.fresnel
	Fresnel types.NumberType `json:"fresnel,omitempty"`

	// Roughness
	// arrayOK: false
	// type: number
	// Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	// .schema.traces.streamtube.attributes.lighting.roughness
	Roughness types.NumberType `json:"roughness,omitempty"`

	// Specular
	// arrayOK: false
	// type: number
	// Represents the level that incident rays are reflected in a single direction, causing shine.
	// .schema.traces.streamtube.attributes.lighting.specular
	Specular types.NumberType `json:"specular,omitempty"`

	// Vertexnormalsepsilon
	// arrayOK: false
	// type: number
	// Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
	// .schema.traces.streamtube.attributes.lighting.vertexnormalsepsilon
	Vertexnormalsepsilon types.NumberType `json:"vertexnormalsepsilon,omitempty"`
}

// StreamtubeLightposition
type StreamtubeLightposition struct {

	// X
	// arrayOK: false
	// type: number
	// Numeric vector, representing the X coordinate for each vertex.
	// .schema.traces.streamtube.attributes.lightposition.x
	X types.NumberType `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Numeric vector, representing the Y coordinate for each vertex.
	// .schema.traces.streamtube.attributes.lightposition.y
	Y types.NumberType `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	// Numeric vector, representing the Z coordinate for each vertex.
	// .schema.traces.streamtube.attributes.lightposition.z
	Z types.NumberType `json:"z,omitempty"`
}

// StreamtubeStarts
type StreamtubeStarts struct {

	// X
	// arrayOK: false
	// type: data_array
	// Sets the x components of the starting position of the streamtubes
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.starts.x
	X *types.DataArrayType `json:"x,omitempty"`

	// Xsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `x`.
	// .schema.traces.streamtube.attributes.starts.xsrc
	Xsrc types.StringType `json:"xsrc,omitempty"`

	// Y
	// arrayOK: false
	// type: data_array
	// Sets the y components of the starting position of the streamtubes
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.starts.y
	Y *types.DataArrayType `json:"y,omitempty"`

	// Ysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `y`.
	// .schema.traces.streamtube.attributes.starts.ysrc
	Ysrc types.StringType `json:"ysrc,omitempty"`

	// Z
	// arrayOK: false
	// type: data_array
	// Sets the z components of the starting position of the streamtubes
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	// .schema.traces.streamtube.attributes.starts.z
	Z *types.DataArrayType `json:"z,omitempty"`

	// Zsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `z`.
	// .schema.traces.streamtube.attributes.starts.zsrc
	Zsrc types.StringType `json:"zsrc,omitempty"`
}

// StreamtubeStream
type StreamtubeStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	// .schema.traces.streamtube.attributes.stream.maxpoints
	Maxpoints types.NumberType `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	// .schema.traces.streamtube.attributes.stream.token
	Token types.StringType `json:"token,omitempty"`
}

// StreamtubeColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
// .schema.traces.streamtube.attributes.colorbar.exponentformat
type StreamtubeColorbarExponentformat string

const (
	StreamtubeColorbarExponentformatNone  StreamtubeColorbarExponentformat = "none"
	StreamtubeColorbarExponentformatE1    StreamtubeColorbarExponentformat = "e"
	StreamtubeColorbarExponentformatE2    StreamtubeColorbarExponentformat = "E"
	StreamtubeColorbarExponentformatPower StreamtubeColorbarExponentformat = "power"
	StreamtubeColorbarExponentformatSI    StreamtubeColorbarExponentformat = "SI"
	StreamtubeColorbarExponentformatB     StreamtubeColorbarExponentformat = "B"
)

// StreamtubeColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
// .schema.traces.streamtube.attributes.colorbar.lenmode
type StreamtubeColorbarLenmode string

const (
	StreamtubeColorbarLenmodeFraction StreamtubeColorbarLenmode = "fraction"
	StreamtubeColorbarLenmodePixels   StreamtubeColorbarLenmode = "pixels"
)

// StreamtubeColorbarOrientation Sets the orientation of the colorbar.
// .schema.traces.streamtube.attributes.colorbar.orientation
type StreamtubeColorbarOrientation string

const (
	StreamtubeColorbarOrientationH StreamtubeColorbarOrientation = "h"
	StreamtubeColorbarOrientationV StreamtubeColorbarOrientation = "v"
)

// StreamtubeColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
// .schema.traces.streamtube.attributes.colorbar.showexponent
type StreamtubeColorbarShowexponent string

const (
	StreamtubeColorbarShowexponentAll   StreamtubeColorbarShowexponent = "all"
	StreamtubeColorbarShowexponentFirst StreamtubeColorbarShowexponent = "first"
	StreamtubeColorbarShowexponentLast  StreamtubeColorbarShowexponent = "last"
	StreamtubeColorbarShowexponentNone  StreamtubeColorbarShowexponent = "none"
)

// StreamtubeColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
// .schema.traces.streamtube.attributes.colorbar.showtickprefix
type StreamtubeColorbarShowtickprefix string

const (
	StreamtubeColorbarShowtickprefixAll   StreamtubeColorbarShowtickprefix = "all"
	StreamtubeColorbarShowtickprefixFirst StreamtubeColorbarShowtickprefix = "first"
	StreamtubeColorbarShowtickprefixLast  StreamtubeColorbarShowtickprefix = "last"
	StreamtubeColorbarShowtickprefixNone  StreamtubeColorbarShowtickprefix = "none"
)

// StreamtubeColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
// .schema.traces.streamtube.attributes.colorbar.showticksuffix
type StreamtubeColorbarShowticksuffix string

const (
	StreamtubeColorbarShowticksuffixAll   StreamtubeColorbarShowticksuffix = "all"
	StreamtubeColorbarShowticksuffixFirst StreamtubeColorbarShowticksuffix = "first"
	StreamtubeColorbarShowticksuffixLast  StreamtubeColorbarShowticksuffix = "last"
	StreamtubeColorbarShowticksuffixNone  StreamtubeColorbarShowticksuffix = "none"
)

// StreamtubeColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
// .schema.traces.streamtube.attributes.colorbar.thicknessmode
type StreamtubeColorbarThicknessmode string

const (
	StreamtubeColorbarThicknessmodeFraction StreamtubeColorbarThicknessmode = "fraction"
	StreamtubeColorbarThicknessmodePixels   StreamtubeColorbarThicknessmode = "pixels"
)

// StreamtubeColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.streamtube.attributes.colorbar.tickfont.style
type StreamtubeColorbarTickfontStyle string

const (
	StreamtubeColorbarTickfontStyleNormal StreamtubeColorbarTickfontStyle = "normal"
	StreamtubeColorbarTickfontStyleItalic StreamtubeColorbarTickfontStyle = "italic"
)

// StreamtubeColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.streamtube.attributes.colorbar.tickfont.textcase
type StreamtubeColorbarTickfontTextcase string

const (
	StreamtubeColorbarTickfontTextcaseNormal   StreamtubeColorbarTickfontTextcase = "normal"
	StreamtubeColorbarTickfontTextcaseWordCaps StreamtubeColorbarTickfontTextcase = "word caps"
	StreamtubeColorbarTickfontTextcaseUpper    StreamtubeColorbarTickfontTextcase = "upper"
	StreamtubeColorbarTickfontTextcaseLower    StreamtubeColorbarTickfontTextcase = "lower"
)

// StreamtubeColorbarTickfontVariant Sets the variant of the font.
// .schema.traces.streamtube.attributes.colorbar.tickfont.variant
type StreamtubeColorbarTickfontVariant string

const (
	StreamtubeColorbarTickfontVariantNormal        StreamtubeColorbarTickfontVariant = "normal"
	StreamtubeColorbarTickfontVariantSmallCaps     StreamtubeColorbarTickfontVariant = "small-caps"
	StreamtubeColorbarTickfontVariantAllSmallCaps  StreamtubeColorbarTickfontVariant = "all-small-caps"
	StreamtubeColorbarTickfontVariantAllPetiteCaps StreamtubeColorbarTickfontVariant = "all-petite-caps"
	StreamtubeColorbarTickfontVariantPetiteCaps    StreamtubeColorbarTickfontVariant = "petite-caps"
	StreamtubeColorbarTickfontVariantUnicase       StreamtubeColorbarTickfontVariant = "unicase"
)

// StreamtubeColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
// .schema.traces.streamtube.attributes.colorbar.ticklabeloverflow
type StreamtubeColorbarTicklabeloverflow string

const (
	StreamtubeColorbarTicklabeloverflowAllow          StreamtubeColorbarTicklabeloverflow = "allow"
	StreamtubeColorbarTicklabeloverflowHidePastDiv    StreamtubeColorbarTicklabeloverflow = "hide past div"
	StreamtubeColorbarTicklabeloverflowHidePastDomain StreamtubeColorbarTicklabeloverflow = "hide past domain"
)

// StreamtubeColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
// .schema.traces.streamtube.attributes.colorbar.ticklabelposition
type StreamtubeColorbarTicklabelposition string

const (
	StreamtubeColorbarTicklabelpositionOutside       StreamtubeColorbarTicklabelposition = "outside"
	StreamtubeColorbarTicklabelpositionInside        StreamtubeColorbarTicklabelposition = "inside"
	StreamtubeColorbarTicklabelpositionOutsideTop    StreamtubeColorbarTicklabelposition = "outside top"
	StreamtubeColorbarTicklabelpositionInsideTop     StreamtubeColorbarTicklabelposition = "inside top"
	StreamtubeColorbarTicklabelpositionOutsideLeft   StreamtubeColorbarTicklabelposition = "outside left"
	StreamtubeColorbarTicklabelpositionInsideLeft    StreamtubeColorbarTicklabelposition = "inside left"
	StreamtubeColorbarTicklabelpositionOutsideRight  StreamtubeColorbarTicklabelposition = "outside right"
	StreamtubeColorbarTicklabelpositionInsideRight   StreamtubeColorbarTicklabelposition = "inside right"
	StreamtubeColorbarTicklabelpositionOutsideBottom StreamtubeColorbarTicklabelposition = "outside bottom"
	StreamtubeColorbarTicklabelpositionInsideBottom  StreamtubeColorbarTicklabelposition = "inside bottom"
)

// StreamtubeColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
// .schema.traces.streamtube.attributes.colorbar.tickmode
type StreamtubeColorbarTickmode string

const (
	StreamtubeColorbarTickmodeAuto   StreamtubeColorbarTickmode = "auto"
	StreamtubeColorbarTickmodeLinear StreamtubeColorbarTickmode = "linear"
	StreamtubeColorbarTickmodeArray  StreamtubeColorbarTickmode = "array"
)

// StreamtubeColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
// .schema.traces.streamtube.attributes.colorbar.ticks
type StreamtubeColorbarTicks string

const (
	StreamtubeColorbarTicksOutside StreamtubeColorbarTicks = "outside"
	StreamtubeColorbarTicksInside  StreamtubeColorbarTicks = "inside"
	StreamtubeColorbarTicksEmpty   StreamtubeColorbarTicks = ""
)

// StreamtubeColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.streamtube.attributes.colorbar.title.font.style
type StreamtubeColorbarTitleFontStyle string

const (
	StreamtubeColorbarTitleFontStyleNormal StreamtubeColorbarTitleFontStyle = "normal"
	StreamtubeColorbarTitleFontStyleItalic StreamtubeColorbarTitleFontStyle = "italic"
)

// StreamtubeColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.streamtube.attributes.colorbar.title.font.textcase
type StreamtubeColorbarTitleFontTextcase string

const (
	StreamtubeColorbarTitleFontTextcaseNormal   StreamtubeColorbarTitleFontTextcase = "normal"
	StreamtubeColorbarTitleFontTextcaseWordCaps StreamtubeColorbarTitleFontTextcase = "word caps"
	StreamtubeColorbarTitleFontTextcaseUpper    StreamtubeColorbarTitleFontTextcase = "upper"
	StreamtubeColorbarTitleFontTextcaseLower    StreamtubeColorbarTitleFontTextcase = "lower"
)

// StreamtubeColorbarTitleFontVariant Sets the variant of the font.
// .schema.traces.streamtube.attributes.colorbar.title.font.variant
type StreamtubeColorbarTitleFontVariant string

const (
	StreamtubeColorbarTitleFontVariantNormal        StreamtubeColorbarTitleFontVariant = "normal"
	StreamtubeColorbarTitleFontVariantSmallCaps     StreamtubeColorbarTitleFontVariant = "small-caps"
	StreamtubeColorbarTitleFontVariantAllSmallCaps  StreamtubeColorbarTitleFontVariant = "all-small-caps"
	StreamtubeColorbarTitleFontVariantAllPetiteCaps StreamtubeColorbarTitleFontVariant = "all-petite-caps"
	StreamtubeColorbarTitleFontVariantPetiteCaps    StreamtubeColorbarTitleFontVariant = "petite-caps"
	StreamtubeColorbarTitleFontVariantUnicase       StreamtubeColorbarTitleFontVariant = "unicase"
)

// StreamtubeColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
// .schema.traces.streamtube.attributes.colorbar.title.side
type StreamtubeColorbarTitleSide string

const (
	StreamtubeColorbarTitleSideRight  StreamtubeColorbarTitleSide = "right"
	StreamtubeColorbarTitleSideTop    StreamtubeColorbarTitleSide = "top"
	StreamtubeColorbarTitleSideBottom StreamtubeColorbarTitleSide = "bottom"
)

// StreamtubeColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
// .schema.traces.streamtube.attributes.colorbar.xanchor
type StreamtubeColorbarXanchor string

const (
	StreamtubeColorbarXanchorLeft   StreamtubeColorbarXanchor = "left"
	StreamtubeColorbarXanchorCenter StreamtubeColorbarXanchor = "center"
	StreamtubeColorbarXanchorRight  StreamtubeColorbarXanchor = "right"
)

// StreamtubeColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
// .schema.traces.streamtube.attributes.colorbar.xref
type StreamtubeColorbarXref string

const (
	StreamtubeColorbarXrefContainer StreamtubeColorbarXref = "container"
	StreamtubeColorbarXrefPaper     StreamtubeColorbarXref = "paper"
)

// StreamtubeColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
// .schema.traces.streamtube.attributes.colorbar.yanchor
type StreamtubeColorbarYanchor string

const (
	StreamtubeColorbarYanchorTop    StreamtubeColorbarYanchor = "top"
	StreamtubeColorbarYanchorMiddle StreamtubeColorbarYanchor = "middle"
	StreamtubeColorbarYanchorBottom StreamtubeColorbarYanchor = "bottom"
)

// StreamtubeColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
// .schema.traces.streamtube.attributes.colorbar.yref
type StreamtubeColorbarYref string

const (
	StreamtubeColorbarYrefContainer StreamtubeColorbarYref = "container"
	StreamtubeColorbarYrefPaper     StreamtubeColorbarYref = "paper"
)

// StreamtubeHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
// .schema.traces.streamtube.attributes.hoverlabel.align
type StreamtubeHoverlabelAlign string

const (
	StreamtubeHoverlabelAlignLeft  StreamtubeHoverlabelAlign = "left"
	StreamtubeHoverlabelAlignRight StreamtubeHoverlabelAlign = "right"
	StreamtubeHoverlabelAlignAuto  StreamtubeHoverlabelAlign = "auto"
)

// StreamtubeHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.streamtube.attributes.hoverlabel.font.style
type StreamtubeHoverlabelFontStyle string

const (
	StreamtubeHoverlabelFontStyleNormal StreamtubeHoverlabelFontStyle = "normal"
	StreamtubeHoverlabelFontStyleItalic StreamtubeHoverlabelFontStyle = "italic"
)

// StreamtubeHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.streamtube.attributes.hoverlabel.font.textcase
type StreamtubeHoverlabelFontTextcase string

const (
	StreamtubeHoverlabelFontTextcaseNormal   StreamtubeHoverlabelFontTextcase = "normal"
	StreamtubeHoverlabelFontTextcaseWordCaps StreamtubeHoverlabelFontTextcase = "word caps"
	StreamtubeHoverlabelFontTextcaseUpper    StreamtubeHoverlabelFontTextcase = "upper"
	StreamtubeHoverlabelFontTextcaseLower    StreamtubeHoverlabelFontTextcase = "lower"
)

// StreamtubeHoverlabelFontVariant Sets the variant of the font.
// .schema.traces.streamtube.attributes.hoverlabel.font.variant
type StreamtubeHoverlabelFontVariant string

const (
	StreamtubeHoverlabelFontVariantNormal        StreamtubeHoverlabelFontVariant = "normal"
	StreamtubeHoverlabelFontVariantSmallCaps     StreamtubeHoverlabelFontVariant = "small-caps"
	StreamtubeHoverlabelFontVariantAllSmallCaps  StreamtubeHoverlabelFontVariant = "all-small-caps"
	StreamtubeHoverlabelFontVariantAllPetiteCaps StreamtubeHoverlabelFontVariant = "all-petite-caps"
	StreamtubeHoverlabelFontVariantPetiteCaps    StreamtubeHoverlabelFontVariant = "petite-caps"
	StreamtubeHoverlabelFontVariantUnicase       StreamtubeHoverlabelFontVariant = "unicase"
)

// StreamtubeLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
// .schema.traces.streamtube.attributes.legendgrouptitle.font.style
type StreamtubeLegendgrouptitleFontStyle string

const (
	StreamtubeLegendgrouptitleFontStyleNormal StreamtubeLegendgrouptitleFontStyle = "normal"
	StreamtubeLegendgrouptitleFontStyleItalic StreamtubeLegendgrouptitleFontStyle = "italic"
)

// StreamtubeLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
// .schema.traces.streamtube.attributes.legendgrouptitle.font.textcase
type StreamtubeLegendgrouptitleFontTextcase string

const (
	StreamtubeLegendgrouptitleFontTextcaseNormal   StreamtubeLegendgrouptitleFontTextcase = "normal"
	StreamtubeLegendgrouptitleFontTextcaseWordCaps StreamtubeLegendgrouptitleFontTextcase = "word caps"
	StreamtubeLegendgrouptitleFontTextcaseUpper    StreamtubeLegendgrouptitleFontTextcase = "upper"
	StreamtubeLegendgrouptitleFontTextcaseLower    StreamtubeLegendgrouptitleFontTextcase = "lower"
)

// StreamtubeLegendgrouptitleFontVariant Sets the variant of the font.
// .schema.traces.streamtube.attributes.legendgrouptitle.font.variant
type StreamtubeLegendgrouptitleFontVariant string

const (
	StreamtubeLegendgrouptitleFontVariantNormal        StreamtubeLegendgrouptitleFontVariant = "normal"
	StreamtubeLegendgrouptitleFontVariantSmallCaps     StreamtubeLegendgrouptitleFontVariant = "small-caps"
	StreamtubeLegendgrouptitleFontVariantAllSmallCaps  StreamtubeLegendgrouptitleFontVariant = "all-small-caps"
	StreamtubeLegendgrouptitleFontVariantAllPetiteCaps StreamtubeLegendgrouptitleFontVariant = "all-petite-caps"
	StreamtubeLegendgrouptitleFontVariantPetiteCaps    StreamtubeLegendgrouptitleFontVariant = "petite-caps"
	StreamtubeLegendgrouptitleFontVariantUnicase       StreamtubeLegendgrouptitleFontVariant = "unicase"
)

// StreamtubeVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
// .schema.traces.streamtube.attributes.visible
type StreamtubeVisible interface{}

var (
	StreamtubeVisibleTrue       StreamtubeVisible = true
	StreamtubeVisibleFalse      StreamtubeVisible = false
	StreamtubeVisibleLegendonly StreamtubeVisible = "legendonly"
)

// StreamtubeColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.streamtube.attributes.colorbar.tickfont.lineposition
type StreamtubeColorbarTickfontLineposition string

const (
	// Flags
	StreamtubeColorbarTickfontLinepositionUnder   StreamtubeColorbarTickfontLineposition = "under"
	StreamtubeColorbarTickfontLinepositionOver    StreamtubeColorbarTickfontLineposition = "over"
	StreamtubeColorbarTickfontLinepositionThrough StreamtubeColorbarTickfontLineposition = "through"

	// Extra
	StreamtubeColorbarTickfontLinepositionNone StreamtubeColorbarTickfontLineposition = "none"
)

// StreamtubeColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.streamtube.attributes.colorbar.title.font.lineposition
type StreamtubeColorbarTitleFontLineposition string

const (
	// Flags
	StreamtubeColorbarTitleFontLinepositionUnder   StreamtubeColorbarTitleFontLineposition = "under"
	StreamtubeColorbarTitleFontLinepositionOver    StreamtubeColorbarTitleFontLineposition = "over"
	StreamtubeColorbarTitleFontLinepositionThrough StreamtubeColorbarTitleFontLineposition = "through"

	// Extra
	StreamtubeColorbarTitleFontLinepositionNone StreamtubeColorbarTitleFontLineposition = "none"
)

// StreamtubeHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
// .schema.traces.streamtube.attributes.hoverinfo
type StreamtubeHoverinfo string

const (
	// Flags
	StreamtubeHoverinfoX          StreamtubeHoverinfo = "x"
	StreamtubeHoverinfoY          StreamtubeHoverinfo = "y"
	StreamtubeHoverinfoZ          StreamtubeHoverinfo = "z"
	StreamtubeHoverinfoU          StreamtubeHoverinfo = "u"
	StreamtubeHoverinfoV          StreamtubeHoverinfo = "v"
	StreamtubeHoverinfoW          StreamtubeHoverinfo = "w"
	StreamtubeHoverinfoNorm       StreamtubeHoverinfo = "norm"
	StreamtubeHoverinfoDivergence StreamtubeHoverinfo = "divergence"
	StreamtubeHoverinfoText       StreamtubeHoverinfo = "text"
	StreamtubeHoverinfoName       StreamtubeHoverinfo = "name"

	// Extra
	StreamtubeHoverinfoAll  StreamtubeHoverinfo = "all"
	StreamtubeHoverinfoNone StreamtubeHoverinfo = "none"
	StreamtubeHoverinfoSkip StreamtubeHoverinfo = "skip"
)

// StreamtubeHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.streamtube.attributes.hoverlabel.font.lineposition
type StreamtubeHoverlabelFontLineposition string

const (
	// Flags
	StreamtubeHoverlabelFontLinepositionUnder   StreamtubeHoverlabelFontLineposition = "under"
	StreamtubeHoverlabelFontLinepositionOver    StreamtubeHoverlabelFontLineposition = "over"
	StreamtubeHoverlabelFontLinepositionThrough StreamtubeHoverlabelFontLineposition = "through"

	// Extra
	StreamtubeHoverlabelFontLinepositionNone StreamtubeHoverlabelFontLineposition = "none"
)

// StreamtubeLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
// .schema.traces.streamtube.attributes.legendgrouptitle.font.lineposition
type StreamtubeLegendgrouptitleFontLineposition string

const (
	// Flags
	StreamtubeLegendgrouptitleFontLinepositionUnder   StreamtubeLegendgrouptitleFontLineposition = "under"
	StreamtubeLegendgrouptitleFontLinepositionOver    StreamtubeLegendgrouptitleFontLineposition = "over"
	StreamtubeLegendgrouptitleFontLinepositionThrough StreamtubeLegendgrouptitleFontLineposition = "through"

	// Extra
	StreamtubeLegendgrouptitleFontLinepositionNone StreamtubeLegendgrouptitleFontLineposition = "none"
)
