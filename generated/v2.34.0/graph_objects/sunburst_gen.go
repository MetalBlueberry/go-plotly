package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeSunburst types.TraceType = "sunburst"

func (t *Sunburst) GetType() types.TraceType {
	return TraceTypeSunburst
}

func (t *Sunburst) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Sunburst
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Sunburst Visualize hierarchal data spanning outward radially from root to leaves. The sunburst sectors are determined by the entries in *labels* or *ids* and in *parents*.
type Sunburst struct {

	// Branchvalues
	// arrayOK: false
	// default: remainder
	// type: enumerated
	// Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.
	Branchvalues SunburstBranchvalues `json:"branchvalues,omitempty"`

	// Count
	// arrayOK: false
	// default: leaves
	// type: flaglist
	// Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.
	Count SunburstCount `json:"count,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	Customdatasrc types.StringType `json:"customdatasrc,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	Domain *SunburstDomain `json:"domain,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: label+text+value+name
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo *types.ArrayOK[*SunburstHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	Hoverinfosrc types.StringType `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	Hoverlabel *SunburstHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry` and `percentParent`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate *types.ArrayOK[*types.StringType] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	Hovertemplatesrc types.StringType `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: true
	// type: string
	// Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.
	Hovertext *types.ArrayOK[*types.StringType] `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	Hovertextsrc types.StringType `json:"hovertextsrc,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	Idssrc types.StringType `json:"idssrc,omitempty"`

	// Insidetextfont
	// arrayOK: false
	// role: Object
	Insidetextfont *SunburstInsidetextfont `json:"insidetextfont,omitempty"`

	// Insidetextorientation
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.
	Insidetextorientation SunburstInsidetextorientation `json:"insidetextorientation,omitempty"`

	// Labels
	// arrayOK: false
	// type: data_array
	// Sets the labels of each of the sectors.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Labels *types.DataArrayType `json:"labels,omitempty"`

	// Labelssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `labels`.
	Labelssrc types.StringType `json:"labelssrc,omitempty"`

	// Leaf
	// arrayOK: false
	// role: Object
	Leaf *SunburstLeaf `json:"leaf,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	Legendgrouptitle *SunburstLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Level
	// arrayOK: false
	// type: any
	// Sets the level from which this trace hierarchy is rendered. Set `level` to `''` to start from the root node in the hierarchy. Must be an "id" if `ids` is filled in, otherwise plotly attempts to find a matching item in `labels`.
	Level interface{} `json:"level,omitempty"`

	// Marker
	// arrayOK: false
	// role: Object
	Marker *SunburstMarker `json:"marker,omitempty"`

	// Maxdepth
	// arrayOK: false
	// type: integer
	// Sets the number of rendered sectors from any given `level`. Set `maxdepth` to *-1* to render all the levels in the hierarchy.
	Maxdepth types.IntegerType `json:"maxdepth,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the trace.
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Outsidetextfont
	// arrayOK: false
	// role: Object
	Outsidetextfont *SunburstOutsidetextfont `json:"outsidetextfont,omitempty"`

	// Parents
	// arrayOK: false
	// type: data_array
	// Sets the parent sectors for each of the sectors. Empty string items '' are understood to reference the root node in the hierarchy. If `ids` is filled, `parents` items are understood to be "ids" themselves. When `ids` is not set, plotly attempts to find matching items in `labels`, but beware they must be unique.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Parents *types.DataArrayType `json:"parents,omitempty"`

	// Parentssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `parents`.
	Parentssrc types.StringType `json:"parentssrc,omitempty"`

	// Root
	// arrayOK: false
	// role: Object
	Root *SunburstRoot `json:"root,omitempty"`

	// Rotation
	// arrayOK: false
	// type: angle
	// Rotates the whole diagram counterclockwise by some angle. By default the first slice starts at 3 o'clock.
	Rotation types.NumberType `json:"rotation,omitempty"`

	// Sort
	// arrayOK: false
	// type: boolean
	// Determines whether or not the sectors are reordered from largest to smallest.
	Sort types.BoolType `json:"sort,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	Stream *SunburstStream `json:"stream,omitempty"`

	// Text
	// arrayOK: false
	// type: data_array
	// Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Text *types.DataArrayType `json:"text,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	Textfont *SunburstTextfont `json:"textfont,omitempty"`

	// Textinfo
	// arrayOK: false
	// default: %!s(<nil>)
	// type: flaglist
	// Determines which trace information appear on the graph.
	Textinfo SunburstTextinfo `json:"textinfo,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	Textsrc types.StringType `json:"textsrc,omitempty"`

	// Texttemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `currentPath`, `root`, `entry`, `percentRoot`, `percentEntry`, `percentParent`, `label` and `value`.
	Texttemplate *types.ArrayOK[*types.StringType] `json:"texttemplate,omitempty"`

	// Texttemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `texttemplate`.
	Texttemplatesrc types.StringType `json:"texttemplatesrc,omitempty"`

	// Transforms
	// role: Object
	// items: SunburstTransform
	Transforms []SunburstTransform `json:"transforms,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	Uid types.StringType `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Values
	// arrayOK: false
	// type: data_array
	// Sets the values associated with each of the sectors. Use with `branchvalues` to determine how the values are summed.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Values *types.DataArrayType `json:"values,omitempty"`

	// Valuessrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `values`.
	Valuessrc types.StringType `json:"valuessrc,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible SunburstVisible `json:"visible,omitempty"`
}

// SunburstDomain
type SunburstDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this sunburst trace .
	Column types.IntegerType `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this sunburst trace .
	Row types.IntegerType `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this sunburst trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this sunburst trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// SunburstHoverlabelFont Sets the font used in hover labels.
type SunburstHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*SunburstHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*SunburstHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*SunburstHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*SunburstHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// SunburstHoverlabel
type SunburstHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align *types.ArrayOK[*SunburstHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.StringType `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	Bordercolorsrc types.StringType `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *SunburstHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength *types.ArrayOK[*types.IntegerType] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	Namelengthsrc types.StringType `json:"namelengthsrc,omitempty"`
}

// SunburstInsidetextfont Sets the font used for `textinfo` lying inside the sector.
type SunburstInsidetextfont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*SunburstInsidetextfontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*SunburstInsidetextfontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*SunburstInsidetextfontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*SunburstInsidetextfontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// SunburstLeaf
type SunburstLeaf struct {

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the leaves. With colorscale it is defaulted to 1; otherwise it is defaulted to 0.7
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// SunburstLegendgrouptitleFont Sets this legend group's title font.
type SunburstLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition SunburstLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style SunburstLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase SunburstLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant SunburstLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// SunburstLegendgrouptitle
type SunburstLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *SunburstLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text types.StringType `json:"text,omitempty"`
}

// SunburstMarkerColorbarTickfont Sets the color bar's tick label font
type SunburstMarkerColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition SunburstMarkerColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style SunburstMarkerColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase SunburstMarkerColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant SunburstMarkerColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// SunburstMarkerColorbarTickformatstop
type SunburstMarkerColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	Value types.StringType `json:"value,omitempty"`
}

// SunburstMarkerColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type SunburstMarkerColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition SunburstMarkerColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style SunburstMarkerColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase SunburstMarkerColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant SunburstMarkerColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// SunburstMarkerColorbarTitle
type SunburstMarkerColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *SunburstMarkerColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side SunburstMarkerColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text types.StringType `json:"text,omitempty"`
}

// SunburstMarkerColorbar
type SunburstMarkerColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat SunburstMarkerColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode SunburstMarkerColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	Orientation SunburstMarkerColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent SunburstMarkerColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix SunburstMarkerColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix SunburstMarkerColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode SunburstMarkerColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	Tickfont *SunburstMarkerColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: SunburstMarkerColorbarTickformatstop
	Tickformatstops []SunburstMarkerColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	Ticklabeloverflow SunburstMarkerColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	Ticklabelposition SunburstMarkerColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode SunburstMarkerColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks SunburstMarkerColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	Title *SunburstMarkerColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	Xanchor SunburstMarkerColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref SunburstMarkerColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	Yanchor SunburstMarkerColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref SunburstMarkerColorbarYref `json:"yref,omitempty"`
}

// SunburstMarkerLine
type SunburstMarkerLine struct {

	// Color
	// arrayOK: true
	// type: color
	// Sets the color of the line enclosing each sector. Defaults to the `paper_bgcolor` value.
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	// Sets the width (in px) of the line enclosing each sector.
	Width *types.ArrayOK[*types.NumberType] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	Widthsrc types.StringType `json:"widthsrc,omitempty"`
}

// SunburstMarkerPattern Sets the pattern within the marker.
type SunburstMarkerPattern struct {

	// Bgcolor
	// arrayOK: true
	// type: color
	// When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is *overlay*. Otherwise, defaults to a transparent background.
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Fgcolor
	// arrayOK: true
	// type: color
	// When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is *replace*. Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.
	Fgcolor *types.ArrayOK[*types.Color] `json:"fgcolor,omitempty"`

	// Fgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `fgcolor`.
	Fgcolorsrc types.StringType `json:"fgcolorsrc,omitempty"`

	// Fgopacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.
	Fgopacity types.NumberType `json:"fgopacity,omitempty"`

	// Fillmode
	// arrayOK: false
	// default: replace
	// type: enumerated
	// Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.
	Fillmode SunburstMarkerPatternFillmode `json:"fillmode,omitempty"`

	// Shape
	// arrayOK: true
	// default:
	// type: enumerated
	// Sets the shape of the pattern fill. By default, no pattern is used for filling the area.
	Shape *types.ArrayOK[*SunburstMarkerPatternShape] `json:"shape,omitempty"`

	// Shapesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shape`.
	Shapesrc types.StringType `json:"shapesrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	// Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Solidity
	// arrayOK: true
	// type: number
	// Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.
	Solidity *types.ArrayOK[*types.NumberType] `json:"solidity,omitempty"`

	// Soliditysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `solidity`.
	Soliditysrc types.StringType `json:"soliditysrc,omitempty"`
}

// SunburstMarker
type SunburstMarker struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `marker.colorscale`. Has an effect only if colors is set to a numerical array. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here colors) or the bounds set in `marker.cmin` and `marker.cmax` Has an effect only if colors is set to a numerical array. Defaults to `false` when `marker.cmin` and `marker.cmax` are set by the user.
	Cauto types.BoolType `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmin` must be set as well.
	Cmax types.NumberType `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `marker.cmin` and/or `marker.cmax` to be equidistant to this point. Has an effect only if colors is set to a numerical array. Value should have the same units as colors. Has no effect when `marker.cauto` is `false`.
	Cmid types.NumberType `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Has an effect only if colors is set to a numerical array. Value should have the same units as colors and if set, `marker.cmax` must be set as well.
	Cmin types.NumberType `json:"cmin,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	Colorbar *SunburstMarkerColorbar `json:"colorbar,omitempty"`

	// Colors
	// arrayOK: false
	// type: data_array
	// Sets the color of each sector of this trace. If not specified, the default trace color set is used to pick the sector colors.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Colors *types.DataArrayType `json:"colors,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. Has an effect only if colors is set to a numerical array. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `marker.cmin` and `marker.cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Colorssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `colors`.
	Colorssrc types.StringType `json:"colorssrc,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	Line *SunburstMarkerLine `json:"line,omitempty"`

	// Pattern
	// arrayOK: false
	// role: Object
	Pattern *SunburstMarkerPattern `json:"pattern,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. Has an effect only if colors is set to a numerical array. If true, `marker.cmin` will correspond to the last color in the array and `marker.cmax` will correspond to the first color.
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace. Has an effect only if colors is set to a numerical array.
	Showscale types.BoolType `json:"showscale,omitempty"`
}

// SunburstOutsidetextfont Sets the font used for `textinfo` lying outside the sector. This option refers to the root of the hierarchy presented at the center of a sunburst graph. Please note that if a hierarchy has multiple root nodes, this option won't have any effect and `insidetextfont` would be used.
type SunburstOutsidetextfont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*SunburstOutsidetextfontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*SunburstOutsidetextfontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*SunburstOutsidetextfontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*SunburstOutsidetextfontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// SunburstRoot
type SunburstRoot struct {

	// Color
	// arrayOK: false
	// type: color
	// sets the color of the root node for a sunburst/treemap/icicle trace. this has no effect when a colorscale is used to set the markers.
	Color types.Color `json:"color,omitempty"`
}

// SunburstStream
type SunburstStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints types.NumberType `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token types.StringType `json:"token,omitempty"`
}

// SunburstTextfont Sets the font used for `textinfo`.
type SunburstTextfont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*SunburstTextfontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*SunburstTextfontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*SunburstTextfontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*SunburstTextfontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// SunburstTransform WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.
type SunburstTransform struct {
}

// SunburstBranchvalues Determines how the items in `values` are summed. When set to *total*, items in `values` are taken to be value of all its descendants. When set to *remainder*, items in `values` corresponding to the root and the branches sectors are taken to be the extra part not part of the sum of the values at their leaves.
type SunburstBranchvalues string

const (
	SunburstBranchvaluesRemainder SunburstBranchvalues = "remainder"
	SunburstBranchvaluesTotal     SunburstBranchvalues = "total"
)

// SunburstHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type SunburstHoverlabelAlign string

const (
	SunburstHoverlabelAlignLeft  SunburstHoverlabelAlign = "left"
	SunburstHoverlabelAlignRight SunburstHoverlabelAlign = "right"
	SunburstHoverlabelAlignAuto  SunburstHoverlabelAlign = "auto"
)

// SunburstHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type SunburstHoverlabelFontStyle string

const (
	SunburstHoverlabelFontStyleNormal SunburstHoverlabelFontStyle = "normal"
	SunburstHoverlabelFontStyleItalic SunburstHoverlabelFontStyle = "italic"
)

// SunburstHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type SunburstHoverlabelFontTextcase string

const (
	SunburstHoverlabelFontTextcaseNormal   SunburstHoverlabelFontTextcase = "normal"
	SunburstHoverlabelFontTextcaseWordCaps SunburstHoverlabelFontTextcase = "word caps"
	SunburstHoverlabelFontTextcaseUpper    SunburstHoverlabelFontTextcase = "upper"
	SunburstHoverlabelFontTextcaseLower    SunburstHoverlabelFontTextcase = "lower"
)

// SunburstHoverlabelFontVariant Sets the variant of the font.
type SunburstHoverlabelFontVariant string

const (
	SunburstHoverlabelFontVariantNormal        SunburstHoverlabelFontVariant = "normal"
	SunburstHoverlabelFontVariantSmallCaps     SunburstHoverlabelFontVariant = "small-caps"
	SunburstHoverlabelFontVariantAllSmallCaps  SunburstHoverlabelFontVariant = "all-small-caps"
	SunburstHoverlabelFontVariantAllPetiteCaps SunburstHoverlabelFontVariant = "all-petite-caps"
	SunburstHoverlabelFontVariantPetiteCaps    SunburstHoverlabelFontVariant = "petite-caps"
	SunburstHoverlabelFontVariantUnicase       SunburstHoverlabelFontVariant = "unicase"
)

// SunburstInsidetextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type SunburstInsidetextfontStyle string

const (
	SunburstInsidetextfontStyleNormal SunburstInsidetextfontStyle = "normal"
	SunburstInsidetextfontStyleItalic SunburstInsidetextfontStyle = "italic"
)

// SunburstInsidetextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type SunburstInsidetextfontTextcase string

const (
	SunburstInsidetextfontTextcaseNormal   SunburstInsidetextfontTextcase = "normal"
	SunburstInsidetextfontTextcaseWordCaps SunburstInsidetextfontTextcase = "word caps"
	SunburstInsidetextfontTextcaseUpper    SunburstInsidetextfontTextcase = "upper"
	SunburstInsidetextfontTextcaseLower    SunburstInsidetextfontTextcase = "lower"
)

// SunburstInsidetextfontVariant Sets the variant of the font.
type SunburstInsidetextfontVariant string

const (
	SunburstInsidetextfontVariantNormal        SunburstInsidetextfontVariant = "normal"
	SunburstInsidetextfontVariantSmallCaps     SunburstInsidetextfontVariant = "small-caps"
	SunburstInsidetextfontVariantAllSmallCaps  SunburstInsidetextfontVariant = "all-small-caps"
	SunburstInsidetextfontVariantAllPetiteCaps SunburstInsidetextfontVariant = "all-petite-caps"
	SunburstInsidetextfontVariantPetiteCaps    SunburstInsidetextfontVariant = "petite-caps"
	SunburstInsidetextfontVariantUnicase       SunburstInsidetextfontVariant = "unicase"
)

// SunburstInsidetextorientation Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.
type SunburstInsidetextorientation string

const (
	SunburstInsidetextorientationHorizontal SunburstInsidetextorientation = "horizontal"
	SunburstInsidetextorientationRadial     SunburstInsidetextorientation = "radial"
	SunburstInsidetextorientationTangential SunburstInsidetextorientation = "tangential"
	SunburstInsidetextorientationAuto       SunburstInsidetextorientation = "auto"
)

// SunburstLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type SunburstLegendgrouptitleFontStyle string

const (
	SunburstLegendgrouptitleFontStyleNormal SunburstLegendgrouptitleFontStyle = "normal"
	SunburstLegendgrouptitleFontStyleItalic SunburstLegendgrouptitleFontStyle = "italic"
)

// SunburstLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type SunburstLegendgrouptitleFontTextcase string

const (
	SunburstLegendgrouptitleFontTextcaseNormal   SunburstLegendgrouptitleFontTextcase = "normal"
	SunburstLegendgrouptitleFontTextcaseWordCaps SunburstLegendgrouptitleFontTextcase = "word caps"
	SunburstLegendgrouptitleFontTextcaseUpper    SunburstLegendgrouptitleFontTextcase = "upper"
	SunburstLegendgrouptitleFontTextcaseLower    SunburstLegendgrouptitleFontTextcase = "lower"
)

// SunburstLegendgrouptitleFontVariant Sets the variant of the font.
type SunburstLegendgrouptitleFontVariant string

const (
	SunburstLegendgrouptitleFontVariantNormal        SunburstLegendgrouptitleFontVariant = "normal"
	SunburstLegendgrouptitleFontVariantSmallCaps     SunburstLegendgrouptitleFontVariant = "small-caps"
	SunburstLegendgrouptitleFontVariantAllSmallCaps  SunburstLegendgrouptitleFontVariant = "all-small-caps"
	SunburstLegendgrouptitleFontVariantAllPetiteCaps SunburstLegendgrouptitleFontVariant = "all-petite-caps"
	SunburstLegendgrouptitleFontVariantPetiteCaps    SunburstLegendgrouptitleFontVariant = "petite-caps"
	SunburstLegendgrouptitleFontVariantUnicase       SunburstLegendgrouptitleFontVariant = "unicase"
)

// SunburstMarkerColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type SunburstMarkerColorbarExponentformat string

const (
	SunburstMarkerColorbarExponentformatNone  SunburstMarkerColorbarExponentformat = "none"
	SunburstMarkerColorbarExponentformatE1    SunburstMarkerColorbarExponentformat = "e"
	SunburstMarkerColorbarExponentformatE2    SunburstMarkerColorbarExponentformat = "E"
	SunburstMarkerColorbarExponentformatPower SunburstMarkerColorbarExponentformat = "power"
	SunburstMarkerColorbarExponentformatSI    SunburstMarkerColorbarExponentformat = "SI"
	SunburstMarkerColorbarExponentformatB     SunburstMarkerColorbarExponentformat = "B"
)

// SunburstMarkerColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
type SunburstMarkerColorbarLenmode string

const (
	SunburstMarkerColorbarLenmodeFraction SunburstMarkerColorbarLenmode = "fraction"
	SunburstMarkerColorbarLenmodePixels   SunburstMarkerColorbarLenmode = "pixels"
)

// SunburstMarkerColorbarOrientation Sets the orientation of the colorbar.
type SunburstMarkerColorbarOrientation string

const (
	SunburstMarkerColorbarOrientationH SunburstMarkerColorbarOrientation = "h"
	SunburstMarkerColorbarOrientationV SunburstMarkerColorbarOrientation = "v"
)

// SunburstMarkerColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type SunburstMarkerColorbarShowexponent string

const (
	SunburstMarkerColorbarShowexponentAll   SunburstMarkerColorbarShowexponent = "all"
	SunburstMarkerColorbarShowexponentFirst SunburstMarkerColorbarShowexponent = "first"
	SunburstMarkerColorbarShowexponentLast  SunburstMarkerColorbarShowexponent = "last"
	SunburstMarkerColorbarShowexponentNone  SunburstMarkerColorbarShowexponent = "none"
)

// SunburstMarkerColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type SunburstMarkerColorbarShowtickprefix string

const (
	SunburstMarkerColorbarShowtickprefixAll   SunburstMarkerColorbarShowtickprefix = "all"
	SunburstMarkerColorbarShowtickprefixFirst SunburstMarkerColorbarShowtickprefix = "first"
	SunburstMarkerColorbarShowtickprefixLast  SunburstMarkerColorbarShowtickprefix = "last"
	SunburstMarkerColorbarShowtickprefixNone  SunburstMarkerColorbarShowtickprefix = "none"
)

// SunburstMarkerColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
type SunburstMarkerColorbarShowticksuffix string

const (
	SunburstMarkerColorbarShowticksuffixAll   SunburstMarkerColorbarShowticksuffix = "all"
	SunburstMarkerColorbarShowticksuffixFirst SunburstMarkerColorbarShowticksuffix = "first"
	SunburstMarkerColorbarShowticksuffixLast  SunburstMarkerColorbarShowticksuffix = "last"
	SunburstMarkerColorbarShowticksuffixNone  SunburstMarkerColorbarShowticksuffix = "none"
)

// SunburstMarkerColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
type SunburstMarkerColorbarThicknessmode string

const (
	SunburstMarkerColorbarThicknessmodeFraction SunburstMarkerColorbarThicknessmode = "fraction"
	SunburstMarkerColorbarThicknessmodePixels   SunburstMarkerColorbarThicknessmode = "pixels"
)

// SunburstMarkerColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type SunburstMarkerColorbarTickfontStyle string

const (
	SunburstMarkerColorbarTickfontStyleNormal SunburstMarkerColorbarTickfontStyle = "normal"
	SunburstMarkerColorbarTickfontStyleItalic SunburstMarkerColorbarTickfontStyle = "italic"
)

// SunburstMarkerColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type SunburstMarkerColorbarTickfontTextcase string

const (
	SunburstMarkerColorbarTickfontTextcaseNormal   SunburstMarkerColorbarTickfontTextcase = "normal"
	SunburstMarkerColorbarTickfontTextcaseWordCaps SunburstMarkerColorbarTickfontTextcase = "word caps"
	SunburstMarkerColorbarTickfontTextcaseUpper    SunburstMarkerColorbarTickfontTextcase = "upper"
	SunburstMarkerColorbarTickfontTextcaseLower    SunburstMarkerColorbarTickfontTextcase = "lower"
)

// SunburstMarkerColorbarTickfontVariant Sets the variant of the font.
type SunburstMarkerColorbarTickfontVariant string

const (
	SunburstMarkerColorbarTickfontVariantNormal        SunburstMarkerColorbarTickfontVariant = "normal"
	SunburstMarkerColorbarTickfontVariantSmallCaps     SunburstMarkerColorbarTickfontVariant = "small-caps"
	SunburstMarkerColorbarTickfontVariantAllSmallCaps  SunburstMarkerColorbarTickfontVariant = "all-small-caps"
	SunburstMarkerColorbarTickfontVariantAllPetiteCaps SunburstMarkerColorbarTickfontVariant = "all-petite-caps"
	SunburstMarkerColorbarTickfontVariantPetiteCaps    SunburstMarkerColorbarTickfontVariant = "petite-caps"
	SunburstMarkerColorbarTickfontVariantUnicase       SunburstMarkerColorbarTickfontVariant = "unicase"
)

// SunburstMarkerColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
type SunburstMarkerColorbarTicklabeloverflow string

const (
	SunburstMarkerColorbarTicklabeloverflowAllow          SunburstMarkerColorbarTicklabeloverflow = "allow"
	SunburstMarkerColorbarTicklabeloverflowHidePastDiv    SunburstMarkerColorbarTicklabeloverflow = "hide past div"
	SunburstMarkerColorbarTicklabeloverflowHidePastDomain SunburstMarkerColorbarTicklabeloverflow = "hide past domain"
)

// SunburstMarkerColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
type SunburstMarkerColorbarTicklabelposition string

const (
	SunburstMarkerColorbarTicklabelpositionOutside       SunburstMarkerColorbarTicklabelposition = "outside"
	SunburstMarkerColorbarTicklabelpositionInside        SunburstMarkerColorbarTicklabelposition = "inside"
	SunburstMarkerColorbarTicklabelpositionOutsideTop    SunburstMarkerColorbarTicklabelposition = "outside top"
	SunburstMarkerColorbarTicklabelpositionInsideTop     SunburstMarkerColorbarTicklabelposition = "inside top"
	SunburstMarkerColorbarTicklabelpositionOutsideLeft   SunburstMarkerColorbarTicklabelposition = "outside left"
	SunburstMarkerColorbarTicklabelpositionInsideLeft    SunburstMarkerColorbarTicklabelposition = "inside left"
	SunburstMarkerColorbarTicklabelpositionOutsideRight  SunburstMarkerColorbarTicklabelposition = "outside right"
	SunburstMarkerColorbarTicklabelpositionInsideRight   SunburstMarkerColorbarTicklabelposition = "inside right"
	SunburstMarkerColorbarTicklabelpositionOutsideBottom SunburstMarkerColorbarTicklabelposition = "outside bottom"
	SunburstMarkerColorbarTicklabelpositionInsideBottom  SunburstMarkerColorbarTicklabelposition = "inside bottom"
)

// SunburstMarkerColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type SunburstMarkerColorbarTickmode string

const (
	SunburstMarkerColorbarTickmodeAuto   SunburstMarkerColorbarTickmode = "auto"
	SunburstMarkerColorbarTickmodeLinear SunburstMarkerColorbarTickmode = "linear"
	SunburstMarkerColorbarTickmodeArray  SunburstMarkerColorbarTickmode = "array"
)

// SunburstMarkerColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type SunburstMarkerColorbarTicks string

const (
	SunburstMarkerColorbarTicksOutside SunburstMarkerColorbarTicks = "outside"
	SunburstMarkerColorbarTicksInside  SunburstMarkerColorbarTicks = "inside"
	SunburstMarkerColorbarTicksEmpty   SunburstMarkerColorbarTicks = ""
)

// SunburstMarkerColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type SunburstMarkerColorbarTitleFontStyle string

const (
	SunburstMarkerColorbarTitleFontStyleNormal SunburstMarkerColorbarTitleFontStyle = "normal"
	SunburstMarkerColorbarTitleFontStyleItalic SunburstMarkerColorbarTitleFontStyle = "italic"
)

// SunburstMarkerColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type SunburstMarkerColorbarTitleFontTextcase string

const (
	SunburstMarkerColorbarTitleFontTextcaseNormal   SunburstMarkerColorbarTitleFontTextcase = "normal"
	SunburstMarkerColorbarTitleFontTextcaseWordCaps SunburstMarkerColorbarTitleFontTextcase = "word caps"
	SunburstMarkerColorbarTitleFontTextcaseUpper    SunburstMarkerColorbarTitleFontTextcase = "upper"
	SunburstMarkerColorbarTitleFontTextcaseLower    SunburstMarkerColorbarTitleFontTextcase = "lower"
)

// SunburstMarkerColorbarTitleFontVariant Sets the variant of the font.
type SunburstMarkerColorbarTitleFontVariant string

const (
	SunburstMarkerColorbarTitleFontVariantNormal        SunburstMarkerColorbarTitleFontVariant = "normal"
	SunburstMarkerColorbarTitleFontVariantSmallCaps     SunburstMarkerColorbarTitleFontVariant = "small-caps"
	SunburstMarkerColorbarTitleFontVariantAllSmallCaps  SunburstMarkerColorbarTitleFontVariant = "all-small-caps"
	SunburstMarkerColorbarTitleFontVariantAllPetiteCaps SunburstMarkerColorbarTitleFontVariant = "all-petite-caps"
	SunburstMarkerColorbarTitleFontVariantPetiteCaps    SunburstMarkerColorbarTitleFontVariant = "petite-caps"
	SunburstMarkerColorbarTitleFontVariantUnicase       SunburstMarkerColorbarTitleFontVariant = "unicase"
)

// SunburstMarkerColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
type SunburstMarkerColorbarTitleSide string

const (
	SunburstMarkerColorbarTitleSideRight  SunburstMarkerColorbarTitleSide = "right"
	SunburstMarkerColorbarTitleSideTop    SunburstMarkerColorbarTitleSide = "top"
	SunburstMarkerColorbarTitleSideBottom SunburstMarkerColorbarTitleSide = "bottom"
)

// SunburstMarkerColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
type SunburstMarkerColorbarXanchor string

const (
	SunburstMarkerColorbarXanchorLeft   SunburstMarkerColorbarXanchor = "left"
	SunburstMarkerColorbarXanchorCenter SunburstMarkerColorbarXanchor = "center"
	SunburstMarkerColorbarXanchorRight  SunburstMarkerColorbarXanchor = "right"
)

// SunburstMarkerColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type SunburstMarkerColorbarXref string

const (
	SunburstMarkerColorbarXrefContainer SunburstMarkerColorbarXref = "container"
	SunburstMarkerColorbarXrefPaper     SunburstMarkerColorbarXref = "paper"
)

// SunburstMarkerColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
type SunburstMarkerColorbarYanchor string

const (
	SunburstMarkerColorbarYanchorTop    SunburstMarkerColorbarYanchor = "top"
	SunburstMarkerColorbarYanchorMiddle SunburstMarkerColorbarYanchor = "middle"
	SunburstMarkerColorbarYanchorBottom SunburstMarkerColorbarYanchor = "bottom"
)

// SunburstMarkerColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type SunburstMarkerColorbarYref string

const (
	SunburstMarkerColorbarYrefContainer SunburstMarkerColorbarYref = "container"
	SunburstMarkerColorbarYrefPaper     SunburstMarkerColorbarYref = "paper"
)

// SunburstMarkerPatternFillmode Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.
type SunburstMarkerPatternFillmode string

const (
	SunburstMarkerPatternFillmodeReplace SunburstMarkerPatternFillmode = "replace"
	SunburstMarkerPatternFillmodeOverlay SunburstMarkerPatternFillmode = "overlay"
)

// SunburstMarkerPatternShape Sets the shape of the pattern fill. By default, no pattern is used for filling the area.
type SunburstMarkerPatternShape string

const (
	SunburstMarkerPatternShapeEmpty           SunburstMarkerPatternShape = ""
	SunburstMarkerPatternShapeSlash           SunburstMarkerPatternShape = "/"
	SunburstMarkerPatternShapeDoublebackslash SunburstMarkerPatternShape = "\\"
	SunburstMarkerPatternShapeX               SunburstMarkerPatternShape = "x"
	SunburstMarkerPatternShapeHyphenHyphen    SunburstMarkerPatternShape = "-"
	SunburstMarkerPatternShapeOr              SunburstMarkerPatternShape = "|"
	SunburstMarkerPatternShapePlus            SunburstMarkerPatternShape = "+"
	SunburstMarkerPatternShapeDot             SunburstMarkerPatternShape = "."
)

// SunburstOutsidetextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type SunburstOutsidetextfontStyle string

const (
	SunburstOutsidetextfontStyleNormal SunburstOutsidetextfontStyle = "normal"
	SunburstOutsidetextfontStyleItalic SunburstOutsidetextfontStyle = "italic"
)

// SunburstOutsidetextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type SunburstOutsidetextfontTextcase string

const (
	SunburstOutsidetextfontTextcaseNormal   SunburstOutsidetextfontTextcase = "normal"
	SunburstOutsidetextfontTextcaseWordCaps SunburstOutsidetextfontTextcase = "word caps"
	SunburstOutsidetextfontTextcaseUpper    SunburstOutsidetextfontTextcase = "upper"
	SunburstOutsidetextfontTextcaseLower    SunburstOutsidetextfontTextcase = "lower"
)

// SunburstOutsidetextfontVariant Sets the variant of the font.
type SunburstOutsidetextfontVariant string

const (
	SunburstOutsidetextfontVariantNormal        SunburstOutsidetextfontVariant = "normal"
	SunburstOutsidetextfontVariantSmallCaps     SunburstOutsidetextfontVariant = "small-caps"
	SunburstOutsidetextfontVariantAllSmallCaps  SunburstOutsidetextfontVariant = "all-small-caps"
	SunburstOutsidetextfontVariantAllPetiteCaps SunburstOutsidetextfontVariant = "all-petite-caps"
	SunburstOutsidetextfontVariantPetiteCaps    SunburstOutsidetextfontVariant = "petite-caps"
	SunburstOutsidetextfontVariantUnicase       SunburstOutsidetextfontVariant = "unicase"
)

// SunburstTextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type SunburstTextfontStyle string

const (
	SunburstTextfontStyleNormal SunburstTextfontStyle = "normal"
	SunburstTextfontStyleItalic SunburstTextfontStyle = "italic"
)

// SunburstTextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type SunburstTextfontTextcase string

const (
	SunburstTextfontTextcaseNormal   SunburstTextfontTextcase = "normal"
	SunburstTextfontTextcaseWordCaps SunburstTextfontTextcase = "word caps"
	SunburstTextfontTextcaseUpper    SunburstTextfontTextcase = "upper"
	SunburstTextfontTextcaseLower    SunburstTextfontTextcase = "lower"
)

// SunburstTextfontVariant Sets the variant of the font.
type SunburstTextfontVariant string

const (
	SunburstTextfontVariantNormal        SunburstTextfontVariant = "normal"
	SunburstTextfontVariantSmallCaps     SunburstTextfontVariant = "small-caps"
	SunburstTextfontVariantAllSmallCaps  SunburstTextfontVariant = "all-small-caps"
	SunburstTextfontVariantAllPetiteCaps SunburstTextfontVariant = "all-petite-caps"
	SunburstTextfontVariantPetiteCaps    SunburstTextfontVariant = "petite-caps"
	SunburstTextfontVariantUnicase       SunburstTextfontVariant = "unicase"
)

// SunburstVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type SunburstVisible interface{}

var (
	SunburstVisibleTrue       SunburstVisible = true
	SunburstVisibleFalse      SunburstVisible = false
	SunburstVisibleLegendonly SunburstVisible = "legendonly"
)

// SunburstCount Determines default for `values` when it is not provided, by inferring a 1 for each of the *leaves* and/or *branches*, otherwise 0.
type SunburstCount string

const (
	// Flags
	SunburstCountBranches SunburstCount = "branches"
	SunburstCountLeaves   SunburstCount = "leaves"

	// Extra

)

// SunburstHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
type SunburstHoverinfo string

const (
	// Flags
	SunburstHoverinfoLabel         SunburstHoverinfo = "label"
	SunburstHoverinfoText          SunburstHoverinfo = "text"
	SunburstHoverinfoValue         SunburstHoverinfo = "value"
	SunburstHoverinfoName          SunburstHoverinfo = "name"
	SunburstHoverinfoCurrentPath   SunburstHoverinfo = "current path"
	SunburstHoverinfoPercentRoot   SunburstHoverinfo = "percent root"
	SunburstHoverinfoPercentEntry  SunburstHoverinfo = "percent entry"
	SunburstHoverinfoPercentParent SunburstHoverinfo = "percent parent"

	// Extra
	SunburstHoverinfoAll  SunburstHoverinfo = "all"
	SunburstHoverinfoNone SunburstHoverinfo = "none"
	SunburstHoverinfoSkip SunburstHoverinfo = "skip"
)

// SunburstHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type SunburstHoverlabelFontLineposition string

const (
	// Flags
	SunburstHoverlabelFontLinepositionUnder   SunburstHoverlabelFontLineposition = "under"
	SunburstHoverlabelFontLinepositionOver    SunburstHoverlabelFontLineposition = "over"
	SunburstHoverlabelFontLinepositionThrough SunburstHoverlabelFontLineposition = "through"

	// Extra
	SunburstHoverlabelFontLinepositionNone SunburstHoverlabelFontLineposition = "none"
)

// SunburstInsidetextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type SunburstInsidetextfontLineposition string

const (
	// Flags
	SunburstInsidetextfontLinepositionUnder   SunburstInsidetextfontLineposition = "under"
	SunburstInsidetextfontLinepositionOver    SunburstInsidetextfontLineposition = "over"
	SunburstInsidetextfontLinepositionThrough SunburstInsidetextfontLineposition = "through"

	// Extra
	SunburstInsidetextfontLinepositionNone SunburstInsidetextfontLineposition = "none"
)

// SunburstLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type SunburstLegendgrouptitleFontLineposition string

const (
	// Flags
	SunburstLegendgrouptitleFontLinepositionUnder   SunburstLegendgrouptitleFontLineposition = "under"
	SunburstLegendgrouptitleFontLinepositionOver    SunburstLegendgrouptitleFontLineposition = "over"
	SunburstLegendgrouptitleFontLinepositionThrough SunburstLegendgrouptitleFontLineposition = "through"

	// Extra
	SunburstLegendgrouptitleFontLinepositionNone SunburstLegendgrouptitleFontLineposition = "none"
)

// SunburstMarkerColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type SunburstMarkerColorbarTickfontLineposition string

const (
	// Flags
	SunburstMarkerColorbarTickfontLinepositionUnder   SunburstMarkerColorbarTickfontLineposition = "under"
	SunburstMarkerColorbarTickfontLinepositionOver    SunburstMarkerColorbarTickfontLineposition = "over"
	SunburstMarkerColorbarTickfontLinepositionThrough SunburstMarkerColorbarTickfontLineposition = "through"

	// Extra
	SunburstMarkerColorbarTickfontLinepositionNone SunburstMarkerColorbarTickfontLineposition = "none"
)

// SunburstMarkerColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type SunburstMarkerColorbarTitleFontLineposition string

const (
	// Flags
	SunburstMarkerColorbarTitleFontLinepositionUnder   SunburstMarkerColorbarTitleFontLineposition = "under"
	SunburstMarkerColorbarTitleFontLinepositionOver    SunburstMarkerColorbarTitleFontLineposition = "over"
	SunburstMarkerColorbarTitleFontLinepositionThrough SunburstMarkerColorbarTitleFontLineposition = "through"

	// Extra
	SunburstMarkerColorbarTitleFontLinepositionNone SunburstMarkerColorbarTitleFontLineposition = "none"
)

// SunburstOutsidetextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type SunburstOutsidetextfontLineposition string

const (
	// Flags
	SunburstOutsidetextfontLinepositionUnder   SunburstOutsidetextfontLineposition = "under"
	SunburstOutsidetextfontLinepositionOver    SunburstOutsidetextfontLineposition = "over"
	SunburstOutsidetextfontLinepositionThrough SunburstOutsidetextfontLineposition = "through"

	// Extra
	SunburstOutsidetextfontLinepositionNone SunburstOutsidetextfontLineposition = "none"
)

// SunburstTextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type SunburstTextfontLineposition string

const (
	// Flags
	SunburstTextfontLinepositionUnder   SunburstTextfontLineposition = "under"
	SunburstTextfontLinepositionOver    SunburstTextfontLineposition = "over"
	SunburstTextfontLinepositionThrough SunburstTextfontLineposition = "through"

	// Extra
	SunburstTextfontLinepositionNone SunburstTextfontLineposition = "none"
)

// SunburstTextinfo Determines which trace information appear on the graph.
type SunburstTextinfo string

const (
	// Flags
	SunburstTextinfoLabel         SunburstTextinfo = "label"
	SunburstTextinfoText          SunburstTextinfo = "text"
	SunburstTextinfoValue         SunburstTextinfo = "value"
	SunburstTextinfoCurrentPath   SunburstTextinfo = "current path"
	SunburstTextinfoPercentRoot   SunburstTextinfo = "percent root"
	SunburstTextinfoPercentEntry  SunburstTextinfo = "percent entry"
	SunburstTextinfoPercentParent SunburstTextinfo = "percent parent"

	// Extra
	SunburstTextinfoNone SunburstTextinfo = "none"
)
