package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeChoropleth types.TraceType = "choropleth"

func (t *Choropleth) GetType() types.TraceType {
	return TraceTypeChoropleth
}

func (t *Choropleth) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Choropleth
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Choropleth The data that describes the choropleth value-to-color mapping is set in `z`. The geographic locations corresponding to each value in `z` are set in `locations`.
type Choropleth struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	Colorbar *ChoroplethColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `zmin` and `zmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	Customdatasrc types.StringType `json:"customdatasrc,omitempty"`

	// Featureidkey
	// arrayOK: false
	// type: string
	// Sets the key in GeoJSON features which is used as id to match the items included in the `locations` array. Only has an effect when `geojson` is set. Support nested property, for example *properties.name*.
	Featureidkey types.StringType `json:"featureidkey,omitempty"`

	// Geo
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's geospatial coordinates and a geographic map. If *geo* (the default value), the geospatial coordinates refer to `layout.geo`. If *geo2*, the geospatial coordinates refer to `layout.geo2`, and so on.
	Geo types.StringType `json:"geo,omitempty"`

	// Geojson
	// arrayOK: false
	// type: any
	// Sets optional GeoJSON data associated with this trace. If not given, the features on the base map are used. It can be set as a valid GeoJSON object or as a URL string. Note that we only accept GeoJSONs of type *FeatureCollection* or *Feature* with geometries of type *Polygon* or *MultiPolygon*.
	Geojson interface{} `json:"geojson,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo *types.ArrayOK[*ChoroplethHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	Hoverinfosrc types.StringType `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	Hoverlabel *ChoroplethHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate *types.ArrayOK[*types.StringType] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	Hovertemplatesrc types.StringType `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: true
	// type: string
	// Same as `text`.
	Hovertext *types.ArrayOK[*types.StringType] `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	Hovertextsrc types.StringType `json:"hovertextsrc,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	Idssrc types.StringType `json:"idssrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	Legendgrouptitle *ChoroplethLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Locationmode
	// arrayOK: false
	// default: ISO-3
	// type: enumerated
	// Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.
	Locationmode ChoroplethLocationmode `json:"locationmode,omitempty"`

	// Locations
	// arrayOK: false
	// type: data_array
	// Sets the coordinates via location IDs or names. See `locationmode` for more info.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Locations *types.DataArrayType `json:"locations,omitempty"`

	// Locationssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `locations`.
	Locationssrc types.StringType `json:"locationssrc,omitempty"`

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ChoroplethMarker `json:"marker,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	Name types.StringType `json:"name,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. If true, `zmin` will correspond to the last color in the array and `zmax` will correspond to the first color.
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Selected
	// arrayOK: false
	// role: Object
	Selected *ChoroplethSelected `json:"selected,omitempty"`

	// Selectedpoints
	// arrayOK: false
	// type: any
	// Array containing integer indices of selected points. Has an effect only for traces that support selections. Note that an empty array means an empty selection where the `unselected` are turned on for all points, whereas, any other non-array values means no selection all where the `selected` and `unselected` styles have no effect.
	Selectedpoints interface{} `json:"selectedpoints,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace.
	Showscale types.BoolType `json:"showscale,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	Stream *ChoroplethStream `json:"stream,omitempty"`

	// Text
	// arrayOK: true
	// type: string
	// Sets the text elements associated with each location.
	Text *types.ArrayOK[*types.StringType] `json:"text,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	Textsrc types.StringType `json:"textsrc,omitempty"`

	// Transforms
	// role: Object
	// items: ChoroplethTransform
	Transforms []ChoroplethTransform `json:"transforms,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	Uid types.StringType `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Unselected
	// arrayOK: false
	// role: Object
	Unselected *ChoroplethUnselected `json:"unselected,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible ChoroplethVisible `json:"visible,omitempty"`

	// Z
	// arrayOK: false
	// type: data_array
	// Sets the color values.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Z *types.DataArrayType `json:"z,omitempty"`

	// Zauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here in `z`) or the bounds set in `zmin` and `zmax` Defaults to `false` when `zmin` and `zmax` are set by the user.
	Zauto types.BoolType `json:"zauto,omitempty"`

	// Zmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Value should have the same units as in `z` and if set, `zmin` must be set as well.
	Zmax types.NumberType `json:"zmax,omitempty"`

	// Zmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `zmin` and/or `zmax` to be equidistant to this point. Value should have the same units as in `z`. Has no effect when `zauto` is `false`.
	Zmid types.NumberType `json:"zmid,omitempty"`

	// Zmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Value should have the same units as in `z` and if set, `zmax` must be set as well.
	Zmin types.NumberType `json:"zmin,omitempty"`

	// Zsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `z`.
	Zsrc types.StringType `json:"zsrc,omitempty"`
}

// ChoroplethColorbarTickfont Sets the color bar's tick label font
type ChoroplethColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ChoroplethColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ChoroplethColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ChoroplethColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ChoroplethColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ChoroplethColorbarTickformatstop
type ChoroplethColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	Value types.StringType `json:"value,omitempty"`
}

// ChoroplethColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type ChoroplethColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ChoroplethColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ChoroplethColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ChoroplethColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ChoroplethColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ChoroplethColorbarTitle
type ChoroplethColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *ChoroplethColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side ChoroplethColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text types.StringType `json:"text,omitempty"`
}

// ChoroplethColorbar
type ChoroplethColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat ChoroplethColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode ChoroplethColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	Orientation ChoroplethColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent ChoroplethColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix ChoroplethColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix ChoroplethColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode ChoroplethColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	Tickfont *ChoroplethColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: ChoroplethColorbarTickformatstop
	Tickformatstops []ChoroplethColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	Ticklabeloverflow ChoroplethColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	Ticklabelposition ChoroplethColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode ChoroplethColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks ChoroplethColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	Title *ChoroplethColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	Xanchor ChoroplethColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref ChoroplethColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	Yanchor ChoroplethColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref ChoroplethColorbarYref `json:"yref,omitempty"`
}

// ChoroplethHoverlabelFont Sets the font used in hover labels.
type ChoroplethHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*ChoroplethHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*ChoroplethHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*ChoroplethHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*ChoroplethHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// ChoroplethHoverlabel
type ChoroplethHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align *types.ArrayOK[*ChoroplethHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.StringType `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	Bordercolorsrc types.StringType `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *ChoroplethHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength *types.ArrayOK[*types.IntegerType] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	Namelengthsrc types.StringType `json:"namelengthsrc,omitempty"`
}

// ChoroplethLegendgrouptitleFont Sets this legend group's title font.
type ChoroplethLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition ChoroplethLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style ChoroplethLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase ChoroplethLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant ChoroplethLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// ChoroplethLegendgrouptitle
type ChoroplethLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *ChoroplethLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text types.StringType `json:"text,omitempty"`
}

// ChoroplethMarkerLine
type ChoroplethMarkerLine struct {

	// Color
	// arrayOK: true
	// type: color
	// Sets the marker.line color. It accepts either a specific color or an array of numbers that are mapped to the colorscale relative to the max and min values of the array or relative to `marker.line.cmin` and `marker.line.cmax` if set.
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	// Sets the width (in px) of the lines bounding the marker points.
	Width *types.ArrayOK[*types.NumberType] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	Widthsrc types.StringType `json:"widthsrc,omitempty"`
}

// ChoroplethMarker
type ChoroplethMarker struct {

	// Line
	// arrayOK: false
	// role: Object
	Line *ChoroplethMarkerLine `json:"line,omitempty"`

	// Opacity
	// arrayOK: true
	// type: number
	// Sets the opacity of the locations.
	Opacity *types.ArrayOK[*types.NumberType] `json:"opacity,omitempty"`

	// Opacitysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `opacity`.
	Opacitysrc types.StringType `json:"opacitysrc,omitempty"`
}

// ChoroplethSelectedMarker
type ChoroplethSelectedMarker struct {

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of selected points.
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// ChoroplethSelected
type ChoroplethSelected struct {

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ChoroplethSelectedMarker `json:"marker,omitempty"`
}

// ChoroplethStream
type ChoroplethStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints types.NumberType `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token types.StringType `json:"token,omitempty"`
}

// ChoroplethTransform WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.
type ChoroplethTransform struct {
}

// ChoroplethUnselectedMarker
type ChoroplethUnselectedMarker struct {

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the marker opacity of unselected points, applied only when a selection exists.
	Opacity types.NumberType `json:"opacity,omitempty"`
}

// ChoroplethUnselected
type ChoroplethUnselected struct {

	// Marker
	// arrayOK: false
	// role: Object
	Marker *ChoroplethUnselectedMarker `json:"marker,omitempty"`
}

// ChoroplethColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type ChoroplethColorbarExponentformat string

const (
	ChoroplethColorbarExponentformatNone  ChoroplethColorbarExponentformat = "none"
	ChoroplethColorbarExponentformatE1    ChoroplethColorbarExponentformat = "e"
	ChoroplethColorbarExponentformatE2    ChoroplethColorbarExponentformat = "E"
	ChoroplethColorbarExponentformatPower ChoroplethColorbarExponentformat = "power"
	ChoroplethColorbarExponentformatSI    ChoroplethColorbarExponentformat = "SI"
	ChoroplethColorbarExponentformatB     ChoroplethColorbarExponentformat = "B"
)

// ChoroplethColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
type ChoroplethColorbarLenmode string

const (
	ChoroplethColorbarLenmodeFraction ChoroplethColorbarLenmode = "fraction"
	ChoroplethColorbarLenmodePixels   ChoroplethColorbarLenmode = "pixels"
)

// ChoroplethColorbarOrientation Sets the orientation of the colorbar.
type ChoroplethColorbarOrientation string

const (
	ChoroplethColorbarOrientationH ChoroplethColorbarOrientation = "h"
	ChoroplethColorbarOrientationV ChoroplethColorbarOrientation = "v"
)

// ChoroplethColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type ChoroplethColorbarShowexponent string

const (
	ChoroplethColorbarShowexponentAll   ChoroplethColorbarShowexponent = "all"
	ChoroplethColorbarShowexponentFirst ChoroplethColorbarShowexponent = "first"
	ChoroplethColorbarShowexponentLast  ChoroplethColorbarShowexponent = "last"
	ChoroplethColorbarShowexponentNone  ChoroplethColorbarShowexponent = "none"
)

// ChoroplethColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type ChoroplethColorbarShowtickprefix string

const (
	ChoroplethColorbarShowtickprefixAll   ChoroplethColorbarShowtickprefix = "all"
	ChoroplethColorbarShowtickprefixFirst ChoroplethColorbarShowtickprefix = "first"
	ChoroplethColorbarShowtickprefixLast  ChoroplethColorbarShowtickprefix = "last"
	ChoroplethColorbarShowtickprefixNone  ChoroplethColorbarShowtickprefix = "none"
)

// ChoroplethColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
type ChoroplethColorbarShowticksuffix string

const (
	ChoroplethColorbarShowticksuffixAll   ChoroplethColorbarShowticksuffix = "all"
	ChoroplethColorbarShowticksuffixFirst ChoroplethColorbarShowticksuffix = "first"
	ChoroplethColorbarShowticksuffixLast  ChoroplethColorbarShowticksuffix = "last"
	ChoroplethColorbarShowticksuffixNone  ChoroplethColorbarShowticksuffix = "none"
)

// ChoroplethColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
type ChoroplethColorbarThicknessmode string

const (
	ChoroplethColorbarThicknessmodeFraction ChoroplethColorbarThicknessmode = "fraction"
	ChoroplethColorbarThicknessmodePixels   ChoroplethColorbarThicknessmode = "pixels"
)

// ChoroplethColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethColorbarTickfontStyle string

const (
	ChoroplethColorbarTickfontStyleNormal ChoroplethColorbarTickfontStyle = "normal"
	ChoroplethColorbarTickfontStyleItalic ChoroplethColorbarTickfontStyle = "italic"
)

// ChoroplethColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethColorbarTickfontTextcase string

const (
	ChoroplethColorbarTickfontTextcaseNormal   ChoroplethColorbarTickfontTextcase = "normal"
	ChoroplethColorbarTickfontTextcaseWordCaps ChoroplethColorbarTickfontTextcase = "word caps"
	ChoroplethColorbarTickfontTextcaseUpper    ChoroplethColorbarTickfontTextcase = "upper"
	ChoroplethColorbarTickfontTextcaseLower    ChoroplethColorbarTickfontTextcase = "lower"
)

// ChoroplethColorbarTickfontVariant Sets the variant of the font.
type ChoroplethColorbarTickfontVariant string

const (
	ChoroplethColorbarTickfontVariantNormal        ChoroplethColorbarTickfontVariant = "normal"
	ChoroplethColorbarTickfontVariantSmallCaps     ChoroplethColorbarTickfontVariant = "small-caps"
	ChoroplethColorbarTickfontVariantAllSmallCaps  ChoroplethColorbarTickfontVariant = "all-small-caps"
	ChoroplethColorbarTickfontVariantAllPetiteCaps ChoroplethColorbarTickfontVariant = "all-petite-caps"
	ChoroplethColorbarTickfontVariantPetiteCaps    ChoroplethColorbarTickfontVariant = "petite-caps"
	ChoroplethColorbarTickfontVariantUnicase       ChoroplethColorbarTickfontVariant = "unicase"
)

// ChoroplethColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
type ChoroplethColorbarTicklabeloverflow string

const (
	ChoroplethColorbarTicklabeloverflowAllow          ChoroplethColorbarTicklabeloverflow = "allow"
	ChoroplethColorbarTicklabeloverflowHidePastDiv    ChoroplethColorbarTicklabeloverflow = "hide past div"
	ChoroplethColorbarTicklabeloverflowHidePastDomain ChoroplethColorbarTicklabeloverflow = "hide past domain"
)

// ChoroplethColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
type ChoroplethColorbarTicklabelposition string

const (
	ChoroplethColorbarTicklabelpositionOutside       ChoroplethColorbarTicklabelposition = "outside"
	ChoroplethColorbarTicklabelpositionInside        ChoroplethColorbarTicklabelposition = "inside"
	ChoroplethColorbarTicklabelpositionOutsideTop    ChoroplethColorbarTicklabelposition = "outside top"
	ChoroplethColorbarTicklabelpositionInsideTop     ChoroplethColorbarTicklabelposition = "inside top"
	ChoroplethColorbarTicklabelpositionOutsideLeft   ChoroplethColorbarTicklabelposition = "outside left"
	ChoroplethColorbarTicklabelpositionInsideLeft    ChoroplethColorbarTicklabelposition = "inside left"
	ChoroplethColorbarTicklabelpositionOutsideRight  ChoroplethColorbarTicklabelposition = "outside right"
	ChoroplethColorbarTicklabelpositionInsideRight   ChoroplethColorbarTicklabelposition = "inside right"
	ChoroplethColorbarTicklabelpositionOutsideBottom ChoroplethColorbarTicklabelposition = "outside bottom"
	ChoroplethColorbarTicklabelpositionInsideBottom  ChoroplethColorbarTicklabelposition = "inside bottom"
)

// ChoroplethColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type ChoroplethColorbarTickmode string

const (
	ChoroplethColorbarTickmodeAuto   ChoroplethColorbarTickmode = "auto"
	ChoroplethColorbarTickmodeLinear ChoroplethColorbarTickmode = "linear"
	ChoroplethColorbarTickmodeArray  ChoroplethColorbarTickmode = "array"
)

// ChoroplethColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type ChoroplethColorbarTicks string

const (
	ChoroplethColorbarTicksOutside ChoroplethColorbarTicks = "outside"
	ChoroplethColorbarTicksInside  ChoroplethColorbarTicks = "inside"
	ChoroplethColorbarTicksEmpty   ChoroplethColorbarTicks = ""
)

// ChoroplethColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethColorbarTitleFontStyle string

const (
	ChoroplethColorbarTitleFontStyleNormal ChoroplethColorbarTitleFontStyle = "normal"
	ChoroplethColorbarTitleFontStyleItalic ChoroplethColorbarTitleFontStyle = "italic"
)

// ChoroplethColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethColorbarTitleFontTextcase string

const (
	ChoroplethColorbarTitleFontTextcaseNormal   ChoroplethColorbarTitleFontTextcase = "normal"
	ChoroplethColorbarTitleFontTextcaseWordCaps ChoroplethColorbarTitleFontTextcase = "word caps"
	ChoroplethColorbarTitleFontTextcaseUpper    ChoroplethColorbarTitleFontTextcase = "upper"
	ChoroplethColorbarTitleFontTextcaseLower    ChoroplethColorbarTitleFontTextcase = "lower"
)

// ChoroplethColorbarTitleFontVariant Sets the variant of the font.
type ChoroplethColorbarTitleFontVariant string

const (
	ChoroplethColorbarTitleFontVariantNormal        ChoroplethColorbarTitleFontVariant = "normal"
	ChoroplethColorbarTitleFontVariantSmallCaps     ChoroplethColorbarTitleFontVariant = "small-caps"
	ChoroplethColorbarTitleFontVariantAllSmallCaps  ChoroplethColorbarTitleFontVariant = "all-small-caps"
	ChoroplethColorbarTitleFontVariantAllPetiteCaps ChoroplethColorbarTitleFontVariant = "all-petite-caps"
	ChoroplethColorbarTitleFontVariantPetiteCaps    ChoroplethColorbarTitleFontVariant = "petite-caps"
	ChoroplethColorbarTitleFontVariantUnicase       ChoroplethColorbarTitleFontVariant = "unicase"
)

// ChoroplethColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
type ChoroplethColorbarTitleSide string

const (
	ChoroplethColorbarTitleSideRight  ChoroplethColorbarTitleSide = "right"
	ChoroplethColorbarTitleSideTop    ChoroplethColorbarTitleSide = "top"
	ChoroplethColorbarTitleSideBottom ChoroplethColorbarTitleSide = "bottom"
)

// ChoroplethColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
type ChoroplethColorbarXanchor string

const (
	ChoroplethColorbarXanchorLeft   ChoroplethColorbarXanchor = "left"
	ChoroplethColorbarXanchorCenter ChoroplethColorbarXanchor = "center"
	ChoroplethColorbarXanchorRight  ChoroplethColorbarXanchor = "right"
)

// ChoroplethColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type ChoroplethColorbarXref string

const (
	ChoroplethColorbarXrefContainer ChoroplethColorbarXref = "container"
	ChoroplethColorbarXrefPaper     ChoroplethColorbarXref = "paper"
)

// ChoroplethColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
type ChoroplethColorbarYanchor string

const (
	ChoroplethColorbarYanchorTop    ChoroplethColorbarYanchor = "top"
	ChoroplethColorbarYanchorMiddle ChoroplethColorbarYanchor = "middle"
	ChoroplethColorbarYanchorBottom ChoroplethColorbarYanchor = "bottom"
)

// ChoroplethColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type ChoroplethColorbarYref string

const (
	ChoroplethColorbarYrefContainer ChoroplethColorbarYref = "container"
	ChoroplethColorbarYrefPaper     ChoroplethColorbarYref = "paper"
)

// ChoroplethHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type ChoroplethHoverlabelAlign string

const (
	ChoroplethHoverlabelAlignLeft  ChoroplethHoverlabelAlign = "left"
	ChoroplethHoverlabelAlignRight ChoroplethHoverlabelAlign = "right"
	ChoroplethHoverlabelAlignAuto  ChoroplethHoverlabelAlign = "auto"
)

// ChoroplethHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethHoverlabelFontStyle string

const (
	ChoroplethHoverlabelFontStyleNormal ChoroplethHoverlabelFontStyle = "normal"
	ChoroplethHoverlabelFontStyleItalic ChoroplethHoverlabelFontStyle = "italic"
)

// ChoroplethHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethHoverlabelFontTextcase string

const (
	ChoroplethHoverlabelFontTextcaseNormal   ChoroplethHoverlabelFontTextcase = "normal"
	ChoroplethHoverlabelFontTextcaseWordCaps ChoroplethHoverlabelFontTextcase = "word caps"
	ChoroplethHoverlabelFontTextcaseUpper    ChoroplethHoverlabelFontTextcase = "upper"
	ChoroplethHoverlabelFontTextcaseLower    ChoroplethHoverlabelFontTextcase = "lower"
)

// ChoroplethHoverlabelFontVariant Sets the variant of the font.
type ChoroplethHoverlabelFontVariant string

const (
	ChoroplethHoverlabelFontVariantNormal        ChoroplethHoverlabelFontVariant = "normal"
	ChoroplethHoverlabelFontVariantSmallCaps     ChoroplethHoverlabelFontVariant = "small-caps"
	ChoroplethHoverlabelFontVariantAllSmallCaps  ChoroplethHoverlabelFontVariant = "all-small-caps"
	ChoroplethHoverlabelFontVariantAllPetiteCaps ChoroplethHoverlabelFontVariant = "all-petite-caps"
	ChoroplethHoverlabelFontVariantPetiteCaps    ChoroplethHoverlabelFontVariant = "petite-caps"
	ChoroplethHoverlabelFontVariantUnicase       ChoroplethHoverlabelFontVariant = "unicase"
)

// ChoroplethLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type ChoroplethLegendgrouptitleFontStyle string

const (
	ChoroplethLegendgrouptitleFontStyleNormal ChoroplethLegendgrouptitleFontStyle = "normal"
	ChoroplethLegendgrouptitleFontStyleItalic ChoroplethLegendgrouptitleFontStyle = "italic"
)

// ChoroplethLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type ChoroplethLegendgrouptitleFontTextcase string

const (
	ChoroplethLegendgrouptitleFontTextcaseNormal   ChoroplethLegendgrouptitleFontTextcase = "normal"
	ChoroplethLegendgrouptitleFontTextcaseWordCaps ChoroplethLegendgrouptitleFontTextcase = "word caps"
	ChoroplethLegendgrouptitleFontTextcaseUpper    ChoroplethLegendgrouptitleFontTextcase = "upper"
	ChoroplethLegendgrouptitleFontTextcaseLower    ChoroplethLegendgrouptitleFontTextcase = "lower"
)

// ChoroplethLegendgrouptitleFontVariant Sets the variant of the font.
type ChoroplethLegendgrouptitleFontVariant string

const (
	ChoroplethLegendgrouptitleFontVariantNormal        ChoroplethLegendgrouptitleFontVariant = "normal"
	ChoroplethLegendgrouptitleFontVariantSmallCaps     ChoroplethLegendgrouptitleFontVariant = "small-caps"
	ChoroplethLegendgrouptitleFontVariantAllSmallCaps  ChoroplethLegendgrouptitleFontVariant = "all-small-caps"
	ChoroplethLegendgrouptitleFontVariantAllPetiteCaps ChoroplethLegendgrouptitleFontVariant = "all-petite-caps"
	ChoroplethLegendgrouptitleFontVariantPetiteCaps    ChoroplethLegendgrouptitleFontVariant = "petite-caps"
	ChoroplethLegendgrouptitleFontVariantUnicase       ChoroplethLegendgrouptitleFontVariant = "unicase"
)

// ChoroplethLocationmode Determines the set of locations used to match entries in `locations` to regions on the map. Values *ISO-3*, *USA-states*, *country names* correspond to features on the base map and value *geojson-id* corresponds to features from a custom GeoJSON linked to the `geojson` attribute.
type ChoroplethLocationmode string

const (
	ChoroplethLocationmodeISO3         ChoroplethLocationmode = "ISO-3"
	ChoroplethLocationmodeUSAStates    ChoroplethLocationmode = "USA-states"
	ChoroplethLocationmodeCountryNames ChoroplethLocationmode = "country names"
	ChoroplethLocationmodeGeojsonId    ChoroplethLocationmode = "geojson-id"
)

// ChoroplethVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type ChoroplethVisible interface{}

var (
	ChoroplethVisibleTrue       ChoroplethVisible = true
	ChoroplethVisibleFalse      ChoroplethVisible = false
	ChoroplethVisibleLegendonly ChoroplethVisible = "legendonly"
)

// ChoroplethColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethColorbarTickfontLineposition string

const (
	// Flags
	ChoroplethColorbarTickfontLinepositionUnder   ChoroplethColorbarTickfontLineposition = "under"
	ChoroplethColorbarTickfontLinepositionOver    ChoroplethColorbarTickfontLineposition = "over"
	ChoroplethColorbarTickfontLinepositionThrough ChoroplethColorbarTickfontLineposition = "through"

	// Extra
	ChoroplethColorbarTickfontLinepositionNone ChoroplethColorbarTickfontLineposition = "none"
)

// ChoroplethColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethColorbarTitleFontLineposition string

const (
	// Flags
	ChoroplethColorbarTitleFontLinepositionUnder   ChoroplethColorbarTitleFontLineposition = "under"
	ChoroplethColorbarTitleFontLinepositionOver    ChoroplethColorbarTitleFontLineposition = "over"
	ChoroplethColorbarTitleFontLinepositionThrough ChoroplethColorbarTitleFontLineposition = "through"

	// Extra
	ChoroplethColorbarTitleFontLinepositionNone ChoroplethColorbarTitleFontLineposition = "none"
)

// ChoroplethHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
type ChoroplethHoverinfo string

const (
	// Flags
	ChoroplethHoverinfoLocation ChoroplethHoverinfo = "location"
	ChoroplethHoverinfoZ        ChoroplethHoverinfo = "z"
	ChoroplethHoverinfoText     ChoroplethHoverinfo = "text"
	ChoroplethHoverinfoName     ChoroplethHoverinfo = "name"

	// Extra
	ChoroplethHoverinfoAll  ChoroplethHoverinfo = "all"
	ChoroplethHoverinfoNone ChoroplethHoverinfo = "none"
	ChoroplethHoverinfoSkip ChoroplethHoverinfo = "skip"
)

// ChoroplethHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethHoverlabelFontLineposition string

const (
	// Flags
	ChoroplethHoverlabelFontLinepositionUnder   ChoroplethHoverlabelFontLineposition = "under"
	ChoroplethHoverlabelFontLinepositionOver    ChoroplethHoverlabelFontLineposition = "over"
	ChoroplethHoverlabelFontLinepositionThrough ChoroplethHoverlabelFontLineposition = "through"

	// Extra
	ChoroplethHoverlabelFontLinepositionNone ChoroplethHoverlabelFontLineposition = "none"
)

// ChoroplethLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type ChoroplethLegendgrouptitleFontLineposition string

const (
	// Flags
	ChoroplethLegendgrouptitleFontLinepositionUnder   ChoroplethLegendgrouptitleFontLineposition = "under"
	ChoroplethLegendgrouptitleFontLinepositionOver    ChoroplethLegendgrouptitleFontLineposition = "over"
	ChoroplethLegendgrouptitleFontLinepositionThrough ChoroplethLegendgrouptitleFontLineposition = "through"

	// Extra
	ChoroplethLegendgrouptitleFontLinepositionNone ChoroplethLegendgrouptitleFontLineposition = "none"
)
