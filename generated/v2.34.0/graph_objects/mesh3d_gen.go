package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypeMesh3d types.TraceType = "mesh3d"

func (t *Mesh3d) GetType() types.TraceType {
	return TraceTypeMesh3d
}

func (t *Mesh3d) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Mesh3d
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Mesh3d Draws sets of triangles with coordinates given by three 1-dimensional arrays in `x`, `y`, `z` and (1) a sets of `i`, `j`, `k` indices (2) Delaunay triangulation or (3) the Alpha-shape algorithm or (4) the Convex-hull algorithm
type Mesh3d struct {

	// Alphahull
	// arrayOK: false
	// type: number
	// Determines how the mesh surface triangles are derived from the set of vertices (points) represented by the `x`, `y` and `z` arrays, if the `i`, `j`, `k` arrays are not supplied. For general use of `mesh3d` it is preferred that `i`, `j`, `k` are supplied. If *-1*, Delaunay triangulation is used, which is mainly suitable if the mesh is a single, more or less layer surface that is perpendicular to `delaunayaxis`. In case the `delaunayaxis` intersects the mesh surface at more than one point it will result triangles that are very long in the dimension of `delaunayaxis`. If *>0*, the alpha-shape algorithm is used. In this case, the positive `alphahull` value signals the use of the alpha-shape algorithm, _and_ its value acts as the parameter for the mesh fitting. If *0*,  the convex-hull algorithm is used. It is suitable for convex bodies or if the intention is to enclose the `x`, `y` and `z` point set into a convex hull.
	Alphahull types.NumberType `json:"alphahull,omitempty"`

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale types.BoolType `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here `intensity`) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.
	Cauto types.BoolType `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Value should have the same units as `intensity` and if set, `cmin` must be set as well.
	Cmax types.NumberType `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as `intensity`. Has no effect when `cauto` is `false`.
	Cmid types.NumberType `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Value should have the same units as `intensity` and if set, `cmax` must be set as well.
	Cmin types.NumberType `json:"cmin,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets the color of the whole mesh
	Color types.ColorWithColorScale `json:"color,omitempty"`

	// Coloraxis
	// arrayOK: false
	// type: subplotid
	// Sets a reference to a shared color axis. References to these shared color axes are *coloraxis*, *coloraxis2*, *coloraxis3*, etc. Settings for these shared color axes are set in the layout, under `layout.coloraxis`, `layout.coloraxis2`, etc. Note that multiple color scales can be linked to the same color axis.
	Coloraxis types.StringType `json:"coloraxis,omitempty"`

	// Colorbar
	// arrayOK: false
	// role: Object
	Colorbar *Mesh3dColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// arrayOK: false
	// type: colorscale
	// Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	Colorscale *types.ColorScale `json:"colorscale,omitempty"`

	// Contour
	// arrayOK: false
	// role: Object
	Contour *Mesh3dContour `json:"contour,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	Customdatasrc types.StringType `json:"customdatasrc,omitempty"`

	// Delaunayaxis
	// arrayOK: false
	// default: z
	// type: enumerated
	// Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.
	Delaunayaxis Mesh3dDelaunayaxis `json:"delaunayaxis,omitempty"`

	// Facecolor
	// arrayOK: false
	// type: data_array
	// Sets the color of each face Overrides *color* and *vertexcolor*.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Facecolor *types.DataArrayType `json:"facecolor,omitempty"`

	// Facecolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `facecolor`.
	Facecolorsrc types.StringType `json:"facecolorsrc,omitempty"`

	// Flatshading
	// arrayOK: false
	// type: boolean
	// Determines whether or not normal smoothing is applied to the meshes, creating meshes with an angular, low-poly look via flat reflections.
	Flatshading types.BoolType `json:"flatshading,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo *types.ArrayOK[*Mesh3dHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	Hoverinfosrc types.StringType `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	Hoverlabel *Mesh3dHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available.  Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate *types.ArrayOK[*types.StringType] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	Hovertemplatesrc types.StringType `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: true
	// type: string
	// Same as `text`.
	Hovertext *types.ArrayOK[*types.StringType] `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	Hovertextsrc types.StringType `json:"hovertextsrc,omitempty"`

	// I
	// arrayOK: false
	// type: data_array
	// A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *first* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `i[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `i` represents a point in space, which is the first vertex of a triangle.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	I *types.DataArrayType `json:"i,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	Idssrc types.StringType `json:"idssrc,omitempty"`

	// Intensity
	// arrayOK: false
	// type: data_array
	// Sets the intensity values for vertices or cells as defined by `intensitymode`. It can be used for plotting fields on meshes.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Intensity *types.DataArrayType `json:"intensity,omitempty"`

	// Intensitymode
	// arrayOK: false
	// default: vertex
	// type: enumerated
	// Determines the source of `intensity` values.
	Intensitymode Mesh3dIntensitymode `json:"intensitymode,omitempty"`

	// Intensitysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `intensity`.
	Intensitysrc types.StringType `json:"intensitysrc,omitempty"`

	// Isrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `i`.
	Isrc types.StringType `json:"isrc,omitempty"`

	// J
	// arrayOK: false
	// type: data_array
	// A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *second* vertex of a triangle. For example, `{i[m], j[m], k[m]}`  together represent face m (triangle m) in the mesh, where `j[m] = n` points to the triplet `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `j` represents a point in space, which is the second vertex of a triangle.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	J *types.DataArrayType `json:"j,omitempty"`

	// Jsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `j`.
	Jsrc types.StringType `json:"jsrc,omitempty"`

	// K
	// arrayOK: false
	// type: data_array
	// A vector of vertex indices, i.e. integer values between 0 and the length of the vertex vectors, representing the *third* vertex of a triangle. For example, `{i[m], j[m], k[m]}` together represent face m (triangle m) in the mesh, where `k[m] = n` points to the triplet  `{x[n], y[n], z[n]}` in the vertex arrays. Therefore, each element in `k` represents a point in space, which is the third vertex of a triangle.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	K *types.DataArrayType `json:"k,omitempty"`

	// Ksrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `k`.
	Ksrc types.StringType `json:"ksrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend types.StringType `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	Legendgroup types.StringType `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	Legendgrouptitle *Mesh3dLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	Legendrank types.NumberType `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	Legendwidth types.NumberType `json:"legendwidth,omitempty"`

	// Lighting
	// arrayOK: false
	// role: Object
	Lighting *Mesh3dLighting `json:"lighting,omitempty"`

	// Lightposition
	// arrayOK: false
	// role: Object
	Lightposition *Mesh3dLightposition `json:"lightposition,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc types.StringType `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	Name types.StringType `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the surface. Please note that in the case of using high `opacity` values for example a value greater than or equal to 0.5 on two surfaces (and 0.25 with four surfaces), an overlay of multiple transparent surfaces may not perfectly be sorted in depth by the webgl API. This behavior may be improved in the near future and is subject to change.
	Opacity types.NumberType `json:"opacity,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
	Reversescale types.BoolType `json:"reversescale,omitempty"`

	// Scene
	// arrayOK: false
	// type: subplotid
	// Sets a reference between this trace's 3D coordinate system and a 3D scene. If *scene* (the default value), the (x,y,z) coordinates refer to `layout.scene`. If *scene2*, the (x,y,z) coordinates refer to `layout.scene2`, and so on.
	Scene types.StringType `json:"scene,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	Showlegend types.BoolType `json:"showlegend,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace.
	Showscale types.BoolType `json:"showscale,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	Stream *Mesh3dStream `json:"stream,omitempty"`

	// Text
	// arrayOK: true
	// type: string
	// Sets the text elements associated with the vertices. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
	Text *types.ArrayOK[*types.StringType] `json:"text,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	Textsrc types.StringType `json:"textsrc,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	Uid types.StringType `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Vertexcolor
	// arrayOK: false
	// type: data_array
	// Sets the color of each vertex Overrides *color*. While Red, green and blue colors are in the range of 0 and 255; in the case of having vertex color data in RGBA format, the alpha color should be normalized to be between 0 and 1.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Vertexcolor *types.DataArrayType `json:"vertexcolor,omitempty"`

	// Vertexcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `vertexcolor`.
	Vertexcolorsrc types.StringType `json:"vertexcolorsrc,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible Mesh3dVisible `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: data_array
	// Sets the X coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	X *types.DataArrayType `json:"x,omitempty"`

	// Xcalendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use with `x` date data.
	Xcalendar Mesh3dXcalendar `json:"xcalendar,omitempty"`

	// Xhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `x`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `xaxis.hoverformat`.
	Xhoverformat types.StringType `json:"xhoverformat,omitempty"`

	// Xsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `x`.
	Xsrc types.StringType `json:"xsrc,omitempty"`

	// Y
	// arrayOK: false
	// type: data_array
	// Sets the Y coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Y *types.DataArrayType `json:"y,omitempty"`

	// Ycalendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use with `y` date data.
	Ycalendar Mesh3dYcalendar `json:"ycalendar,omitempty"`

	// Yhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `y`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `yaxis.hoverformat`.
	Yhoverformat types.StringType `json:"yhoverformat,omitempty"`

	// Ysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `y`.
	Ysrc types.StringType `json:"ysrc,omitempty"`

	// Z
	// arrayOK: false
	// type: data_array
	// Sets the Z coordinates of the vertices. The nth element of vectors `x`, `y` and `z` jointly represent the X, Y and Z coordinates of the nth vertex.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Z *types.DataArrayType `json:"z,omitempty"`

	// Zcalendar
	// arrayOK: false
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use with `z` date data.
	Zcalendar Mesh3dZcalendar `json:"zcalendar,omitempty"`

	// Zhoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rulefor `z`  using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*By default the values are formatted using `zaxis.hoverformat`.
	Zhoverformat types.StringType `json:"zhoverformat,omitempty"`

	// Zsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `z`.
	Zsrc types.StringType `json:"zsrc,omitempty"`
}

// Mesh3dColorbarTickfont Sets the color bar's tick label font
type Mesh3dColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition Mesh3dColorbarTickfontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style Mesh3dColorbarTickfontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase Mesh3dColorbarTickfontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant Mesh3dColorbarTickfontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// Mesh3dColorbarTickformatstop
type Mesh3dColorbarTickformatstop struct {

	// Dtickrange
	// arrayOK: false
	// type: info_array
	// range [*min*, *max*], where *min*, *max* - dtick values which describe some zoom level, it is possible to omit *min* or *max* value by passing *null*
	Dtickrange interface{} `json:"dtickrange,omitempty"`

	// Enabled
	// arrayOK: false
	// type: boolean
	// Determines whether or not this stop is used. If `false`, this stop is ignored even within its `dtickrange`.
	Enabled types.BoolType `json:"enabled,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// When used in a template, named items are created in the output figure in addition to any items the figure already has in this array. You can modify these items in the output figure by making your own item with `templateitemname` matching this `name` alongside your modifications (including `visible: false` or `enabled: false` to hide it). Has no effect outside of a template.
	Name types.StringType `json:"name,omitempty"`

	// Templateitemname
	// arrayOK: false
	// type: string
	// Used to refer to a named item in this array in the template. Named items from the template will be created even without a matching item in the input figure, but you can modify one by making an item with `templateitemname` matching its `name`, alongside your modifications (including `visible: false` or `enabled: false` to hide it). If there is no template or no matching item, this item will be hidden unless you explicitly show it with `visible: true`.
	Templateitemname types.StringType `json:"templateitemname,omitempty"`

	// Value
	// arrayOK: false
	// type: string
	// string - dtickformat for described zoom level, the same as *tickformat*
	Value types.StringType `json:"value,omitempty"`
}

// Mesh3dColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type Mesh3dColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition Mesh3dColorbarTitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style Mesh3dColorbarTitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase Mesh3dColorbarTitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant Mesh3dColorbarTitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// Mesh3dColorbarTitle
type Mesh3dColorbarTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *Mesh3dColorbarTitleFont `json:"font,omitempty"`

	// Side
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side Mesh3dColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text types.StringType `json:"text,omitempty"`
}

// Mesh3dColorbar
type Mesh3dColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	Bgcolor types.Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Bordercolor types.Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	Borderwidth types.NumberType `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// arrayOK: false
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat Mesh3dColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len types.NumberType `json:"len,omitempty"`

	// Lenmode
	// arrayOK: false
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode Mesh3dColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent types.NumberType `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks types.IntegerType `json:"nticks,omitempty"`

	// Orientation
	// arrayOK: false
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	Orientation Mesh3dColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Outlinecolor types.Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Outlinewidth types.NumberType `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands types.BoolType `json:"separatethousands,omitempty"`

	// Showexponent
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent Mesh3dColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels types.BoolType `json:"showticklabels,omitempty"`

	// Showtickprefix
	// arrayOK: false
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix Mesh3dColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// arrayOK: false
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix Mesh3dColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness types.NumberType `json:"thickness,omitempty"`

	// Thicknessmode
	// arrayOK: false
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode Mesh3dColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle types.NumberType `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor types.Color `json:"tickcolor,omitempty"`

	// Tickfont
	// arrayOK: false
	// role: Object
	Tickfont *Mesh3dColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat types.StringType `json:"tickformat,omitempty"`

	// Tickformatstops
	// role: Object
	// items: Mesh3dColorbarTickformatstop
	Tickformatstops []Mesh3dColorbarTickformatstop `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	Ticklabeloverflow Mesh3dColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// arrayOK: false
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	Ticklabelposition Mesh3dColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep types.IntegerType `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen types.NumberType `json:"ticklen,omitempty"`

	// Tickmode
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode Mesh3dColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix types.StringType `json:"tickprefix,omitempty"`

	// Ticks
	// arrayOK: false
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks Mesh3dColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix types.StringType `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ticktext *types.DataArrayType `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc types.StringType `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Tickvals *types.DataArrayType `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc types.StringType `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth types.NumberType `json:"tickwidth,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	Title *Mesh3dColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	X types.NumberType `json:"x,omitempty"`

	// Xanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	Xanchor Mesh3dColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	Xpad types.NumberType `json:"xpad,omitempty"`

	// Xref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref Mesh3dColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	Y types.NumberType `json:"y,omitempty"`

	// Yanchor
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	Yanchor Mesh3dColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	Ypad types.NumberType `json:"ypad,omitempty"`

	// Yref
	// arrayOK: false
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref Mesh3dColorbarYref `json:"yref,omitempty"`
}

// Mesh3dContour
type Mesh3dContour struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the color of the contour lines.
	Color types.Color `json:"color,omitempty"`

	// Show
	// arrayOK: false
	// type: boolean
	// Sets whether or not dynamic contours are shown on hover
	Show types.BoolType `json:"show,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the width of the contour lines.
	Width types.NumberType `json:"width,omitempty"`
}

// Mesh3dHoverlabelFont Sets the font used in hover labels.
type Mesh3dHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.StringType `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.StringType] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.StringType `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*Mesh3dHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.StringType `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.StringType] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.StringType `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*types.NumberType] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.StringType `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*Mesh3dHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.StringType `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*Mesh3dHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.StringType `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*Mesh3dHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.StringType `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*types.IntegerType] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.StringType `json:"weightsrc,omitempty"`
}

// Mesh3dHoverlabel
type Mesh3dHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align *types.ArrayOK[*Mesh3dHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.StringType `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.StringType `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	Bordercolorsrc types.StringType `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *Mesh3dHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength *types.ArrayOK[*types.IntegerType] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	Namelengthsrc types.StringType `json:"namelengthsrc,omitempty"`
}

// Mesh3dLegendgrouptitleFont Sets this legend group's title font.
type Mesh3dLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.StringType `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition Mesh3dLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.StringType `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size types.NumberType `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style Mesh3dLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase Mesh3dLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant Mesh3dLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight types.IntegerType `json:"weight,omitempty"`
}

// Mesh3dLegendgrouptitle
type Mesh3dLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *Mesh3dLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text types.StringType `json:"text,omitempty"`
}

// Mesh3dLighting
type Mesh3dLighting struct {

	// Ambient
	// arrayOK: false
	// type: number
	// Ambient light increases overall color visibility but can wash out the image.
	Ambient types.NumberType `json:"ambient,omitempty"`

	// Diffuse
	// arrayOK: false
	// type: number
	// Represents the extent that incident rays are reflected in a range of angles.
	Diffuse types.NumberType `json:"diffuse,omitempty"`

	// Facenormalsepsilon
	// arrayOK: false
	// type: number
	// Epsilon for face normals calculation avoids math issues arising from degenerate geometry.
	Facenormalsepsilon types.NumberType `json:"facenormalsepsilon,omitempty"`

	// Fresnel
	// arrayOK: false
	// type: number
	// Represents the reflectance as a dependency of the viewing angle; e.g. paper is reflective when viewing it from the edge of the paper (almost 90 degrees), causing shine.
	Fresnel types.NumberType `json:"fresnel,omitempty"`

	// Roughness
	// arrayOK: false
	// type: number
	// Alters specular reflection; the rougher the surface, the wider and less contrasty the shine.
	Roughness types.NumberType `json:"roughness,omitempty"`

	// Specular
	// arrayOK: false
	// type: number
	// Represents the level that incident rays are reflected in a single direction, causing shine.
	Specular types.NumberType `json:"specular,omitempty"`

	// Vertexnormalsepsilon
	// arrayOK: false
	// type: number
	// Epsilon for vertex normals calculation avoids math issues arising from degenerate geometry.
	Vertexnormalsepsilon types.NumberType `json:"vertexnormalsepsilon,omitempty"`
}

// Mesh3dLightposition
type Mesh3dLightposition struct {

	// X
	// arrayOK: false
	// type: number
	// Numeric vector, representing the X coordinate for each vertex.
	X types.NumberType `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Numeric vector, representing the Y coordinate for each vertex.
	Y types.NumberType `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	// Numeric vector, representing the Z coordinate for each vertex.
	Z types.NumberType `json:"z,omitempty"`
}

// Mesh3dStream
type Mesh3dStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints types.NumberType `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token types.StringType `json:"token,omitempty"`
}

// Mesh3dColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type Mesh3dColorbarExponentformat string

const (
	Mesh3dColorbarExponentformatNone  Mesh3dColorbarExponentformat = "none"
	Mesh3dColorbarExponentformatE1    Mesh3dColorbarExponentformat = "e"
	Mesh3dColorbarExponentformatE2    Mesh3dColorbarExponentformat = "E"
	Mesh3dColorbarExponentformatPower Mesh3dColorbarExponentformat = "power"
	Mesh3dColorbarExponentformatSI    Mesh3dColorbarExponentformat = "SI"
	Mesh3dColorbarExponentformatB     Mesh3dColorbarExponentformat = "B"
)

// Mesh3dColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
type Mesh3dColorbarLenmode string

const (
	Mesh3dColorbarLenmodeFraction Mesh3dColorbarLenmode = "fraction"
	Mesh3dColorbarLenmodePixels   Mesh3dColorbarLenmode = "pixels"
)

// Mesh3dColorbarOrientation Sets the orientation of the colorbar.
type Mesh3dColorbarOrientation string

const (
	Mesh3dColorbarOrientationH Mesh3dColorbarOrientation = "h"
	Mesh3dColorbarOrientationV Mesh3dColorbarOrientation = "v"
)

// Mesh3dColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type Mesh3dColorbarShowexponent string

const (
	Mesh3dColorbarShowexponentAll   Mesh3dColorbarShowexponent = "all"
	Mesh3dColorbarShowexponentFirst Mesh3dColorbarShowexponent = "first"
	Mesh3dColorbarShowexponentLast  Mesh3dColorbarShowexponent = "last"
	Mesh3dColorbarShowexponentNone  Mesh3dColorbarShowexponent = "none"
)

// Mesh3dColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type Mesh3dColorbarShowtickprefix string

const (
	Mesh3dColorbarShowtickprefixAll   Mesh3dColorbarShowtickprefix = "all"
	Mesh3dColorbarShowtickprefixFirst Mesh3dColorbarShowtickprefix = "first"
	Mesh3dColorbarShowtickprefixLast  Mesh3dColorbarShowtickprefix = "last"
	Mesh3dColorbarShowtickprefixNone  Mesh3dColorbarShowtickprefix = "none"
)

// Mesh3dColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
type Mesh3dColorbarShowticksuffix string

const (
	Mesh3dColorbarShowticksuffixAll   Mesh3dColorbarShowticksuffix = "all"
	Mesh3dColorbarShowticksuffixFirst Mesh3dColorbarShowticksuffix = "first"
	Mesh3dColorbarShowticksuffixLast  Mesh3dColorbarShowticksuffix = "last"
	Mesh3dColorbarShowticksuffixNone  Mesh3dColorbarShowticksuffix = "none"
)

// Mesh3dColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
type Mesh3dColorbarThicknessmode string

const (
	Mesh3dColorbarThicknessmodeFraction Mesh3dColorbarThicknessmode = "fraction"
	Mesh3dColorbarThicknessmodePixels   Mesh3dColorbarThicknessmode = "pixels"
)

// Mesh3dColorbarTickfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type Mesh3dColorbarTickfontStyle string

const (
	Mesh3dColorbarTickfontStyleNormal Mesh3dColorbarTickfontStyle = "normal"
	Mesh3dColorbarTickfontStyleItalic Mesh3dColorbarTickfontStyle = "italic"
)

// Mesh3dColorbarTickfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type Mesh3dColorbarTickfontTextcase string

const (
	Mesh3dColorbarTickfontTextcaseNormal   Mesh3dColorbarTickfontTextcase = "normal"
	Mesh3dColorbarTickfontTextcaseWordCaps Mesh3dColorbarTickfontTextcase = "word caps"
	Mesh3dColorbarTickfontTextcaseUpper    Mesh3dColorbarTickfontTextcase = "upper"
	Mesh3dColorbarTickfontTextcaseLower    Mesh3dColorbarTickfontTextcase = "lower"
)

// Mesh3dColorbarTickfontVariant Sets the variant of the font.
type Mesh3dColorbarTickfontVariant string

const (
	Mesh3dColorbarTickfontVariantNormal        Mesh3dColorbarTickfontVariant = "normal"
	Mesh3dColorbarTickfontVariantSmallCaps     Mesh3dColorbarTickfontVariant = "small-caps"
	Mesh3dColorbarTickfontVariantAllSmallCaps  Mesh3dColorbarTickfontVariant = "all-small-caps"
	Mesh3dColorbarTickfontVariantAllPetiteCaps Mesh3dColorbarTickfontVariant = "all-petite-caps"
	Mesh3dColorbarTickfontVariantPetiteCaps    Mesh3dColorbarTickfontVariant = "petite-caps"
	Mesh3dColorbarTickfontVariantUnicase       Mesh3dColorbarTickfontVariant = "unicase"
)

// Mesh3dColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
type Mesh3dColorbarTicklabeloverflow string

const (
	Mesh3dColorbarTicklabeloverflowAllow          Mesh3dColorbarTicklabeloverflow = "allow"
	Mesh3dColorbarTicklabeloverflowHidePastDiv    Mesh3dColorbarTicklabeloverflow = "hide past div"
	Mesh3dColorbarTicklabeloverflowHidePastDomain Mesh3dColorbarTicklabeloverflow = "hide past domain"
)

// Mesh3dColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
type Mesh3dColorbarTicklabelposition string

const (
	Mesh3dColorbarTicklabelpositionOutside       Mesh3dColorbarTicklabelposition = "outside"
	Mesh3dColorbarTicklabelpositionInside        Mesh3dColorbarTicklabelposition = "inside"
	Mesh3dColorbarTicklabelpositionOutsideTop    Mesh3dColorbarTicklabelposition = "outside top"
	Mesh3dColorbarTicklabelpositionInsideTop     Mesh3dColorbarTicklabelposition = "inside top"
	Mesh3dColorbarTicklabelpositionOutsideLeft   Mesh3dColorbarTicklabelposition = "outside left"
	Mesh3dColorbarTicklabelpositionInsideLeft    Mesh3dColorbarTicklabelposition = "inside left"
	Mesh3dColorbarTicklabelpositionOutsideRight  Mesh3dColorbarTicklabelposition = "outside right"
	Mesh3dColorbarTicklabelpositionInsideRight   Mesh3dColorbarTicklabelposition = "inside right"
	Mesh3dColorbarTicklabelpositionOutsideBottom Mesh3dColorbarTicklabelposition = "outside bottom"
	Mesh3dColorbarTicklabelpositionInsideBottom  Mesh3dColorbarTicklabelposition = "inside bottom"
)

// Mesh3dColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type Mesh3dColorbarTickmode string

const (
	Mesh3dColorbarTickmodeAuto   Mesh3dColorbarTickmode = "auto"
	Mesh3dColorbarTickmodeLinear Mesh3dColorbarTickmode = "linear"
	Mesh3dColorbarTickmodeArray  Mesh3dColorbarTickmode = "array"
)

// Mesh3dColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type Mesh3dColorbarTicks string

const (
	Mesh3dColorbarTicksOutside Mesh3dColorbarTicks = "outside"
	Mesh3dColorbarTicksInside  Mesh3dColorbarTicks = "inside"
	Mesh3dColorbarTicksEmpty   Mesh3dColorbarTicks = ""
)

// Mesh3dColorbarTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type Mesh3dColorbarTitleFontStyle string

const (
	Mesh3dColorbarTitleFontStyleNormal Mesh3dColorbarTitleFontStyle = "normal"
	Mesh3dColorbarTitleFontStyleItalic Mesh3dColorbarTitleFontStyle = "italic"
)

// Mesh3dColorbarTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type Mesh3dColorbarTitleFontTextcase string

const (
	Mesh3dColorbarTitleFontTextcaseNormal   Mesh3dColorbarTitleFontTextcase = "normal"
	Mesh3dColorbarTitleFontTextcaseWordCaps Mesh3dColorbarTitleFontTextcase = "word caps"
	Mesh3dColorbarTitleFontTextcaseUpper    Mesh3dColorbarTitleFontTextcase = "upper"
	Mesh3dColorbarTitleFontTextcaseLower    Mesh3dColorbarTitleFontTextcase = "lower"
)

// Mesh3dColorbarTitleFontVariant Sets the variant of the font.
type Mesh3dColorbarTitleFontVariant string

const (
	Mesh3dColorbarTitleFontVariantNormal        Mesh3dColorbarTitleFontVariant = "normal"
	Mesh3dColorbarTitleFontVariantSmallCaps     Mesh3dColorbarTitleFontVariant = "small-caps"
	Mesh3dColorbarTitleFontVariantAllSmallCaps  Mesh3dColorbarTitleFontVariant = "all-small-caps"
	Mesh3dColorbarTitleFontVariantAllPetiteCaps Mesh3dColorbarTitleFontVariant = "all-petite-caps"
	Mesh3dColorbarTitleFontVariantPetiteCaps    Mesh3dColorbarTitleFontVariant = "petite-caps"
	Mesh3dColorbarTitleFontVariantUnicase       Mesh3dColorbarTitleFontVariant = "unicase"
)

// Mesh3dColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
type Mesh3dColorbarTitleSide string

const (
	Mesh3dColorbarTitleSideRight  Mesh3dColorbarTitleSide = "right"
	Mesh3dColorbarTitleSideTop    Mesh3dColorbarTitleSide = "top"
	Mesh3dColorbarTitleSideBottom Mesh3dColorbarTitleSide = "bottom"
)

// Mesh3dColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
type Mesh3dColorbarXanchor string

const (
	Mesh3dColorbarXanchorLeft   Mesh3dColorbarXanchor = "left"
	Mesh3dColorbarXanchorCenter Mesh3dColorbarXanchor = "center"
	Mesh3dColorbarXanchorRight  Mesh3dColorbarXanchor = "right"
)

// Mesh3dColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type Mesh3dColorbarXref string

const (
	Mesh3dColorbarXrefContainer Mesh3dColorbarXref = "container"
	Mesh3dColorbarXrefPaper     Mesh3dColorbarXref = "paper"
)

// Mesh3dColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
type Mesh3dColorbarYanchor string

const (
	Mesh3dColorbarYanchorTop    Mesh3dColorbarYanchor = "top"
	Mesh3dColorbarYanchorMiddle Mesh3dColorbarYanchor = "middle"
	Mesh3dColorbarYanchorBottom Mesh3dColorbarYanchor = "bottom"
)

// Mesh3dColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type Mesh3dColorbarYref string

const (
	Mesh3dColorbarYrefContainer Mesh3dColorbarYref = "container"
	Mesh3dColorbarYrefPaper     Mesh3dColorbarYref = "paper"
)

// Mesh3dDelaunayaxis Sets the Delaunay axis, which is the axis that is perpendicular to the surface of the Delaunay triangulation. It has an effect if `i`, `j`, `k` are not provided and `alphahull` is set to indicate Delaunay triangulation.
type Mesh3dDelaunayaxis string

const (
	Mesh3dDelaunayaxisX Mesh3dDelaunayaxis = "x"
	Mesh3dDelaunayaxisY Mesh3dDelaunayaxis = "y"
	Mesh3dDelaunayaxisZ Mesh3dDelaunayaxis = "z"
)

// Mesh3dHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type Mesh3dHoverlabelAlign string

const (
	Mesh3dHoverlabelAlignLeft  Mesh3dHoverlabelAlign = "left"
	Mesh3dHoverlabelAlignRight Mesh3dHoverlabelAlign = "right"
	Mesh3dHoverlabelAlignAuto  Mesh3dHoverlabelAlign = "auto"
)

// Mesh3dHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type Mesh3dHoverlabelFontStyle string

const (
	Mesh3dHoverlabelFontStyleNormal Mesh3dHoverlabelFontStyle = "normal"
	Mesh3dHoverlabelFontStyleItalic Mesh3dHoverlabelFontStyle = "italic"
)

// Mesh3dHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type Mesh3dHoverlabelFontTextcase string

const (
	Mesh3dHoverlabelFontTextcaseNormal   Mesh3dHoverlabelFontTextcase = "normal"
	Mesh3dHoverlabelFontTextcaseWordCaps Mesh3dHoverlabelFontTextcase = "word caps"
	Mesh3dHoverlabelFontTextcaseUpper    Mesh3dHoverlabelFontTextcase = "upper"
	Mesh3dHoverlabelFontTextcaseLower    Mesh3dHoverlabelFontTextcase = "lower"
)

// Mesh3dHoverlabelFontVariant Sets the variant of the font.
type Mesh3dHoverlabelFontVariant string

const (
	Mesh3dHoverlabelFontVariantNormal        Mesh3dHoverlabelFontVariant = "normal"
	Mesh3dHoverlabelFontVariantSmallCaps     Mesh3dHoverlabelFontVariant = "small-caps"
	Mesh3dHoverlabelFontVariantAllSmallCaps  Mesh3dHoverlabelFontVariant = "all-small-caps"
	Mesh3dHoverlabelFontVariantAllPetiteCaps Mesh3dHoverlabelFontVariant = "all-petite-caps"
	Mesh3dHoverlabelFontVariantPetiteCaps    Mesh3dHoverlabelFontVariant = "petite-caps"
	Mesh3dHoverlabelFontVariantUnicase       Mesh3dHoverlabelFontVariant = "unicase"
)

// Mesh3dIntensitymode Determines the source of `intensity` values.
type Mesh3dIntensitymode string

const (
	Mesh3dIntensitymodeVertex Mesh3dIntensitymode = "vertex"
	Mesh3dIntensitymodeCell   Mesh3dIntensitymode = "cell"
)

// Mesh3dLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type Mesh3dLegendgrouptitleFontStyle string

const (
	Mesh3dLegendgrouptitleFontStyleNormal Mesh3dLegendgrouptitleFontStyle = "normal"
	Mesh3dLegendgrouptitleFontStyleItalic Mesh3dLegendgrouptitleFontStyle = "italic"
)

// Mesh3dLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type Mesh3dLegendgrouptitleFontTextcase string

const (
	Mesh3dLegendgrouptitleFontTextcaseNormal   Mesh3dLegendgrouptitleFontTextcase = "normal"
	Mesh3dLegendgrouptitleFontTextcaseWordCaps Mesh3dLegendgrouptitleFontTextcase = "word caps"
	Mesh3dLegendgrouptitleFontTextcaseUpper    Mesh3dLegendgrouptitleFontTextcase = "upper"
	Mesh3dLegendgrouptitleFontTextcaseLower    Mesh3dLegendgrouptitleFontTextcase = "lower"
)

// Mesh3dLegendgrouptitleFontVariant Sets the variant of the font.
type Mesh3dLegendgrouptitleFontVariant string

const (
	Mesh3dLegendgrouptitleFontVariantNormal        Mesh3dLegendgrouptitleFontVariant = "normal"
	Mesh3dLegendgrouptitleFontVariantSmallCaps     Mesh3dLegendgrouptitleFontVariant = "small-caps"
	Mesh3dLegendgrouptitleFontVariantAllSmallCaps  Mesh3dLegendgrouptitleFontVariant = "all-small-caps"
	Mesh3dLegendgrouptitleFontVariantAllPetiteCaps Mesh3dLegendgrouptitleFontVariant = "all-petite-caps"
	Mesh3dLegendgrouptitleFontVariantPetiteCaps    Mesh3dLegendgrouptitleFontVariant = "petite-caps"
	Mesh3dLegendgrouptitleFontVariantUnicase       Mesh3dLegendgrouptitleFontVariant = "unicase"
)

// Mesh3dVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type Mesh3dVisible interface{}

var (
	Mesh3dVisibleTrue       Mesh3dVisible = true
	Mesh3dVisibleFalse      Mesh3dVisible = false
	Mesh3dVisibleLegendonly Mesh3dVisible = "legendonly"
)

// Mesh3dXcalendar Sets the calendar system to use with `x` date data.
type Mesh3dXcalendar string

const (
	Mesh3dXcalendarChinese    Mesh3dXcalendar = "chinese"
	Mesh3dXcalendarCoptic     Mesh3dXcalendar = "coptic"
	Mesh3dXcalendarDiscworld  Mesh3dXcalendar = "discworld"
	Mesh3dXcalendarEthiopian  Mesh3dXcalendar = "ethiopian"
	Mesh3dXcalendarGregorian  Mesh3dXcalendar = "gregorian"
	Mesh3dXcalendarHebrew     Mesh3dXcalendar = "hebrew"
	Mesh3dXcalendarIslamic    Mesh3dXcalendar = "islamic"
	Mesh3dXcalendarJalali     Mesh3dXcalendar = "jalali"
	Mesh3dXcalendarJulian     Mesh3dXcalendar = "julian"
	Mesh3dXcalendarMayan      Mesh3dXcalendar = "mayan"
	Mesh3dXcalendarNanakshahi Mesh3dXcalendar = "nanakshahi"
	Mesh3dXcalendarNepali     Mesh3dXcalendar = "nepali"
	Mesh3dXcalendarPersian    Mesh3dXcalendar = "persian"
	Mesh3dXcalendarTaiwan     Mesh3dXcalendar = "taiwan"
	Mesh3dXcalendarThai       Mesh3dXcalendar = "thai"
	Mesh3dXcalendarUmmalqura  Mesh3dXcalendar = "ummalqura"
)

// Mesh3dYcalendar Sets the calendar system to use with `y` date data.
type Mesh3dYcalendar string

const (
	Mesh3dYcalendarChinese    Mesh3dYcalendar = "chinese"
	Mesh3dYcalendarCoptic     Mesh3dYcalendar = "coptic"
	Mesh3dYcalendarDiscworld  Mesh3dYcalendar = "discworld"
	Mesh3dYcalendarEthiopian  Mesh3dYcalendar = "ethiopian"
	Mesh3dYcalendarGregorian  Mesh3dYcalendar = "gregorian"
	Mesh3dYcalendarHebrew     Mesh3dYcalendar = "hebrew"
	Mesh3dYcalendarIslamic    Mesh3dYcalendar = "islamic"
	Mesh3dYcalendarJalali     Mesh3dYcalendar = "jalali"
	Mesh3dYcalendarJulian     Mesh3dYcalendar = "julian"
	Mesh3dYcalendarMayan      Mesh3dYcalendar = "mayan"
	Mesh3dYcalendarNanakshahi Mesh3dYcalendar = "nanakshahi"
	Mesh3dYcalendarNepali     Mesh3dYcalendar = "nepali"
	Mesh3dYcalendarPersian    Mesh3dYcalendar = "persian"
	Mesh3dYcalendarTaiwan     Mesh3dYcalendar = "taiwan"
	Mesh3dYcalendarThai       Mesh3dYcalendar = "thai"
	Mesh3dYcalendarUmmalqura  Mesh3dYcalendar = "ummalqura"
)

// Mesh3dZcalendar Sets the calendar system to use with `z` date data.
type Mesh3dZcalendar string

const (
	Mesh3dZcalendarChinese    Mesh3dZcalendar = "chinese"
	Mesh3dZcalendarCoptic     Mesh3dZcalendar = "coptic"
	Mesh3dZcalendarDiscworld  Mesh3dZcalendar = "discworld"
	Mesh3dZcalendarEthiopian  Mesh3dZcalendar = "ethiopian"
	Mesh3dZcalendarGregorian  Mesh3dZcalendar = "gregorian"
	Mesh3dZcalendarHebrew     Mesh3dZcalendar = "hebrew"
	Mesh3dZcalendarIslamic    Mesh3dZcalendar = "islamic"
	Mesh3dZcalendarJalali     Mesh3dZcalendar = "jalali"
	Mesh3dZcalendarJulian     Mesh3dZcalendar = "julian"
	Mesh3dZcalendarMayan      Mesh3dZcalendar = "mayan"
	Mesh3dZcalendarNanakshahi Mesh3dZcalendar = "nanakshahi"
	Mesh3dZcalendarNepali     Mesh3dZcalendar = "nepali"
	Mesh3dZcalendarPersian    Mesh3dZcalendar = "persian"
	Mesh3dZcalendarTaiwan     Mesh3dZcalendar = "taiwan"
	Mesh3dZcalendarThai       Mesh3dZcalendar = "thai"
	Mesh3dZcalendarUmmalqura  Mesh3dZcalendar = "ummalqura"
)

// Mesh3dColorbarTickfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type Mesh3dColorbarTickfontLineposition string

const (
	// Flags
	Mesh3dColorbarTickfontLinepositionUnder   Mesh3dColorbarTickfontLineposition = "under"
	Mesh3dColorbarTickfontLinepositionOver    Mesh3dColorbarTickfontLineposition = "over"
	Mesh3dColorbarTickfontLinepositionThrough Mesh3dColorbarTickfontLineposition = "through"

	// Extra
	Mesh3dColorbarTickfontLinepositionNone Mesh3dColorbarTickfontLineposition = "none"
)

// Mesh3dColorbarTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type Mesh3dColorbarTitleFontLineposition string

const (
	// Flags
	Mesh3dColorbarTitleFontLinepositionUnder   Mesh3dColorbarTitleFontLineposition = "under"
	Mesh3dColorbarTitleFontLinepositionOver    Mesh3dColorbarTitleFontLineposition = "over"
	Mesh3dColorbarTitleFontLinepositionThrough Mesh3dColorbarTitleFontLineposition = "through"

	// Extra
	Mesh3dColorbarTitleFontLinepositionNone Mesh3dColorbarTitleFontLineposition = "none"
)

// Mesh3dHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
type Mesh3dHoverinfo string

const (
	// Flags
	Mesh3dHoverinfoX    Mesh3dHoverinfo = "x"
	Mesh3dHoverinfoY    Mesh3dHoverinfo = "y"
	Mesh3dHoverinfoZ    Mesh3dHoverinfo = "z"
	Mesh3dHoverinfoText Mesh3dHoverinfo = "text"
	Mesh3dHoverinfoName Mesh3dHoverinfo = "name"

	// Extra
	Mesh3dHoverinfoAll  Mesh3dHoverinfo = "all"
	Mesh3dHoverinfoNone Mesh3dHoverinfo = "none"
	Mesh3dHoverinfoSkip Mesh3dHoverinfo = "skip"
)

// Mesh3dHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type Mesh3dHoverlabelFontLineposition string

const (
	// Flags
	Mesh3dHoverlabelFontLinepositionUnder   Mesh3dHoverlabelFontLineposition = "under"
	Mesh3dHoverlabelFontLinepositionOver    Mesh3dHoverlabelFontLineposition = "over"
	Mesh3dHoverlabelFontLinepositionThrough Mesh3dHoverlabelFontLineposition = "through"

	// Extra
	Mesh3dHoverlabelFontLinepositionNone Mesh3dHoverlabelFontLineposition = "none"
)

// Mesh3dLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type Mesh3dLegendgrouptitleFontLineposition string

const (
	// Flags
	Mesh3dLegendgrouptitleFontLinepositionUnder   Mesh3dLegendgrouptitleFontLineposition = "under"
	Mesh3dLegendgrouptitleFontLinepositionOver    Mesh3dLegendgrouptitleFontLineposition = "over"
	Mesh3dLegendgrouptitleFontLinepositionThrough Mesh3dLegendgrouptitleFontLineposition = "through"

	// Extra
	Mesh3dLegendgrouptitleFontLinepositionNone Mesh3dLegendgrouptitleFontLineposition = "none"
)
