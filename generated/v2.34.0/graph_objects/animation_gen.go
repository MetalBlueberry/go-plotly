package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

// Animation Plot animation options
type Animation struct {

	// Direction
	// arrayOK: false
	// default: forward
	// type: enumerated
	// The direction in which to play the frames triggered by the animation call
	// .schema.animation.direction
	Direction AnimationDirection `json:"direction,omitempty"`

	// Frame
	// arrayOK: false
	// role: Object
	// .schema.animation.frame
	Frame *AnimationFrame `json:"frame,omitempty"`

	// Fromcurrent
	// arrayOK: false
	// type: boolean
	// Play frames starting at the current frame instead of the beginning.
	// .schema.animation.fromcurrent
	Fromcurrent types.BoolType `json:"fromcurrent,omitempty"`

	// Mode
	// arrayOK: false
	// default: afterall
	// type: enumerated
	// Describes how a new animate call interacts with currently-running animations. If `immediate`, current animations are interrupted and the new animation is started. If `next`, the current frame is allowed to complete, after which the new animation is started. If `afterall` all existing frames are animated to completion before the new animation is started.
	// .schema.animation.mode
	Mode AnimationMode `json:"mode,omitempty"`

	// Transition
	// arrayOK: false
	// role: Object
	// .schema.animation.transition
	Transition *AnimationTransition `json:"transition,omitempty"`
}

// AnimationFrame
type AnimationFrame struct {

	// Duration
	// arrayOK: false
	// type: number
	// The duration in milliseconds of each frame. If greater than the frame duration, it will be limited to the frame duration.
	// .schema.animation.frame.duration
	Duration types.NumberType `json:"duration,omitempty"`

	// Redraw
	// arrayOK: false
	// type: boolean
	// Redraw the plot at completion of the transition. This is desirable for transitions that include properties that cannot be transitioned, but may significantly slow down updates that do not require a full redraw of the plot
	// .schema.animation.frame.redraw
	Redraw types.BoolType `json:"redraw,omitempty"`
}

// AnimationTransition
type AnimationTransition struct {

	// Duration
	// arrayOK: false
	// type: number
	// The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.
	// .schema.animation.transition.duration
	Duration types.NumberType `json:"duration,omitempty"`

	// Easing
	// arrayOK: false
	// default: cubic-in-out
	// type: enumerated
	// The easing function used for the transition
	// .schema.animation.transition.easing
	Easing AnimationTransitionEasing `json:"easing,omitempty"`

	// Ordering
	// arrayOK: false
	// default: layout first
	// type: enumerated
	// Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.
	// .schema.animation.transition.ordering
	Ordering AnimationTransitionOrdering `json:"ordering,omitempty"`
}

// AnimationDirection The direction in which to play the frames triggered by the animation call
// .schema.animation.direction
type AnimationDirection string

const (
	AnimationDirectionForward AnimationDirection = "forward"
	AnimationDirectionReverse AnimationDirection = "reverse"
)

// AnimationMode Describes how a new animate call interacts with currently-running animations. If `immediate`, current animations are interrupted and the new animation is started. If `next`, the current frame is allowed to complete, after which the new animation is started. If `afterall` all existing frames are animated to completion before the new animation is started.
// .schema.animation.mode
type AnimationMode string

const (
	AnimationModeImmediate AnimationMode = "immediate"
	AnimationModeNext      AnimationMode = "next"
	AnimationModeAfterall  AnimationMode = "afterall"
)

// AnimationTransitionEasing The easing function used for the transition
// .schema.animation.transition.easing
type AnimationTransitionEasing string

const (
	AnimationTransitionEasingLinear       AnimationTransitionEasing = "linear"
	AnimationTransitionEasingQuad         AnimationTransitionEasing = "quad"
	AnimationTransitionEasingCubic        AnimationTransitionEasing = "cubic"
	AnimationTransitionEasingSin          AnimationTransitionEasing = "sin"
	AnimationTransitionEasingExp          AnimationTransitionEasing = "exp"
	AnimationTransitionEasingCircle       AnimationTransitionEasing = "circle"
	AnimationTransitionEasingElastic      AnimationTransitionEasing = "elastic"
	AnimationTransitionEasingBack         AnimationTransitionEasing = "back"
	AnimationTransitionEasingBounce       AnimationTransitionEasing = "bounce"
	AnimationTransitionEasingLinearIn     AnimationTransitionEasing = "linear-in"
	AnimationTransitionEasingQuadIn       AnimationTransitionEasing = "quad-in"
	AnimationTransitionEasingCubicIn      AnimationTransitionEasing = "cubic-in"
	AnimationTransitionEasingSinIn        AnimationTransitionEasing = "sin-in"
	AnimationTransitionEasingExpIn        AnimationTransitionEasing = "exp-in"
	AnimationTransitionEasingCircleIn     AnimationTransitionEasing = "circle-in"
	AnimationTransitionEasingElasticIn    AnimationTransitionEasing = "elastic-in"
	AnimationTransitionEasingBackIn       AnimationTransitionEasing = "back-in"
	AnimationTransitionEasingBounceIn     AnimationTransitionEasing = "bounce-in"
	AnimationTransitionEasingLinearOut    AnimationTransitionEasing = "linear-out"
	AnimationTransitionEasingQuadOut      AnimationTransitionEasing = "quad-out"
	AnimationTransitionEasingCubicOut     AnimationTransitionEasing = "cubic-out"
	AnimationTransitionEasingSinOut       AnimationTransitionEasing = "sin-out"
	AnimationTransitionEasingExpOut       AnimationTransitionEasing = "exp-out"
	AnimationTransitionEasingCircleOut    AnimationTransitionEasing = "circle-out"
	AnimationTransitionEasingElasticOut   AnimationTransitionEasing = "elastic-out"
	AnimationTransitionEasingBackOut      AnimationTransitionEasing = "back-out"
	AnimationTransitionEasingBounceOut    AnimationTransitionEasing = "bounce-out"
	AnimationTransitionEasingLinearInOut  AnimationTransitionEasing = "linear-in-out"
	AnimationTransitionEasingQuadInOut    AnimationTransitionEasing = "quad-in-out"
	AnimationTransitionEasingCubicInOut   AnimationTransitionEasing = "cubic-in-out"
	AnimationTransitionEasingSinInOut     AnimationTransitionEasing = "sin-in-out"
	AnimationTransitionEasingExpInOut     AnimationTransitionEasing = "exp-in-out"
	AnimationTransitionEasingCircleInOut  AnimationTransitionEasing = "circle-in-out"
	AnimationTransitionEasingElasticInOut AnimationTransitionEasing = "elastic-in-out"
	AnimationTransitionEasingBackInOut    AnimationTransitionEasing = "back-in-out"
	AnimationTransitionEasingBounceInOut  AnimationTransitionEasing = "bounce-in-out"
)

// AnimationTransitionOrdering Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.
// .schema.animation.transition.ordering
type AnimationTransitionOrdering string

const (
	AnimationTransitionOrderingLayoutFirst AnimationTransitionOrdering = "layout first"
	AnimationTransitionOrderingTracesFirst AnimationTransitionOrdering = "traces first"
)
