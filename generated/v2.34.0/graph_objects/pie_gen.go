package grob

// Code generated by go-plotly/generator. DO NOT EDIT.

import (
	"encoding/json"
	"github.com/MetalBlueberry/go-plotly/pkg/types"
)

var TraceTypePie types.TraceType = "pie"

func (t *Pie) GetType() types.TraceType {
	return TraceTypePie
}

func (t *Pie) MarshalJSON() ([]byte, error) {
	// Define the custom JSON structure including the "type" field
	type Alias Pie
	return json.Marshal(&struct {
		Type types.TraceType `json:"type"`
		*Alias
	}{
		Type:  t.GetType(), // Add your desired default value here
		Alias: (*Alias)(t), // Embed the original struct fields
	})
}

// Pie A data visualized by the sectors of the pie is set in `values`. The sector labels are set in `labels`. The sector colors are set in `marker.colors`
type Pie struct {

	// Automargin
	// arrayOK: false
	// type: boolean
	// Determines whether outside text labels can push the margins.
	Automargin types.Bool `json:"automargin,omitempty"`

	// Customdata
	// arrayOK: false
	// type: data_array
	// Assigns extra data each datum. This may be useful when listening to hover, click and selection events. Note that, *scatter* traces also appends customdata items in the markers DOM elements
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Customdata *types.DataArrayType `json:"customdata,omitempty"`

	// Customdatasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `customdata`.
	Customdatasrc types.String `json:"customdatasrc,omitempty"`

	// Direction
	// arrayOK: false
	// default: counterclockwise
	// type: enumerated
	// Specifies the direction at which succeeding sectors follow one another.
	Direction PieDirection `json:"direction,omitempty"`

	// Dlabel
	// arrayOK: false
	// type: number
	// Sets the label step. See `label0` for more info.
	Dlabel float64 `json:"dlabel,omitempty"`

	// Domain
	// arrayOK: false
	// role: Object
	Domain *PieDomain `json:"domain,omitempty"`

	// Hole
	// arrayOK: false
	// type: number
	// Sets the fraction of the radius to cut out of the pie. Use this to make a donut chart.
	Hole float64 `json:"hole,omitempty"`

	// Hoverinfo
	// arrayOK: true
	// default: all
	// type: flaglist
	// Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
	Hoverinfo *types.ArrayOK[*PieHoverinfo] `json:"hoverinfo,omitempty"`

	// Hoverinfosrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hoverinfo`.
	Hoverinfosrc types.String `json:"hoverinfosrc,omitempty"`

	// Hoverlabel
	// arrayOK: false
	// role: Object
	Hoverlabel *PieHoverlabel `json:"hoverlabel,omitempty"`

	// Hovertemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information that appear on hover box. Note that this will override `hoverinfo`. Variables are inserted using %{variable}, for example "y: %{y}" as well as %{xother}, {%_xother}, {%_xother_}, {%xother_}. When showing info for several points, *xother* will be added to those with different x positions from the first point. An underscore before or after *(x|y)other* will add a space on that side, only when this field is shown. Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. The variables available in `hovertemplate` are the ones emitted as event data described at this link https://plotly.com/javascript/plotlyjs-events/#event-data. Additionally, every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`. Anything contained in tag `<extra>` is displayed in the secondary box, for example "<extra>{fullData.name}</extra>". To hide the secondary box completely, use an empty tag `<extra></extra>`.
	Hovertemplate *types.ArrayOK[*types.String] `json:"hovertemplate,omitempty"`

	// Hovertemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertemplate`.
	Hovertemplatesrc types.String `json:"hovertemplatesrc,omitempty"`

	// Hovertext
	// arrayOK: true
	// type: string
	// Sets hover text elements associated with each sector. If a single string, the same string appears for all data points. If an array of string, the items are mapped in order of this trace's sectors. To be seen, trace `hoverinfo` must contain a *text* flag.
	Hovertext *types.ArrayOK[*types.String] `json:"hovertext,omitempty"`

	// Hovertextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hovertext`.
	Hovertextsrc types.String `json:"hovertextsrc,omitempty"`

	// Ids
	// arrayOK: false
	// type: data_array
	// Assigns id labels to each datum. These ids for object constancy of data points during animation. Should be an array of strings, not numbers or any other type.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Ids *types.DataArrayType `json:"ids,omitempty"`

	// Idssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ids`.
	Idssrc types.String `json:"idssrc,omitempty"`

	// Insidetextfont
	// arrayOK: false
	// role: Object
	Insidetextfont *PieInsidetextfont `json:"insidetextfont,omitempty"`

	// Insidetextorientation
	// arrayOK: false
	// default: auto
	// type: enumerated
	// Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.
	Insidetextorientation PieInsidetextorientation `json:"insidetextorientation,omitempty"`

	// Label0
	// arrayOK: false
	// type: number
	// Alternate to `labels`. Builds a numeric set of labels. Use with `dlabel` where `label0` is the starting label and `dlabel` the step.
	Label0 float64 `json:"label0,omitempty"`

	// Labels
	// arrayOK: false
	// type: data_array
	// Sets the sector labels. If `labels` entries are duplicated, we sum associated `values` or simply count occurrences if `values` is not provided. For other array attributes (including color) we use the first non-empty entry among all occurrences of the label.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Labels *types.DataArrayType `json:"labels,omitempty"`

	// Labelssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `labels`.
	Labelssrc types.String `json:"labelssrc,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show this trace in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend types.String `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for this trace. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	Legendgroup types.String `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// arrayOK: false
	// role: Object
	Legendgrouptitle *PieLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for this trace. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items. When having unranked or equal rank items shapes would be displayed after traces i.e. according to their order in data and layout.
	Legendrank float64 `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for this trace.
	Legendwidth float64 `json:"legendwidth,omitempty"`

	// Marker
	// arrayOK: false
	// role: Object
	Marker *PieMarker `json:"marker,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information associated with this trace that can be used in various text attributes. Attributes such as trace `name`, graph, axis and colorbar `title.text`, annotation `text` `rangeselector`, `updatemenues` and `sliders` `label` text all support `meta`. To access the trace `meta` values in an attribute in the same trace, simply use `%{meta[i]}` where `i` is the index or key of the `meta` item in question. To access trace `meta` in layout attributes, use `%{data[n[.meta[i]}` where `i` is the index or key of the `meta` and `n` is the trace index.
	Meta *types.ArrayOK[*interface{}] `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc types.String `json:"metasrc,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets the trace name. The trace name appears as the legend item and on hover.
	Name types.String `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the trace.
	Opacity float64 `json:"opacity,omitempty"`

	// Outsidetextfont
	// arrayOK: false
	// role: Object
	Outsidetextfont *PieOutsidetextfont `json:"outsidetextfont,omitempty"`

	// Pull
	// arrayOK: true
	// type: number
	// Sets the fraction of larger radius to pull the sectors out from the center. This can be a constant to pull all slices apart from each other equally or an array to highlight one or more slices.
	Pull *types.ArrayOK[*float64] `json:"pull,omitempty"`

	// Pullsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `pull`.
	Pullsrc types.String `json:"pullsrc,omitempty"`

	// Rotation
	// arrayOK: false
	// type: angle
	// Instead of the first slice starting at 12 o'clock, rotate to some other angle.
	Rotation float64 `json:"rotation,omitempty"`

	// Scalegroup
	// arrayOK: false
	// type: string
	// If there are multiple pie charts that should be sized according to their totals, link them by providing a non-empty group id here shared by every trace in the same group.
	Scalegroup types.String `json:"scalegroup,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not an item corresponding to this trace is shown in the legend.
	Showlegend types.Bool `json:"showlegend,omitempty"`

	// Sort
	// arrayOK: false
	// type: boolean
	// Determines whether or not the sectors are reordered from largest to smallest.
	Sort types.Bool `json:"sort,omitempty"`

	// Stream
	// arrayOK: false
	// role: Object
	Stream *PieStream `json:"stream,omitempty"`

	// Text
	// arrayOK: false
	// type: data_array
	// Sets text elements associated with each sector. If trace `textinfo` contains a *text* flag, these elements will be seen on the chart. If trace `hoverinfo` contains a *text* flag and *hovertext* is not set, these elements will be seen in the hover labels.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Text *types.DataArrayType `json:"text,omitempty"`

	// Textfont
	// arrayOK: false
	// role: Object
	Textfont *PieTextfont `json:"textfont,omitempty"`

	// Textinfo
	// arrayOK: false
	// default: %!s(<nil>)
	// type: flaglist
	// Determines which trace information appear on the graph.
	Textinfo PieTextinfo `json:"textinfo,omitempty"`

	// Textposition
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Specifies the location of the `textinfo`.
	Textposition *types.ArrayOK[*PieTextposition] `json:"textposition,omitempty"`

	// Textpositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textposition`.
	Textpositionsrc types.String `json:"textpositionsrc,omitempty"`

	// Textsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `text`.
	Textsrc types.String `json:"textsrc,omitempty"`

	// Texttemplate
	// arrayOK: true
	// type: string
	// Template string used for rendering the information text that appear on points. Note that this will override `textinfo`. Variables are inserted using %{variable}, for example "y: %{y}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{y:$.2f}". https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{2019-01-01|%A}". https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. Every attributes that can be specified per-point (the ones that are `arrayOk: true`) are available. Finally, the template string has access to variables `label`, `color`, `value`, `percent` and `text`.
	Texttemplate *types.ArrayOK[*types.String] `json:"texttemplate,omitempty"`

	// Texttemplatesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `texttemplate`.
	Texttemplatesrc types.String `json:"texttemplatesrc,omitempty"`

	// Title
	// arrayOK: false
	// role: Object
	Title *PieTitle `json:"title,omitempty"`

	// Transforms
	// role: Object
	// items: PieTransform
	Transforms []PieTransform `json:"transforms,omitempty"`

	// Uid
	// arrayOK: false
	// type: string
	// Assign an id to this trace, Use this to provide object constancy between traces during animations and transitions.
	Uid types.String `json:"uid,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of some user-driven changes to the trace: `constraintrange` in `parcoords` traces, as well as some `editable: true` modifications such as `name` and `colorbar.title`. Defaults to `layout.uirevision`. Note that other user-driven trace attribute changes are controlled by `layout` attributes: `trace.visible` is controlled by `layout.legend.uirevision`, `selectedpoints` is controlled by `layout.selectionrevision`, and `colorbar.(x|y)` (accessible with `config: {editable: true}`) is controlled by `layout.editrevision`. Trace changes are tracked by `uid`, which only falls back on trace index if no `uid` is provided. So if your app can add/remove traces before the end of the `data` array, such that the same trace has a different index, you can still preserve user-driven changes if you give each trace a `uid` that stays with it as it moves.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Values
	// arrayOK: false
	// type: data_array
	// Sets the values of the sectors. If omitted, we count occurrences of each label.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Values *types.DataArrayType `json:"values,omitempty"`

	// Valuessrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `values`.
	Valuessrc types.String `json:"valuessrc,omitempty"`

	// Visible
	// arrayOK: false
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible PieVisible `json:"visible,omitempty"`
}

// PieDomain
type PieDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this pie trace .
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this pie trace .
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this pie trace (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this pie trace (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// PieHoverlabelFont Sets the font used in hover labels.
type PieHoverlabelFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*PieHoverlabelFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*PieHoverlabelFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*PieHoverlabelFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*PieHoverlabelFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// PieHoverlabel
type PieHoverlabel struct {

	// Align
	// arrayOK: true
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align *types.ArrayOK[*PieHoverlabelAlign] `json:"align,omitempty"`

	// Alignsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `align`.
	Alignsrc types.String `json:"alignsrc,omitempty"`

	// Bgcolor
	// arrayOK: true
	// type: color
	// Sets the background color of the hover labels for this trace
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.String `json:"bgcolorsrc,omitempty"`

	// Bordercolor
	// arrayOK: true
	// type: color
	// Sets the border color of the hover labels for this trace.
	Bordercolor *types.ArrayOK[*types.Color] `json:"bordercolor,omitempty"`

	// Bordercolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bordercolor`.
	Bordercolorsrc types.String `json:"bordercolorsrc,omitempty"`

	// Font
	// arrayOK: false
	// role: Object
	Font *PieHoverlabelFont `json:"font,omitempty"`

	// Namelength
	// arrayOK: true
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength *types.ArrayOK[*int64] `json:"namelength,omitempty"`

	// Namelengthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `namelength`.
	Namelengthsrc types.String `json:"namelengthsrc,omitempty"`
}

// PieInsidetextfont Sets the font used for `textinfo` lying inside the sector.
type PieInsidetextfont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*PieInsidetextfontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*PieInsidetextfontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*PieInsidetextfontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*PieInsidetextfontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// PieLegendgrouptitleFont Sets this legend group's title font.
type PieLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color types.Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family types.String `json:"family,omitempty"`

	// Lineposition
	// arrayOK: false
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition PieLegendgrouptitleFontLineposition `json:"lineposition,omitempty"`

	// Shadow
	// arrayOK: false
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow types.String `json:"shadow,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`

	// Style
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style PieLegendgrouptitleFontStyle `json:"style,omitempty"`

	// Textcase
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase PieLegendgrouptitleFontTextcase `json:"textcase,omitempty"`

	// Variant
	// arrayOK: false
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant PieLegendgrouptitleFontVariant `json:"variant,omitempty"`

	// Weight
	// arrayOK: false
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight int64 `json:"weight,omitempty"`
}

// PieLegendgrouptitle
type PieLegendgrouptitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *PieLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text types.String `json:"text,omitempty"`
}

// PieMarkerLine
type PieMarkerLine struct {

	// Color
	// arrayOK: true
	// type: color
	// Sets the color of the line enclosing each sector.
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Width
	// arrayOK: true
	// type: number
	// Sets the width (in px) of the line enclosing each sector.
	Width *types.ArrayOK[*float64] `json:"width,omitempty"`

	// Widthsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `width`.
	Widthsrc types.String `json:"widthsrc,omitempty"`
}

// PieMarkerPattern Sets the pattern within the marker.
type PieMarkerPattern struct {

	// Bgcolor
	// arrayOK: true
	// type: color
	// When there is no colorscale sets the color of background pattern fill. Defaults to a `marker.color` background when `fillmode` is *overlay*. Otherwise, defaults to a transparent background.
	Bgcolor *types.ArrayOK[*types.Color] `json:"bgcolor,omitempty"`

	// Bgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `bgcolor`.
	Bgcolorsrc types.String `json:"bgcolorsrc,omitempty"`

	// Fgcolor
	// arrayOK: true
	// type: color
	// When there is no colorscale sets the color of foreground pattern fill. Defaults to a `marker.color` background when `fillmode` is *replace*. Otherwise, defaults to dark grey or white to increase contrast with the `bgcolor`.
	Fgcolor *types.ArrayOK[*types.Color] `json:"fgcolor,omitempty"`

	// Fgcolorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `fgcolor`.
	Fgcolorsrc types.String `json:"fgcolorsrc,omitempty"`

	// Fgopacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the foreground pattern fill. Defaults to a 0.5 when `fillmode` is *overlay*. Otherwise, defaults to 1.
	Fgopacity float64 `json:"fgopacity,omitempty"`

	// Fillmode
	// arrayOK: false
	// default: replace
	// type: enumerated
	// Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.
	Fillmode PieMarkerPatternFillmode `json:"fillmode,omitempty"`

	// Shape
	// arrayOK: true
	// default:
	// type: enumerated
	// Sets the shape of the pattern fill. By default, no pattern is used for filling the area.
	Shape *types.ArrayOK[*PieMarkerPatternShape] `json:"shape,omitempty"`

	// Shapesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shape`.
	Shapesrc types.String `json:"shapesrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	// Sets the size of unit squares of the pattern fill in pixels, which corresponds to the interval of repetition of the pattern.
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Solidity
	// arrayOK: true
	// type: number
	// Sets the solidity of the pattern fill. Solidity is roughly the fraction of the area filled by the pattern. Solidity of 0 shows only the background color without pattern and solidty of 1 shows only the foreground color without pattern.
	Solidity *types.ArrayOK[*float64] `json:"solidity,omitempty"`

	// Soliditysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `solidity`.
	Soliditysrc types.String `json:"soliditysrc,omitempty"`
}

// PieMarker
type PieMarker struct {

	// Colors
	// arrayOK: false
	// type: data_array
	// Sets the color of each sector. If not specified, the default trace color set is used to pick the sector colors.
	// use types.DataArray to pass any slice of data
	// use types.BDataArray to pass data in binary format as provided by numpy
	Colors *types.DataArrayType `json:"colors,omitempty"`

	// Colorssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `colors`.
	Colorssrc types.String `json:"colorssrc,omitempty"`

	// Line
	// arrayOK: false
	// role: Object
	Line *PieMarkerLine `json:"line,omitempty"`

	// Pattern
	// arrayOK: false
	// role: Object
	Pattern *PieMarkerPattern `json:"pattern,omitempty"`
}

// PieOutsidetextfont Sets the font used for `textinfo` lying outside the sector.
type PieOutsidetextfont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*PieOutsidetextfontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*PieOutsidetextfontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*PieOutsidetextfontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*PieOutsidetextfontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// PieStream
type PieStream struct {

	// Maxpoints
	// arrayOK: false
	// type: number
	// Sets the maximum number of points to keep on the plots from an incoming stream. If `maxpoints` is set to *50*, only the newest 50 points will be displayed on the plot.
	Maxpoints float64 `json:"maxpoints,omitempty"`

	// Token
	// arrayOK: false
	// type: string
	// The stream id number links a data trace on a plot with a stream. See https://chart-studio.plotly.com/settings for more details.
	Token types.String `json:"token,omitempty"`
}

// PieTextfont Sets the font used for `textinfo`.
type PieTextfont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*PieTextfontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*PieTextfontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*PieTextfontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*PieTextfontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// PieTitleFont Sets the font used for `title`. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type PieTitleFont struct {

	// Color
	// arrayOK: true
	// type: color
	//
	Color *types.ArrayOK[*types.Color] `json:"color,omitempty"`

	// Colorsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `color`.
	Colorsrc types.String `json:"colorsrc,omitempty"`

	// Family
	// arrayOK: true
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family *types.ArrayOK[*types.String] `json:"family,omitempty"`

	// Familysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `family`.
	Familysrc types.String `json:"familysrc,omitempty"`

	// Lineposition
	// arrayOK: true
	// default: none
	// type: flaglist
	// Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
	Lineposition *types.ArrayOK[*PieTitleFontLineposition] `json:"lineposition,omitempty"`

	// Linepositionsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `lineposition`.
	Linepositionsrc types.String `json:"linepositionsrc,omitempty"`

	// Shadow
	// arrayOK: true
	// type: string
	// Sets the shape and color of the shadow behind text. *auto* places minimal shadow and applies contrast text font color. See https://developer.mozilla.org/en-US/docs/Web/CSS/text-shadow for additional options.
	Shadow *types.ArrayOK[*types.String] `json:"shadow,omitempty"`

	// Shadowsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `shadow`.
	Shadowsrc types.String `json:"shadowsrc,omitempty"`

	// Size
	// arrayOK: true
	// type: number
	//
	Size *types.ArrayOK[*float64] `json:"size,omitempty"`

	// Sizesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `size`.
	Sizesrc types.String `json:"sizesrc,omitempty"`

	// Style
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets whether a font should be styled with a normal or italic face from its family.
	Style *types.ArrayOK[*PieTitleFontStyle] `json:"style,omitempty"`

	// Stylesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `style`.
	Stylesrc types.String `json:"stylesrc,omitempty"`

	// Textcase
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
	Textcase *types.ArrayOK[*PieTitleFontTextcase] `json:"textcase,omitempty"`

	// Textcasesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `textcase`.
	Textcasesrc types.String `json:"textcasesrc,omitempty"`

	// Variant
	// arrayOK: true
	// default: normal
	// type: enumerated
	// Sets the variant of the font.
	Variant *types.ArrayOK[*PieTitleFontVariant] `json:"variant,omitempty"`

	// Variantsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `variant`.
	Variantsrc types.String `json:"variantsrc,omitempty"`

	// Weight
	// arrayOK: true
	// type: integer
	// Sets the weight (or boldness) of the font.
	Weight *types.ArrayOK[*int64] `json:"weight,omitempty"`

	// Weightsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `weight`.
	Weightsrc types.String `json:"weightsrc,omitempty"`
}

// PieTitle
type PieTitle struct {

	// Font
	// arrayOK: false
	// role: Object
	Font *PieTitleFont `json:"font,omitempty"`

	// Position
	// arrayOK: false
	// default: %!s(<nil>)
	// type: enumerated
	// Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.
	Position PieTitlePosition `json:"position,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the chart. If it is empty, no title is displayed. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text types.String `json:"text,omitempty"`
}

// PieTransform WARNING: All transforms are deprecated and may be removed from the API in next major version. An array of operations that manipulate the trace data, for example filtering or sorting the data arrays.
type PieTransform struct {
}

// PieDirection Specifies the direction at which succeeding sectors follow one another.
type PieDirection string

const (
	PieDirectionClockwise        PieDirection = "clockwise"
	PieDirectionCounterclockwise PieDirection = "counterclockwise"
)

// PieHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type PieHoverlabelAlign string

const (
	PieHoverlabelAlignLeft  PieHoverlabelAlign = "left"
	PieHoverlabelAlignRight PieHoverlabelAlign = "right"
	PieHoverlabelAlignAuto  PieHoverlabelAlign = "auto"
)

// PieHoverlabelFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type PieHoverlabelFontStyle string

const (
	PieHoverlabelFontStyleNormal PieHoverlabelFontStyle = "normal"
	PieHoverlabelFontStyleItalic PieHoverlabelFontStyle = "italic"
)

// PieHoverlabelFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type PieHoverlabelFontTextcase string

const (
	PieHoverlabelFontTextcaseNormal   PieHoverlabelFontTextcase = "normal"
	PieHoverlabelFontTextcaseWordCaps PieHoverlabelFontTextcase = "word caps"
	PieHoverlabelFontTextcaseUpper    PieHoverlabelFontTextcase = "upper"
	PieHoverlabelFontTextcaseLower    PieHoverlabelFontTextcase = "lower"
)

// PieHoverlabelFontVariant Sets the variant of the font.
type PieHoverlabelFontVariant string

const (
	PieHoverlabelFontVariantNormal        PieHoverlabelFontVariant = "normal"
	PieHoverlabelFontVariantSmallCaps     PieHoverlabelFontVariant = "small-caps"
	PieHoverlabelFontVariantAllSmallCaps  PieHoverlabelFontVariant = "all-small-caps"
	PieHoverlabelFontVariantAllPetiteCaps PieHoverlabelFontVariant = "all-petite-caps"
	PieHoverlabelFontVariantPetiteCaps    PieHoverlabelFontVariant = "petite-caps"
	PieHoverlabelFontVariantUnicase       PieHoverlabelFontVariant = "unicase"
)

// PieInsidetextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type PieInsidetextfontStyle string

const (
	PieInsidetextfontStyleNormal PieInsidetextfontStyle = "normal"
	PieInsidetextfontStyleItalic PieInsidetextfontStyle = "italic"
)

// PieInsidetextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type PieInsidetextfontTextcase string

const (
	PieInsidetextfontTextcaseNormal   PieInsidetextfontTextcase = "normal"
	PieInsidetextfontTextcaseWordCaps PieInsidetextfontTextcase = "word caps"
	PieInsidetextfontTextcaseUpper    PieInsidetextfontTextcase = "upper"
	PieInsidetextfontTextcaseLower    PieInsidetextfontTextcase = "lower"
)

// PieInsidetextfontVariant Sets the variant of the font.
type PieInsidetextfontVariant string

const (
	PieInsidetextfontVariantNormal        PieInsidetextfontVariant = "normal"
	PieInsidetextfontVariantSmallCaps     PieInsidetextfontVariant = "small-caps"
	PieInsidetextfontVariantAllSmallCaps  PieInsidetextfontVariant = "all-small-caps"
	PieInsidetextfontVariantAllPetiteCaps PieInsidetextfontVariant = "all-petite-caps"
	PieInsidetextfontVariantPetiteCaps    PieInsidetextfontVariant = "petite-caps"
	PieInsidetextfontVariantUnicase       PieInsidetextfontVariant = "unicase"
)

// PieInsidetextorientation Controls the orientation of the text inside chart sectors. When set to *auto*, text may be oriented in any direction in order to be as big as possible in the middle of a sector. The *horizontal* option orients text to be parallel with the bottom of the chart, and may make text smaller in order to achieve that goal. The *radial* option orients text along the radius of the sector. The *tangential* option orients text perpendicular to the radius of the sector.
type PieInsidetextorientation string

const (
	PieInsidetextorientationHorizontal PieInsidetextorientation = "horizontal"
	PieInsidetextorientationRadial     PieInsidetextorientation = "radial"
	PieInsidetextorientationTangential PieInsidetextorientation = "tangential"
	PieInsidetextorientationAuto       PieInsidetextorientation = "auto"
)

// PieLegendgrouptitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type PieLegendgrouptitleFontStyle string

const (
	PieLegendgrouptitleFontStyleNormal PieLegendgrouptitleFontStyle = "normal"
	PieLegendgrouptitleFontStyleItalic PieLegendgrouptitleFontStyle = "italic"
)

// PieLegendgrouptitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type PieLegendgrouptitleFontTextcase string

const (
	PieLegendgrouptitleFontTextcaseNormal   PieLegendgrouptitleFontTextcase = "normal"
	PieLegendgrouptitleFontTextcaseWordCaps PieLegendgrouptitleFontTextcase = "word caps"
	PieLegendgrouptitleFontTextcaseUpper    PieLegendgrouptitleFontTextcase = "upper"
	PieLegendgrouptitleFontTextcaseLower    PieLegendgrouptitleFontTextcase = "lower"
)

// PieLegendgrouptitleFontVariant Sets the variant of the font.
type PieLegendgrouptitleFontVariant string

const (
	PieLegendgrouptitleFontVariantNormal        PieLegendgrouptitleFontVariant = "normal"
	PieLegendgrouptitleFontVariantSmallCaps     PieLegendgrouptitleFontVariant = "small-caps"
	PieLegendgrouptitleFontVariantAllSmallCaps  PieLegendgrouptitleFontVariant = "all-small-caps"
	PieLegendgrouptitleFontVariantAllPetiteCaps PieLegendgrouptitleFontVariant = "all-petite-caps"
	PieLegendgrouptitleFontVariantPetiteCaps    PieLegendgrouptitleFontVariant = "petite-caps"
	PieLegendgrouptitleFontVariantUnicase       PieLegendgrouptitleFontVariant = "unicase"
)

// PieMarkerPatternFillmode Determines whether `marker.color` should be used as a default to `bgcolor` or a `fgcolor`.
type PieMarkerPatternFillmode string

const (
	PieMarkerPatternFillmodeReplace PieMarkerPatternFillmode = "replace"
	PieMarkerPatternFillmodeOverlay PieMarkerPatternFillmode = "overlay"
)

// PieMarkerPatternShape Sets the shape of the pattern fill. By default, no pattern is used for filling the area.
type PieMarkerPatternShape string

const (
	PieMarkerPatternShapeEmpty           PieMarkerPatternShape = ""
	PieMarkerPatternShapeSlash           PieMarkerPatternShape = "/"
	PieMarkerPatternShapeDoublebackslash PieMarkerPatternShape = "\\"
	PieMarkerPatternShapeX               PieMarkerPatternShape = "x"
	PieMarkerPatternShapeHyphenHyphen    PieMarkerPatternShape = "-"
	PieMarkerPatternShapeOr              PieMarkerPatternShape = "|"
	PieMarkerPatternShapePlus            PieMarkerPatternShape = "+"
	PieMarkerPatternShapeDot             PieMarkerPatternShape = "."
)

// PieOutsidetextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type PieOutsidetextfontStyle string

const (
	PieOutsidetextfontStyleNormal PieOutsidetextfontStyle = "normal"
	PieOutsidetextfontStyleItalic PieOutsidetextfontStyle = "italic"
)

// PieOutsidetextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type PieOutsidetextfontTextcase string

const (
	PieOutsidetextfontTextcaseNormal   PieOutsidetextfontTextcase = "normal"
	PieOutsidetextfontTextcaseWordCaps PieOutsidetextfontTextcase = "word caps"
	PieOutsidetextfontTextcaseUpper    PieOutsidetextfontTextcase = "upper"
	PieOutsidetextfontTextcaseLower    PieOutsidetextfontTextcase = "lower"
)

// PieOutsidetextfontVariant Sets the variant of the font.
type PieOutsidetextfontVariant string

const (
	PieOutsidetextfontVariantNormal        PieOutsidetextfontVariant = "normal"
	PieOutsidetextfontVariantSmallCaps     PieOutsidetextfontVariant = "small-caps"
	PieOutsidetextfontVariantAllSmallCaps  PieOutsidetextfontVariant = "all-small-caps"
	PieOutsidetextfontVariantAllPetiteCaps PieOutsidetextfontVariant = "all-petite-caps"
	PieOutsidetextfontVariantPetiteCaps    PieOutsidetextfontVariant = "petite-caps"
	PieOutsidetextfontVariantUnicase       PieOutsidetextfontVariant = "unicase"
)

// PieTextfontStyle Sets whether a font should be styled with a normal or italic face from its family.
type PieTextfontStyle string

const (
	PieTextfontStyleNormal PieTextfontStyle = "normal"
	PieTextfontStyleItalic PieTextfontStyle = "italic"
)

// PieTextfontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type PieTextfontTextcase string

const (
	PieTextfontTextcaseNormal   PieTextfontTextcase = "normal"
	PieTextfontTextcaseWordCaps PieTextfontTextcase = "word caps"
	PieTextfontTextcaseUpper    PieTextfontTextcase = "upper"
	PieTextfontTextcaseLower    PieTextfontTextcase = "lower"
)

// PieTextfontVariant Sets the variant of the font.
type PieTextfontVariant string

const (
	PieTextfontVariantNormal        PieTextfontVariant = "normal"
	PieTextfontVariantSmallCaps     PieTextfontVariant = "small-caps"
	PieTextfontVariantAllSmallCaps  PieTextfontVariant = "all-small-caps"
	PieTextfontVariantAllPetiteCaps PieTextfontVariant = "all-petite-caps"
	PieTextfontVariantPetiteCaps    PieTextfontVariant = "petite-caps"
	PieTextfontVariantUnicase       PieTextfontVariant = "unicase"
)

// PieTextposition Specifies the location of the `textinfo`.
type PieTextposition string

const (
	PieTextpositionInside  PieTextposition = "inside"
	PieTextpositionOutside PieTextposition = "outside"
	PieTextpositionAuto    PieTextposition = "auto"
	PieTextpositionNone    PieTextposition = "none"
)

// PieTitleFontStyle Sets whether a font should be styled with a normal or italic face from its family.
type PieTitleFontStyle string

const (
	PieTitleFontStyleNormal PieTitleFontStyle = "normal"
	PieTitleFontStyleItalic PieTitleFontStyle = "italic"
)

// PieTitleFontTextcase Sets capitalization of text. It can be used to make text appear in all-uppercase or all-lowercase, or with each word capitalized.
type PieTitleFontTextcase string

const (
	PieTitleFontTextcaseNormal   PieTitleFontTextcase = "normal"
	PieTitleFontTextcaseWordCaps PieTitleFontTextcase = "word caps"
	PieTitleFontTextcaseUpper    PieTitleFontTextcase = "upper"
	PieTitleFontTextcaseLower    PieTitleFontTextcase = "lower"
)

// PieTitleFontVariant Sets the variant of the font.
type PieTitleFontVariant string

const (
	PieTitleFontVariantNormal        PieTitleFontVariant = "normal"
	PieTitleFontVariantSmallCaps     PieTitleFontVariant = "small-caps"
	PieTitleFontVariantAllSmallCaps  PieTitleFontVariant = "all-small-caps"
	PieTitleFontVariantAllPetiteCaps PieTitleFontVariant = "all-petite-caps"
	PieTitleFontVariantPetiteCaps    PieTitleFontVariant = "petite-caps"
	PieTitleFontVariantUnicase       PieTitleFontVariant = "unicase"
)

// PieTitlePosition Specifies the location of the `title`. Note that the title's position used to be set by the now deprecated `titleposition` attribute.
type PieTitlePosition string

const (
	PieTitlePositionTopLeft      PieTitlePosition = "top left"
	PieTitlePositionTopCenter    PieTitlePosition = "top center"
	PieTitlePositionTopRight     PieTitlePosition = "top right"
	PieTitlePositionMiddleCenter PieTitlePosition = "middle center"
	PieTitlePositionBottomLeft   PieTitlePosition = "bottom left"
	PieTitlePositionBottomCenter PieTitlePosition = "bottom center"
	PieTitlePositionBottomRight  PieTitlePosition = "bottom right"
)

// PieVisible Determines whether or not this trace is visible. If *legendonly*, the trace is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type PieVisible interface{}

var (
	PieVisibleTrue       PieVisible = true
	PieVisibleFalse      PieVisible = false
	PieVisibleLegendonly PieVisible = "legendonly"
)

// PieHoverinfo Determines which trace information appear on hover. If `none` or `skip` are set, no information is displayed upon hovering. But, if `none` is set, click and hover events are still fired.
type PieHoverinfo string

const (
	// Flags
	PieHoverinfoLabel   PieHoverinfo = "label"
	PieHoverinfoText    PieHoverinfo = "text"
	PieHoverinfoValue   PieHoverinfo = "value"
	PieHoverinfoPercent PieHoverinfo = "percent"
	PieHoverinfoName    PieHoverinfo = "name"

	// Extra
	PieHoverinfoAll  PieHoverinfo = "all"
	PieHoverinfoNone PieHoverinfo = "none"
	PieHoverinfoSkip PieHoverinfo = "skip"
)

// PieHoverlabelFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type PieHoverlabelFontLineposition string

const (
	// Flags
	PieHoverlabelFontLinepositionUnder   PieHoverlabelFontLineposition = "under"
	PieHoverlabelFontLinepositionOver    PieHoverlabelFontLineposition = "over"
	PieHoverlabelFontLinepositionThrough PieHoverlabelFontLineposition = "through"

	// Extra
	PieHoverlabelFontLinepositionNone PieHoverlabelFontLineposition = "none"
)

// PieInsidetextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type PieInsidetextfontLineposition string

const (
	// Flags
	PieInsidetextfontLinepositionUnder   PieInsidetextfontLineposition = "under"
	PieInsidetextfontLinepositionOver    PieInsidetextfontLineposition = "over"
	PieInsidetextfontLinepositionThrough PieInsidetextfontLineposition = "through"

	// Extra
	PieInsidetextfontLinepositionNone PieInsidetextfontLineposition = "none"
)

// PieLegendgrouptitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type PieLegendgrouptitleFontLineposition string

const (
	// Flags
	PieLegendgrouptitleFontLinepositionUnder   PieLegendgrouptitleFontLineposition = "under"
	PieLegendgrouptitleFontLinepositionOver    PieLegendgrouptitleFontLineposition = "over"
	PieLegendgrouptitleFontLinepositionThrough PieLegendgrouptitleFontLineposition = "through"

	// Extra
	PieLegendgrouptitleFontLinepositionNone PieLegendgrouptitleFontLineposition = "none"
)

// PieOutsidetextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type PieOutsidetextfontLineposition string

const (
	// Flags
	PieOutsidetextfontLinepositionUnder   PieOutsidetextfontLineposition = "under"
	PieOutsidetextfontLinepositionOver    PieOutsidetextfontLineposition = "over"
	PieOutsidetextfontLinepositionThrough PieOutsidetextfontLineposition = "through"

	// Extra
	PieOutsidetextfontLinepositionNone PieOutsidetextfontLineposition = "none"
)

// PieTextfontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type PieTextfontLineposition string

const (
	// Flags
	PieTextfontLinepositionUnder   PieTextfontLineposition = "under"
	PieTextfontLinepositionOver    PieTextfontLineposition = "over"
	PieTextfontLinepositionThrough PieTextfontLineposition = "through"

	// Extra
	PieTextfontLinepositionNone PieTextfontLineposition = "none"
)

// PieTextinfo Determines which trace information appear on the graph.
type PieTextinfo string

const (
	// Flags
	PieTextinfoLabel   PieTextinfo = "label"
	PieTextinfoText    PieTextinfo = "text"
	PieTextinfoValue   PieTextinfo = "value"
	PieTextinfoPercent PieTextinfo = "percent"

	// Extra
	PieTextinfoNone PieTextinfo = "none"
)

// PieTitleFontLineposition Sets the kind of decoration line(s) with text, such as an *under*, *over* or *through* as well as combinations e.g. *under+over*, etc.
type PieTitleFontLineposition string

const (
	// Flags
	PieTitleFontLinepositionUnder   PieTitleFontLineposition = "under"
	PieTitleFontLinepositionOver    PieTitleFontLineposition = "over"
	PieTitleFontLinepositionThrough PieTitleFontLineposition = "through"

	// Extra
	PieTitleFontLinepositionNone PieTitleFontLineposition = "none"
)
