package grob

// Code generated by go-plotly/generator. DO NOT EDIT.// Layout Plot layout options
type Layout struct {

	// Activeselection
	// role: Object
	Activeselection *LayoutActiveselection `json:"activeselection,omitempty"`

	// Activeshape
	// role: Object
	Activeshape *LayoutActiveshape `json:"activeshape,omitempty"`

	// Annotations
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Annotations interface{} `json:"annotations,omitempty"`

	// Autosize
	// arrayOK: false
	// type: boolean
	// Determines whether or not a layout width or height that has been left undefined by the user is initialized on each relayout. Note that, regardless of this attribute, an undefined layout width or height is always initialized on the first call to plot.
	Autosize Bool `json:"autosize,omitempty"`

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.
	Autotypenumbers LayoutAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Barcornerradius
	// arrayOK: false
	// type: any
	// Sets the rounding of bar corners. May be an integer number of pixels, or a percentage of bar width (as a string ending in %).
	Barcornerradius interface{} `json:"barcornerradius,omitempty"`

	// Bargap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of adjacent location coordinates.
	Bargap float64 `json:"bargap,omitempty"`

	// Bargroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of the same location coordinate.
	Bargroupgap float64 `json:"bargroupgap,omitempty"`

	// Barmode
	// default: group
	// type: enumerated
	// Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
	Barmode LayoutBarmode `json:"barmode,omitempty"`

	// Barnorm
	// default:
	// type: enumerated
	// Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divided by the sum of all values at that location coordinate. *percent* is the same but multiplied by 100 to show percentages.
	Barnorm LayoutBarnorm `json:"barnorm,omitempty"`

	// Boxgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between boxes of adjacent location coordinates. Has no effect on traces that have *width* set.
	Boxgap float64 `json:"boxgap,omitempty"`

	// Boxgroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between boxes of the same location coordinate. Has no effect on traces that have *width* set.
	Boxgroupgap float64 `json:"boxgroupgap,omitempty"`

	// Boxmode
	// default: overlay
	// type: enumerated
	// Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes. Has no effect on traces that have *width* set.
	Boxmode LayoutBoxmode `json:"boxmode,omitempty"`

	// Calendar
	// default: gregorian
	// type: enumerated
	// Sets the default calendar system to use for interpreting and displaying dates throughout the plot.
	Calendar LayoutCalendar `json:"calendar,omitempty"`

	// Clickmode
	// default: event
	// type: flaglist
	// Determines the mode of single click interactions. *event* is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes *lasso* and *select*, but with no event data attached (kept for compatibility reasons). The *select* flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. *select* with `hovermode`: *x* can be confusing, consider explicitly setting `hovermode`: *closest* when using this feature. Selection events are sent accordingly as long as *event* flag is set as well. When the *event* flag is missing, `plotly_click` and `plotly_selected` events are not fired.
	Clickmode LayoutClickmode `json:"clickmode,omitempty"`

	// Coloraxis
	// role: Object
	Coloraxis *LayoutColoraxis `json:"coloraxis,omitempty"`

	// Colorscale
	// role: Object
	Colorscale *LayoutColorscale `json:"colorscale,omitempty"`

	// Colorway
	// arrayOK: false
	// type: colorlist
	// Sets the default trace colors.
	Colorway ColorList `json:"colorway,omitempty"`

	// Computed
	// arrayOK: false
	// type: any
	// Placeholder for exporting automargin-impacting values namely `margin.t`, `margin.b`, `margin.l` and `margin.r` in *full-json* mode.
	Computed interface{} `json:"computed,omitempty"`

	// Datarevision
	// arrayOK: false
	// type: any
	// If provided, a changed value tells `Plotly.react` that one or more data arrays has changed. This way you can modify arrays in-place rather than making a complete new copy for an incremental change. If NOT provided, `Plotly.react` assumes that data arrays are being treated as immutable, thus any data array with a different identity from its predecessor contains new data.
	Datarevision interface{} `json:"datarevision,omitempty"`

	// Dragmode
	// default: zoom
	// type: enumerated
	// Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.
	Dragmode LayoutDragmode `json:"dragmode,omitempty"`

	// Editrevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in `editable: true` configuration, other than trace names and axis titles. Defaults to `layout.uirevision`.
	Editrevision interface{} `json:"editrevision,omitempty"`

	// Extendfunnelareacolors
	// arrayOK: false
	// type: boolean
	// If `true`, the funnelarea slice colors (whether given by `funnelareacolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	Extendfunnelareacolors Bool `json:"extendfunnelareacolors,omitempty"`

	// Extendiciclecolors
	// arrayOK: false
	// type: boolean
	// If `true`, the icicle slice colors (whether given by `iciclecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	Extendiciclecolors Bool `json:"extendiciclecolors,omitempty"`

	// Extendpiecolors
	// arrayOK: false
	// type: boolean
	// If `true`, the pie slice colors (whether given by `piecolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	Extendpiecolors Bool `json:"extendpiecolors,omitempty"`

	// Extendsunburstcolors
	// arrayOK: false
	// type: boolean
	// If `true`, the sunburst slice colors (whether given by `sunburstcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	Extendsunburstcolors Bool `json:"extendsunburstcolors,omitempty"`

	// Extendtreemapcolors
	// arrayOK: false
	// type: boolean
	// If `true`, the treemap slice colors (whether given by `treemapcolorway` or inherited from `colorway`) will be extended to three times its original length by first repeating every color 20% lighter then each color 20% darker. This is intended to reduce the likelihood of reusing the same color when you have many slices, but you can set `false` to disable. Colors provided in the trace, using `marker.colors`, are never extended.
	Extendtreemapcolors Bool `json:"extendtreemapcolors,omitempty"`

	// Font
	// role: Object
	Font *LayoutFont `json:"font,omitempty"`

	// Funnelareacolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default funnelarea slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendfunnelareacolors`.
	Funnelareacolorway ColorList `json:"funnelareacolorway,omitempty"`

	// Funnelgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of adjacent location coordinates.
	Funnelgap float64 `json:"funnelgap,omitempty"`

	// Funnelgroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of the same location coordinate.
	Funnelgroupgap float64 `json:"funnelgroupgap,omitempty"`

	// Funnelmode
	// default: stack
	// type: enumerated
	// Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
	Funnelmode LayoutFunnelmode `json:"funnelmode,omitempty"`

	// Geo
	// role: Object
	Geo *LayoutGeo `json:"geo,omitempty"`

	// Grid
	// role: Object
	Grid *LayoutGrid `json:"grid,omitempty"`

	// Height
	// arrayOK: false
	// type: number
	// Sets the plot's height (in px).
	Height float64 `json:"height,omitempty"`

	// Hiddenlabels
	// arrayOK: false
	// type: data_array
	// hiddenlabels is the funnelarea & pie chart analog of visible:'legendonly' but it can contain many labels, and can simultaneously hide slices from several pies/funnelarea charts
	Hiddenlabels interface{} `json:"hiddenlabels,omitempty"`

	// Hiddenlabelssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `hiddenlabels`.
	Hiddenlabelssrc String `json:"hiddenlabelssrc,omitempty"`

	// Hidesources
	// arrayOK: false
	// type: boolean
	// Determines whether or not a text link citing the data source is placed at the bottom-right cored of the figure. Has only an effect only on graphs that have been generated via forked graphs from the Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise).
	Hidesources Bool `json:"hidesources,omitempty"`

	// Hoverdistance
	// arrayOK: false
	// type: integer
	// Sets the default distance (in pixels) to look for data to add hover labels (-1 means no cutoff, 0 means no looking for data). This is only a real distance for hovering on point-like objects, like scatter points. For area-like objects (bars, scatter fills, etc) hovering is on inside the area and off outside, but these objects will not supersede hover on point-like objects in case of conflict.
	Hoverdistance int64 `json:"hoverdistance,omitempty"`

	// Hoverlabel
	// role: Object
	Hoverlabel *LayoutHoverlabel `json:"hoverlabel,omitempty"`

	// Hovermode
	// default: closest
	// type: enumerated
	// Determines the mode of hover interactions. If *closest*, a single hoverlabel will appear for the *closest* point within the `hoverdistance`. If *x* (or *y*), multiple hoverlabels will appear for multiple points at the *closest* x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If *x unified* (or *y unified*), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.
	Hovermode LayoutHovermode `json:"hovermode,omitempty"`

	// Iciclecolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default icicle slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendiciclecolors`.
	Iciclecolorway ColorList `json:"iciclecolorway,omitempty"`

	// Images
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Images interface{} `json:"images,omitempty"`

	// Legend
	// role: Object
	Legend *LayoutLegend `json:"legend,omitempty"`

	// Mapbox
	// role: Object
	Mapbox *LayoutMapbox `json:"mapbox,omitempty"`

	// Margin
	// role: Object
	Margin *LayoutMargin `json:"margin,omitempty"`

	// Meta
	// arrayOK: true
	// type: any
	// Assigns extra meta information that can be used in various `text` attributes. Attributes such as the graph, axis and colorbar `title.text`, annotation `text` `trace.name` in legend items, `rangeselector`, `updatemenus` and `sliders` `label` text all support `meta`. One can access `meta` fields using template strings: `%{meta[i]}` where `i` is the index of the `meta` item in question. `meta` can also be an object for example `{key: value}` which can be accessed %{meta[key]}.
	Meta interface{} `json:"meta,omitempty"`

	// Metasrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `meta`.
	Metasrc String `json:"metasrc,omitempty"`

	// Minreducedheight
	// arrayOK: false
	// type: number
	// Minimum height of the plot with margin.automargin applied (in px)
	Minreducedheight float64 `json:"minreducedheight,omitempty"`

	// Minreducedwidth
	// arrayOK: false
	// type: number
	// Minimum width of the plot with margin.automargin applied (in px)
	Minreducedwidth float64 `json:"minreducedwidth,omitempty"`

	// Modebar
	// role: Object
	Modebar *LayoutModebar `json:"modebar,omitempty"`

	// Newselection
	// role: Object
	Newselection *LayoutNewselection `json:"newselection,omitempty"`

	// Newshape
	// role: Object
	Newshape *LayoutNewshape `json:"newshape,omitempty"`

	// PaperBgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the paper where the graph is drawn.
	PaperBgcolor Color `json:"paper_bgcolor,omitempty"`

	// Piecolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default pie slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendpiecolors`.
	Piecolorway ColorList `json:"piecolorway,omitempty"`

	// PlotBgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the plotting area in-between x and y axes.
	PlotBgcolor Color `json:"plot_bgcolor,omitempty"`

	// Polar
	// role: Object
	Polar *LayoutPolar `json:"polar,omitempty"`

	// Scattergap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between scatter points of adjacent location coordinates. Defaults to `bargap`.
	Scattergap float64 `json:"scattergap,omitempty"`

	// Scattermode
	// default: overlay
	// type: enumerated
	// Determines how scatter points at the same location coordinate are displayed on the graph. With *group*, the scatter points are plotted next to one another centered around the shared location. With *overlay*, the scatter points are plotted over one another, you might need to reduce *opacity* to see multiple scatter points.
	Scattermode LayoutScattermode `json:"scattermode,omitempty"`

	// Scene
	// role: Object
	Scene *LayoutScene `json:"scene,omitempty"`

	// Selectdirection
	// default: any
	// type: enumerated
	// When `dragmode` is set to *select*, this limits the selection of the drag to horizontal, vertical or diagonal. *h* only allows horizontal selection, *v* only vertical, *d* only diagonal and *any* sets no limit.
	Selectdirection LayoutSelectdirection `json:"selectdirection,omitempty"`

	// Selectionrevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in selected points from all traces.
	Selectionrevision interface{} `json:"selectionrevision,omitempty"`

	// Selections
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Selections interface{} `json:"selections,omitempty"`

	// Separators
	// arrayOK: false
	// type: string
	// Sets the decimal and thousand separators. For example, *. * puts a '.' before decimals and a space between thousands. In English locales, dflt is *.,* but other locales may alter this default.
	Separators String `json:"separators,omitempty"`

	// Shapes
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Shapes interface{} `json:"shapes,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not a legend is drawn. Default is `true` if there is a trace to show and any of these: a) Two or more traces would by default be shown in the legend. b) One pie trace is shown in the legend. c) One trace is explicitly given with `showlegend: true`.
	Showlegend Bool `json:"showlegend,omitempty"`

	// Sliders
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Sliders interface{} `json:"sliders,omitempty"`

	// Smith
	// role: Object
	Smith *LayoutSmith `json:"smith,omitempty"`

	// Spikedistance
	// arrayOK: false
	// type: integer
	// Sets the default distance (in pixels) to look for data to draw spikelines to (-1 means no cutoff, 0 means no looking for data). As with hoverdistance, distance does not apply to area-like objects. In addition, some objects can be hovered on but will not generate spikelines, such as scatter fills.
	Spikedistance int64 `json:"spikedistance,omitempty"`

	// Sunburstcolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default sunburst slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendsunburstcolors`.
	Sunburstcolorway ColorList `json:"sunburstcolorway,omitempty"`

	// Template
	// arrayOK: false
	// type: any
	// Default attributes to be applied to the plot. Templates can be created from existing plots using `Plotly.makeTemplate`, or created manually. They should be objects with format: `{layout: layoutTemplate, data: {[type]: [traceTemplate, ...]}, ...}` `layoutTemplate` and `traceTemplate` are objects matching the attribute structure of `layout` and a data trace.  Trace templates are applied cyclically to traces of each type. Container arrays (eg `annotations`) have special handling: An object ending in `defaults` (eg `annotationdefaults`) is applied to each array item. But if an item has a `templateitemname` key we look in the template array for an item with matching `name` and apply that instead. If no matching `name` is found we mark the item invisible. Any named template item not referenced is appended to the end of the array, so you can use this for a watermark annotation or a logo image, for example. To omit one of these items on the plot, make an item with matching `templateitemname` and `visible: false`.
	Template interface{} `json:"template,omitempty"`

	// Ternary
	// role: Object
	Ternary *LayoutTernary `json:"ternary,omitempty"`

	// Title
	// role: Object
	Title *LayoutTitle `json:"title,omitempty"`

	// Transition
	// role: Object
	Transition *LayoutTransition `json:"transition,omitempty"`

	// Treemapcolorway
	// arrayOK: false
	// type: colorlist
	// Sets the default treemap slice colors. Defaults to the main `colorway` used for trace colors. If you specify a new list here it can still be extended with lighter and darker colors, see `extendtreemapcolors`.
	Treemapcolorway ColorList `json:"treemapcolorway,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Used to allow user interactions with the plot to persist after `Plotly.react` calls that are unaware of these interactions. If `uirevision` is omitted, or if it is given and it changed from the previous `Plotly.react` call, the exact new figure is used. If `uirevision` is truthy and did NOT change, any attribute that has been affected by user interactions and did not receive a different value in the new figure will keep the interaction value. `layout.uirevision` attribute serves as the default for `uirevision` attributes in various sub-containers. For finer control you can set these sub-attributes directly. For example, if your app separately controls the data on the x and y axes you might set `xaxis.uirevision=*time*` and `yaxis.uirevision=*cost*`. Then if only the y data is changed, you can update `yaxis.uirevision=*quantity*` and the y axis range will reset but the x axis range will retain any user-driven zoom.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Uniformtext
	// role: Object
	Uniformtext *LayoutUniformtext `json:"uniformtext,omitempty"`

	// Updatemenus
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Updatemenus interface{} `json:"updatemenus,omitempty"`

	// Violingap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between violins of adjacent location coordinates. Has no effect on traces that have *width* set.
	Violingap float64 `json:"violingap,omitempty"`

	// Violingroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between violins of the same location coordinate. Has no effect on traces that have *width* set.
	Violingroupgap float64 `json:"violingroupgap,omitempty"`

	// Violinmode
	// default: overlay
	// type: enumerated
	// Determines how violins at the same location coordinate are displayed on the graph. If *group*, the violins are plotted next to one another centered around the shared location. If *overlay*, the violins are plotted over one another, you might need to set *opacity* to see them multiple violins. Has no effect on traces that have *width* set.
	Violinmode LayoutViolinmode `json:"violinmode,omitempty"`

	// Waterfallgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of adjacent location coordinates.
	Waterfallgap float64 `json:"waterfallgap,omitempty"`

	// Waterfallgroupgap
	// arrayOK: false
	// type: number
	// Sets the gap (in plot fraction) between bars of the same location coordinate.
	Waterfallgroupgap float64 `json:"waterfallgroupgap,omitempty"`

	// Waterfallmode
	// default: group
	// type: enumerated
	// Determines how bars at the same location coordinate are displayed on the graph. With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
	Waterfallmode LayoutWaterfallmode `json:"waterfallmode,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the plot's width (in px).
	Width float64 `json:"width,omitempty"`

	// Xaxis
	// role: Object
	Xaxis *LayoutXaxis `json:"xaxis,omitempty"`

	// Yaxis
	// role: Object
	Yaxis *LayoutYaxis `json:"yaxis,omitempty"`

	// XAxis2
	// X Axis number 2
	XAxis2 *LayoutXaxis `json:"xaxis2,omitempty"`

	// XAxis3
	// X Axis number 3
	XAxis3 *LayoutXaxis `json:"xaxis3,omitempty"`

	// XAxis4
	// X Axis number 4
	XAxis4 *LayoutXaxis `json:"xaxis4,omitempty"`

	// XAxis5
	// X Axis number 5
	XAxis5 *LayoutXaxis `json:"xaxis5,omitempty"`

	// XAxis6
	// X Axis number 6
	XAxis6 *LayoutXaxis `json:"xaxis6,omitempty"`

	// YAxis2
	// Y Axis number 2
	YAxis2 *LayoutYaxis `json:"yaxis2,omitempty"`

	// YAxis3
	// Y Axis number 3
	YAxis3 *LayoutYaxis `json:"yaxis3,omitempty"`

	// YAxis4
	// Y Axis number 4
	YAxis4 *LayoutYaxis `json:"yaxis4,omitempty"`

	// YAxis5
	// Y Axis number 5
	YAxis5 *LayoutYaxis `json:"yaxis5,omitempty"`

	// YAxis6
	// Y Axis number 6
	YAxis6 *LayoutYaxis `json:"yaxis6,omitempty"`
}

// LayoutActiveselection
type LayoutActiveselection struct {

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the color filling the active selection' interior.
	Fillcolor Color `json:"fillcolor,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the active selection.
	Opacity float64 `json:"opacity,omitempty"`
}

// LayoutActiveshape
type LayoutActiveshape struct {

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the color filling the active shape' interior.
	Fillcolor Color `json:"fillcolor,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of the active shape.
	Opacity float64 `json:"opacity,omitempty"`
}

// LayoutColoraxisColorbarTickfont Sets the color bar's tick label font
type LayoutColoraxisColorbarTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutColoraxisColorbarTitleFont Sets this color bar's title font. Note that the title's font used to be set by the now deprecated `titlefont` attribute.
type LayoutColoraxisColorbarTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutColoraxisColorbarTitle
type LayoutColoraxisColorbarTitle struct {

	// Font
	// role: Object
	Font *LayoutColoraxisColorbarTitleFont `json:"font,omitempty"`

	// Side
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
	Side LayoutColoraxisColorbarTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the color bar. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutColoraxisColorbar
type LayoutColoraxisColorbar struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the color of padded area.
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Bordercolor Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) or the border enclosing this color bar.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutColoraxisColorbarExponentformat `json:"exponentformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Len
	// arrayOK: false
	// type: number
	// Sets the length of the color bar This measure excludes the padding of both ends. That is, the color bar length is this length minus the padding on both ends.
	Len float64 `json:"len,omitempty"`

	// Lenmode
	// default: fraction
	// type: enumerated
	// Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
	Lenmode LayoutColoraxisColorbarLenmode `json:"lenmode,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Orientation
	// default: v
	// type: enumerated
	// Sets the orientation of the colorbar.
	Orientation LayoutColoraxisColorbarOrientation `json:"orientation,omitempty"`

	// Outlinecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Outlinecolor Color `json:"outlinecolor,omitempty"`

	// Outlinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Outlinewidth float64 `json:"outlinewidth,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutColoraxisColorbarShowexponent `json:"showexponent,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutColoraxisColorbarShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutColoraxisColorbarShowticksuffix `json:"showticksuffix,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// Sets the thickness of the color bar This measure excludes the size of the padding, ticks and labels.
	Thickness float64 `json:"thickness,omitempty"`

	// Thicknessmode
	// default: pixels
	// type: enumerated
	// Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
	Thicknessmode LayoutColoraxisColorbarThicknessmode `json:"thicknessmode,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutColoraxisColorbarTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabeloverflow
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
	Ticklabeloverflow LayoutColoraxisColorbarTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
	Ticklabelposition LayoutColoraxisColorbarTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutColoraxisColorbarTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default:
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutColoraxisColorbarTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutColoraxisColorbarTitle `json:"title,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` of the color bar (in plot fraction). When `xref` is *paper*, defaults to 1.02 when `orientation` is *v* and 0.5 when `orientation` is *h*. When `xref` is *container*, defaults to *1* when `orientation` is *v* and 0.5 when `orientation` is *h*. Must be between *0* and *1* if `xref` is *container* and between *-2* and *3* if `xref` is *paper*.
	X float64 `json:"x,omitempty"`

	// Xanchor
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
	Xanchor LayoutColoraxisColorbarXanchor `json:"xanchor,omitempty"`

	// Xpad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the x direction.
	Xpad float64 `json:"xpad,omitempty"`

	// Xref
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref LayoutColoraxisColorbarXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` of the color bar (in plot fraction). When `yref` is *paper*, defaults to 0.5 when `orientation` is *v* and 1.02 when `orientation` is *h*. When `yref` is *container*, defaults to 0.5 when `orientation` is *v* and 1 when `orientation` is *h*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	Y float64 `json:"y,omitempty"`

	// Yanchor
	// default: %!s(<nil>)
	// type: enumerated
	// Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
	Yanchor LayoutColoraxisColorbarYanchor `json:"yanchor,omitempty"`

	// Ypad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) along the y direction.
	Ypad float64 `json:"ypad,omitempty"`

	// Yref
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref LayoutColoraxisColorbarYref `json:"yref,omitempty"`
}

// LayoutColoraxis
type LayoutColoraxis struct {

	// Autocolorscale
	// arrayOK: false
	// type: boolean
	// Determines whether the colorscale is a default palette (`autocolorscale: true`) or the palette determined by `colorscale`. In case `colorscale` is unspecified or `autocolorscale` is true, the default palette will be chosen according to whether numbers in the `color` array are all positive, all negative or mixed.
	Autocolorscale Bool `json:"autocolorscale,omitempty"`

	// Cauto
	// arrayOK: false
	// type: boolean
	// Determines whether or not the color domain is computed with respect to the input data (here corresponding trace color array(s)) or the bounds set in `cmin` and `cmax` Defaults to `false` when `cmin` and `cmax` are set by the user.
	Cauto Bool `json:"cauto,omitempty"`

	// Cmax
	// arrayOK: false
	// type: number
	// Sets the upper bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmin` must be set as well.
	Cmax float64 `json:"cmax,omitempty"`

	// Cmid
	// arrayOK: false
	// type: number
	// Sets the mid-point of the color domain by scaling `cmin` and/or `cmax` to be equidistant to this point. Value should have the same units as corresponding trace color array(s). Has no effect when `cauto` is `false`.
	Cmid float64 `json:"cmid,omitempty"`

	// Cmin
	// arrayOK: false
	// type: number
	// Sets the lower bound of the color domain. Value should have the same units as corresponding trace color array(s) and if set, `cmax` must be set as well.
	Cmin float64 `json:"cmin,omitempty"`

	// Colorbar
	// role: Object
	Colorbar *LayoutColoraxisColorbar `json:"colorbar,omitempty"`

	// Colorscale
	// default: %!s(<nil>)
	// type: colorscale
	// Sets the colorscale. The colorscale must be an array containing arrays mapping a normalized value to an rgb, rgba, hex, hsl, hsv, or named color string. At minimum, a mapping for the lowest (0) and highest (1) values are required. For example, `[[0, 'rgb(0,0,255)'], [1, 'rgb(255,0,0)']]`. To control the bounds of the colorscale in color space, use `cmin` and `cmax`. Alternatively, `colorscale` may be a palette name string of the following list: Blackbody,Bluered,Blues,Cividis,Earth,Electric,Greens,Greys,Hot,Jet,Picnic,Portland,Rainbow,RdBu,Reds,Viridis,YlGnBu,YlOrRd.
	Colorscale ColorScale `json:"colorscale,omitempty"`

	// Reversescale
	// arrayOK: false
	// type: boolean
	// Reverses the color mapping if true. If true, `cmin` will correspond to the last color in the array and `cmax` will correspond to the first color.
	Reversescale Bool `json:"reversescale,omitempty"`

	// Showscale
	// arrayOK: false
	// type: boolean
	// Determines whether or not a colorbar is displayed for this trace.
	Showscale Bool `json:"showscale,omitempty"`
}

// LayoutColorscale
type LayoutColorscale struct {

	// Diverging
	// default: [[%!s(float64=0) rgb(5,10,172)] [%!s(float64=0.35) rgb(106,137,247)] [%!s(float64=0.5) rgb(190,190,190)] [%!s(float64=0.6) rgb(220,170,132)] [%!s(float64=0.7) rgb(230,145,90)] [%!s(float64=1) rgb(178,10,28)]]
	// type: colorscale
	// Sets the default diverging colorscale. Note that `autocolorscale` must be true for this attribute to work.
	Diverging ColorScale `json:"diverging,omitempty"`

	// Sequential
	// default: [[%!s(float64=0) rgb(220,220,220)] [%!s(float64=0.2) rgb(245,195,157)] [%!s(float64=0.4) rgb(245,160,105)] [%!s(float64=1) rgb(178,10,28)]]
	// type: colorscale
	// Sets the default sequential colorscale for positive values. Note that `autocolorscale` must be true for this attribute to work.
	Sequential ColorScale `json:"sequential,omitempty"`

	// Sequentialminus
	// default: [[%!s(float64=0) rgb(5,10,172)] [%!s(float64=0.35) rgb(40,60,190)] [%!s(float64=0.5) rgb(70,100,245)] [%!s(float64=0.6) rgb(90,120,245)] [%!s(float64=0.7) rgb(106,137,247)] [%!s(float64=1) rgb(220,220,220)]]
	// type: colorscale
	// Sets the default sequential colorscale for negative values. Note that `autocolorscale` must be true for this attribute to work.
	Sequentialminus ColorScale `json:"sequentialminus,omitempty"`
}

// LayoutFont Sets the global font. Note that fonts used in traces and other layout components inherit from the global font.
type LayoutFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutGeoCenter
type LayoutGeoCenter struct {

	// Lat
	// arrayOK: false
	// type: number
	// Sets the latitude of the map's center. For all projection types, the map's latitude center lies at the middle of the latitude range by default.
	Lat float64 `json:"lat,omitempty"`

	// Lon
	// arrayOK: false
	// type: number
	// Sets the longitude of the map's center. By default, the map's longitude center lies at the middle of the longitude range for scoped projection and above `projection.rotation.lon` otherwise.
	Lon float64 `json:"lon,omitempty"`
}

// LayoutGeoDomain
type LayoutGeoDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this geo subplot . Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this geo subplot (in plot fraction). Note that geo subplots are constrained by domain. In general, when `projection.scale` is set to 1. a map will fit either its x or y domain, but not both.
	Y interface{} `json:"y,omitempty"`
}

// LayoutGeoLataxis
type LayoutGeoLataxis struct {

	// Dtick
	// arrayOK: false
	// type: number
	// Sets the graticule's longitude/latitude tick step.
	Dtick float64 `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the graticule's stroke color.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the graticule's stroke width (in px).
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis (in degrees), sets the map's clipped coordinates.
	Range interface{} `json:"range,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Sets whether or not graticule are shown on the map.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: number
	// Sets the graticule's starting tick longitude/latitude.
	Tick0 float64 `json:"tick0,omitempty"`
}

// LayoutGeoLonaxis
type LayoutGeoLonaxis struct {

	// Dtick
	// arrayOK: false
	// type: number
	// Sets the graticule's longitude/latitude tick step.
	Dtick float64 `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the graticule's stroke color.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the graticule's stroke width (in px).
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis (in degrees), sets the map's clipped coordinates.
	Range interface{} `json:"range,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Sets whether or not graticule are shown on the map.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: number
	// Sets the graticule's starting tick longitude/latitude.
	Tick0 float64 `json:"tick0,omitempty"`
}

// LayoutGeoProjectionRotation
type LayoutGeoProjectionRotation struct {

	// Lat
	// arrayOK: false
	// type: number
	// Rotates the map along meridians (in degrees North).
	Lat float64 `json:"lat,omitempty"`

	// Lon
	// arrayOK: false
	// type: number
	// Rotates the map along parallels (in degrees East). Defaults to the center of the `lonaxis.range` values.
	Lon float64 `json:"lon,omitempty"`

	// Roll
	// arrayOK: false
	// type: number
	// Roll the map (in degrees) For example, a roll of *180* makes the map appear upside down.
	Roll float64 `json:"roll,omitempty"`
}

// LayoutGeoProjection
type LayoutGeoProjection struct {

	// Distance
	// arrayOK: false
	// type: number
	// For satellite projection type only. Sets the distance from the center of the sphere to the point of view as a proportion of the sphere’s radius.
	Distance float64 `json:"distance,omitempty"`

	// Parallels
	// arrayOK: false
	// type: info_array
	// For conic projection types only. Sets the parallels (tangent, secant) where the cone intersects the sphere.
	Parallels interface{} `json:"parallels,omitempty"`

	// Rotation
	// role: Object
	Rotation *LayoutGeoProjectionRotation `json:"rotation,omitempty"`

	// Scale
	// arrayOK: false
	// type: number
	// Zooms in or out on the map view. A scale of *1* corresponds to the largest zoom level that fits the map's lon and lat ranges.
	Scale float64 `json:"scale,omitempty"`

	// Tilt
	// arrayOK: false
	// type: number
	// For satellite projection type only. Sets the tilt angle of perspective projection.
	Tilt float64 `json:"tilt,omitempty"`

	// Type
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the projection type.
	Type LayoutGeoProjectionType `json:"type,omitempty"`
}

// LayoutGeo
type LayoutGeo struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the map
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Center
	// role: Object
	Center *LayoutGeoCenter `json:"center,omitempty"`

	// Coastlinecolor
	// arrayOK: false
	// type: color
	// Sets the coastline color.
	Coastlinecolor Color `json:"coastlinecolor,omitempty"`

	// Coastlinewidth
	// arrayOK: false
	// type: number
	// Sets the coastline stroke width (in px).
	Coastlinewidth float64 `json:"coastlinewidth,omitempty"`

	// Countrycolor
	// arrayOK: false
	// type: color
	// Sets line color of the country boundaries.
	Countrycolor Color `json:"countrycolor,omitempty"`

	// Countrywidth
	// arrayOK: false
	// type: number
	// Sets line width (in px) of the country boundaries.
	Countrywidth float64 `json:"countrywidth,omitempty"`

	// Domain
	// role: Object
	Domain *LayoutGeoDomain `json:"domain,omitempty"`

	// Fitbounds
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If *locations*, only the trace's visible locations are considered in the `fitbounds` computations. If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to *false*.
	Fitbounds LayoutGeoFitbounds `json:"fitbounds,omitempty"`

	// Framecolor
	// arrayOK: false
	// type: color
	// Sets the color the frame.
	Framecolor Color `json:"framecolor,omitempty"`

	// Framewidth
	// arrayOK: false
	// type: number
	// Sets the stroke width (in px) of the frame.
	Framewidth float64 `json:"framewidth,omitempty"`

	// Lakecolor
	// arrayOK: false
	// type: color
	// Sets the color of the lakes.
	Lakecolor Color `json:"lakecolor,omitempty"`

	// Landcolor
	// arrayOK: false
	// type: color
	// Sets the land mass color.
	Landcolor Color `json:"landcolor,omitempty"`

	// Lataxis
	// role: Object
	Lataxis *LayoutGeoLataxis `json:"lataxis,omitempty"`

	// Lonaxis
	// role: Object
	Lonaxis *LayoutGeoLonaxis `json:"lonaxis,omitempty"`

	// Oceancolor
	// arrayOK: false
	// type: color
	// Sets the ocean color
	Oceancolor Color `json:"oceancolor,omitempty"`

	// Projection
	// role: Object
	Projection *LayoutGeoProjection `json:"projection,omitempty"`

	// Resolution
	// default: %!s(float64=110)
	// type: enumerated
	// Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.
	Resolution LayoutGeoResolution `json:"resolution,omitempty"`

	// Rivercolor
	// arrayOK: false
	// type: color
	// Sets color of the rivers.
	Rivercolor Color `json:"rivercolor,omitempty"`

	// Riverwidth
	// arrayOK: false
	// type: number
	// Sets the stroke width (in px) of the rivers.
	Riverwidth float64 `json:"riverwidth,omitempty"`

	// Scope
	// default: world
	// type: enumerated
	// Set the scope of the map.
	Scope LayoutGeoScope `json:"scope,omitempty"`

	// Showcoastlines
	// arrayOK: false
	// type: boolean
	// Sets whether or not the coastlines are drawn.
	Showcoastlines Bool `json:"showcoastlines,omitempty"`

	// Showcountries
	// arrayOK: false
	// type: boolean
	// Sets whether or not country boundaries are drawn.
	Showcountries Bool `json:"showcountries,omitempty"`

	// Showframe
	// arrayOK: false
	// type: boolean
	// Sets whether or not a frame is drawn around the map.
	Showframe Bool `json:"showframe,omitempty"`

	// Showlakes
	// arrayOK: false
	// type: boolean
	// Sets whether or not lakes are drawn.
	Showlakes Bool `json:"showlakes,omitempty"`

	// Showland
	// arrayOK: false
	// type: boolean
	// Sets whether or not land masses are filled in color.
	Showland Bool `json:"showland,omitempty"`

	// Showocean
	// arrayOK: false
	// type: boolean
	// Sets whether or not oceans are filled in color.
	Showocean Bool `json:"showocean,omitempty"`

	// Showrivers
	// arrayOK: false
	// type: boolean
	// Sets whether or not rivers are drawn.
	Showrivers Bool `json:"showrivers,omitempty"`

	// Showsubunits
	// arrayOK: false
	// type: boolean
	// Sets whether or not boundaries of subunits within countries (e.g. states, provinces) are drawn.
	Showsubunits Bool `json:"showsubunits,omitempty"`

	// Subunitcolor
	// arrayOK: false
	// type: color
	// Sets the color of the subunits boundaries.
	Subunitcolor Color `json:"subunitcolor,omitempty"`

	// Subunitwidth
	// arrayOK: false
	// type: number
	// Sets the stroke width (in px) of the subunits boundaries.
	Subunitwidth float64 `json:"subunitwidth,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in the view (projection and center). Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Sets the default visibility of the base layers.
	Visible Bool `json:"visible,omitempty"`
}

// LayoutGridDomain
type LayoutGridDomain struct {

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this grid subplot (in plot fraction). The first and last cells end exactly at the domain edges, with no grout around the edges.
	Y interface{} `json:"y,omitempty"`
}

// LayoutGrid
type LayoutGrid struct {

	// Columns
	// arrayOK: false
	// type: integer
	// The number of columns in the grid. If you provide a 2D `subplots` array, the length of its longest row is used as the default. If you give an `xaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
	Columns int64 `json:"columns,omitempty"`

	// Domain
	// role: Object
	Domain *LayoutGridDomain `json:"domain,omitempty"`

	// Pattern
	// default: coupled
	// type: enumerated
	// If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.
	Pattern LayoutGridPattern `json:"pattern,omitempty"`

	// Roworder
	// default: top to bottom
	// type: enumerated
	// Is the first row the top or the bottom? Note that columns are always enumerated from left to right.
	Roworder LayoutGridRoworder `json:"roworder,omitempty"`

	// Rows
	// arrayOK: false
	// type: integer
	// The number of rows in the grid. If you provide a 2D `subplots` array or a `yaxes` array, its length is used as the default. But it's also possible to have a different length, if you want to leave a row at the end for non-cartesian subplots.
	Rows int64 `json:"rows,omitempty"`

	// Subplots
	// arrayOK: false
	// type: info_array
	// Used for freeform grids, where some axes may be shared across subplots but others are not. Each entry should be a cartesian subplot id, like *xy* or *x3y2*, or ** to leave that cell empty. You may reuse x axes within the same column, and y axes within the same row. Non-cartesian subplots and traces that support `domain` can place themselves in this grid separately using the `gridcell` attribute.
	Subplots interface{} `json:"subplots,omitempty"`

	// Xaxes
	// arrayOK: false
	// type: info_array
	// Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an x axis id like *x*, *x2*, etc., or ** to not put an x axis in that column. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `yaxes` is present, will generate consecutive IDs.
	Xaxes interface{} `json:"xaxes,omitempty"`

	// Xgap
	// arrayOK: false
	// type: number
	// Horizontal space between grid cells, expressed as a fraction of the total width available to one cell. Defaults to 0.1 for coupled-axes grids and 0.2 for independent grids.
	Xgap float64 `json:"xgap,omitempty"`

	// Xside
	// default: bottom plot
	// type: enumerated
	// Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.
	Xside LayoutGridXside `json:"xside,omitempty"`

	// Yaxes
	// arrayOK: false
	// type: info_array
	// Used with `yaxes` when the x and y axes are shared across columns and rows. Each entry should be an y axis id like *y*, *y2*, etc., or ** to not put a y axis in that row. Entries other than ** must be unique. Ignored if `subplots` is present. If missing but `xaxes` is present, will generate consecutive IDs.
	Yaxes interface{} `json:"yaxes,omitempty"`

	// Ygap
	// arrayOK: false
	// type: number
	// Vertical space between grid cells, expressed as a fraction of the total height available to one cell. Defaults to 0.1 for coupled-axes grids and 0.3 for independent grids.
	Ygap float64 `json:"ygap,omitempty"`

	// Yside
	// default: left plot
	// type: enumerated
	// Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.
	Yside LayoutGridYside `json:"yside,omitempty"`
}

// LayoutHoverlabelFont Sets the default hover label font used by all traces on the graph.
type LayoutHoverlabelFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutHoverlabelGrouptitlefont Sets the font for group titles in hover (unified modes). Defaults to `hoverlabel.font`.
type LayoutHoverlabelGrouptitlefont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutHoverlabel
type LayoutHoverlabel struct {

	// Align
	// default: auto
	// type: enumerated
	// Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
	Align LayoutHoverlabelAlign `json:"align,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of all hover labels on graph
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the border color of all hover labels on graph.
	Bordercolor Color `json:"bordercolor,omitempty"`

	// Font
	// role: Object
	Font *LayoutHoverlabelFont `json:"font,omitempty"`

	// Grouptitlefont
	// role: Object
	Grouptitlefont *LayoutHoverlabelGrouptitlefont `json:"grouptitlefont,omitempty"`

	// Namelength
	// arrayOK: false
	// type: integer
	// Sets the default length (in number of characters) of the trace name in the hover labels for all traces. -1 shows the whole name regardless of length. 0-3 shows the first 0-3 characters, and an integer >3 will show the whole name if it is less than that many characters, but if it is longer, will truncate to `namelength - 3` characters and add an ellipsis.
	Namelength int64 `json:"namelength,omitempty"`
}

// LayoutLegendFont Sets the font used to text the legend items.
type LayoutLegendFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutLegendGrouptitlefont Sets the font for group titles in legend. Defaults to `legend.font` with its size increased about 10%.
type LayoutLegendGrouptitlefont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutLegendTitleFont Sets this legend's title font. Defaults to `legend.font` with its size increased about 20%.
type LayoutLegendTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutLegendTitle
type LayoutLegendTitle struct {

	// Font
	// role: Object
	Font *LayoutLegendTitleFont `json:"font,omitempty"`

	// Side
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the location of legend's title with respect to the legend items. Defaulted to *top* with `orientation` is *h*. Defaulted to *left* with `orientation` is *v*. The *top left* options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.
	Side LayoutLegendTitleSide `json:"side,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend.
	Text String `json:"text,omitempty"`
}

// LayoutLegend
type LayoutLegend struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the legend background color. Defaults to `layout.paper_bgcolor`.
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the legend.
	Bordercolor Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the legend.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Entrywidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend. Use 0 to size the entry based on the text width, when `entrywidthmode` is set to *pixels*.
	Entrywidth float64 `json:"entrywidth,omitempty"`

	// Entrywidthmode
	// default: pixels
	// type: enumerated
	// Determines what entrywidth means.
	Entrywidthmode LayoutLegendEntrywidthmode `json:"entrywidthmode,omitempty"`

	// Font
	// role: Object
	Font *LayoutLegendFont `json:"font,omitempty"`

	// Groupclick
	// default: togglegroup
	// type: enumerated
	// Determines the behavior on legend group item click. *toggleitem* toggles the visibility of the individual item clicked on the graph. *togglegroup* toggles the visibility of all items in the same legendgroup as the item clicked on the graph.
	Groupclick LayoutLegendGroupclick `json:"groupclick,omitempty"`

	// Grouptitlefont
	// role: Object
	Grouptitlefont *LayoutLegendGrouptitlefont `json:"grouptitlefont,omitempty"`

	// Itemclick
	// default: toggle
	// type: enumerated
	// Determines the behavior on legend item click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item click interactions.
	Itemclick LayoutLegendItemclick `json:"itemclick,omitempty"`

	// Itemdoubleclick
	// default: toggleothers
	// type: enumerated
	// Determines the behavior on legend item double-click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item double-click interactions.
	Itemdoubleclick LayoutLegendItemdoubleclick `json:"itemdoubleclick,omitempty"`

	// Itemsizing
	// default: trace
	// type: enumerated
	// Determines if the legend items symbols scale with their corresponding *trace* attributes or remain *constant* independent of the symbol size on the graph.
	Itemsizing LayoutLegendItemsizing `json:"itemsizing,omitempty"`

	// Itemwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the legend item symbols (the part other than the title.text).
	Itemwidth float64 `json:"itemwidth,omitempty"`

	// Orientation
	// default: v
	// type: enumerated
	// Sets the orientation of the legend.
	Orientation LayoutLegendOrientation `json:"orientation,omitempty"`

	// Title
	// role: Object
	Title *LayoutLegendTitle `json:"title,omitempty"`

	// Tracegroupgap
	// arrayOK: false
	// type: number
	// Sets the amount of vertical space (in px) between legend groups.
	Tracegroupgap float64 `json:"tracegroupgap,omitempty"`

	// Traceorder
	// default: %!s(<nil>)
	// type: flaglist
	// Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.
	Traceorder LayoutLegendTraceorder `json:"traceorder,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of legend-driven changes in trace and pie label visibility. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Valign
	// default: middle
	// type: enumerated
	// Sets the vertical alignment of the symbols with respect to their associated text.
	Valign LayoutLegendValign `json:"valign,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this legend is visible.
	Visible Bool `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` (in normalized coordinates) of the legend. When `xref` is *paper*, defaults to *1.02* for vertical legends and defaults to *0* for horizontal legends. When `xref` is *container*, defaults to *1* for vertical legends and defaults to *0* for horizontal legends. Must be between *0* and *1* if `xref` is *container*. and between *-2* and *3* if `xref` is *paper*.
	X float64 `json:"x,omitempty"`

	// Xanchor
	// default: left
	// type: enumerated
	// Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend. Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.
	Xanchor LayoutLegendXanchor `json:"xanchor,omitempty"`

	// Xref
	// default: paper
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref LayoutLegendXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` (in normalized coordinates) of the legend. When `yref` is *paper*, defaults to *1* for vertical legends, defaults to *-0.1* for horizontal legends on graphs w/o range sliders and defaults to *1.1* for horizontal legends on graph with one or multiple range sliders. When `yref` is *container*, defaults to *1*. Must be between *0* and *1* if `yref` is *container* and between *-2* and *3* if `yref` is *paper*.
	Y float64 `json:"y,omitempty"`

	// Yanchor
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.
	Yanchor LayoutLegendYanchor `json:"yanchor,omitempty"`

	// Yref
	// default: paper
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref LayoutLegendYref `json:"yref,omitempty"`
}

// LayoutMapboxBounds
type LayoutMapboxBounds struct {

	// East
	// arrayOK: false
	// type: number
	// Sets the maximum longitude of the map (in degrees East) if `west`, `south` and `north` are declared.
	East float64 `json:"east,omitempty"`

	// North
	// arrayOK: false
	// type: number
	// Sets the maximum latitude of the map (in degrees North) if `east`, `west` and `south` are declared.
	North float64 `json:"north,omitempty"`

	// South
	// arrayOK: false
	// type: number
	// Sets the minimum latitude of the map (in degrees North) if `east`, `west` and `north` are declared.
	South float64 `json:"south,omitempty"`

	// West
	// arrayOK: false
	// type: number
	// Sets the minimum longitude of the map (in degrees East) if `east`, `south` and `north` are declared.
	West float64 `json:"west,omitempty"`
}

// LayoutMapboxCenter
type LayoutMapboxCenter struct {

	// Lat
	// arrayOK: false
	// type: number
	// Sets the latitude of the center of the map (in degrees North).
	Lat float64 `json:"lat,omitempty"`

	// Lon
	// arrayOK: false
	// type: number
	// Sets the longitude of the center of the map (in degrees East).
	Lon float64 `json:"lon,omitempty"`
}

// LayoutMapboxDomain
type LayoutMapboxDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this mapbox subplot .
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this mapbox subplot .
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this mapbox subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this mapbox subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// LayoutMapbox
type LayoutMapbox struct {

	// Accesstoken
	// arrayOK: false
	// type: string
	// Sets the mapbox access token to be used for this mapbox map. Alternatively, the mapbox access token can be set in the configuration options under `mapboxAccessToken`. Note that accessToken are only required when `style` (e.g with values : basic, streets, outdoors, light, dark, satellite, satellite-streets ) and/or a layout layer references the Mapbox server.
	Accesstoken String `json:"accesstoken,omitempty"`

	// Bearing
	// arrayOK: false
	// type: number
	// Sets the bearing angle of the map in degrees counter-clockwise from North (mapbox.bearing).
	Bearing float64 `json:"bearing,omitempty"`

	// Bounds
	// role: Object
	Bounds *LayoutMapboxBounds `json:"bounds,omitempty"`

	// Center
	// role: Object
	Center *LayoutMapboxCenter `json:"center,omitempty"`

	// Domain
	// role: Object
	Domain *LayoutMapboxDomain `json:"domain,omitempty"`

	// Layers
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Layers interface{} `json:"layers,omitempty"`

	// Pitch
	// arrayOK: false
	// type: number
	// Sets the pitch angle of the map (in degrees, where *0* means perpendicular to the surface of the map) (mapbox.pitch).
	Pitch float64 `json:"pitch,omitempty"`

	// Style
	// arrayOK: false
	// type: any
	// Defines the map layers that are rendered by default below the trace layers defined in `data`, which are themselves by default rendered below the layers defined in `layout.mapbox.layers`.  These layers can be defined either explicitly as a Mapbox Style object which can contain multiple layer definitions that load data from any public or private Tile Map Service (TMS or XYZ) or Web Map Service (WMS) or implicitly by using one of the built-in style objects which use WMSes which do not require any access tokens, or by using a default Mapbox style or custom Mapbox style URL, both of which require a Mapbox access token  Note that Mapbox access token can be set in the `accesstoken` attribute or in the `mapboxAccessToken` config option.  Mapbox Style objects are of the form described in the Mapbox GL JS documentation available at https://docs.mapbox.com/mapbox-gl-js/style-spec  The built-in plotly.js styles objects are: carto-darkmatter, carto-positron, open-street-map, stamen-terrain, stamen-toner, stamen-watercolor, white-bg  The built-in Mapbox styles are: basic, streets, outdoors, light, dark, satellite, satellite-streets  Mapbox style URLs are of the form: mapbox://mapbox.mapbox-<name>-<version>
	Style interface{} `json:"style,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in the view: `center`, `zoom`, `bearing`, `pitch`. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Zoom
	// arrayOK: false
	// type: number
	// Sets the zoom level of the map (mapbox.zoom).
	Zoom float64 `json:"zoom,omitempty"`
}

// LayoutMargin
type LayoutMargin struct {

	// Autoexpand
	// arrayOK: false
	// type: boolean
	// Turns on/off margin expansion computations. Legends, colorbars, updatemenus, sliders, axis rangeselector and rangeslider are allowed to push the margins by defaults.
	Autoexpand Bool `json:"autoexpand,omitempty"`

	// B
	// arrayOK: false
	// type: number
	// Sets the bottom margin (in px).
	B float64 `json:"b,omitempty"`

	// L
	// arrayOK: false
	// type: number
	// Sets the left margin (in px).
	L float64 `json:"l,omitempty"`

	// Pad
	// arrayOK: false
	// type: number
	// Sets the amount of padding (in px) between the plotting area and the axis lines
	Pad float64 `json:"pad,omitempty"`

	// R
	// arrayOK: false
	// type: number
	// Sets the right margin (in px).
	R float64 `json:"r,omitempty"`

	// T
	// arrayOK: false
	// type: number
	// Sets the top margin (in px).
	T float64 `json:"t,omitempty"`
}

// LayoutModebar
type LayoutModebar struct {

	// Activecolor
	// arrayOK: false
	// type: color
	// Sets the color of the active or hovered on icons in the modebar.
	Activecolor Color `json:"activecolor,omitempty"`

	// Add
	// arrayOK: true
	// type: string
	// Determines which predefined modebar buttons to add. Please note that these buttons will only be shown if they are compatible with all trace types used in a graph. Similar to `config.modeBarButtonsToAdd` option. This may include *v1hovermode*, *hoverclosest*, *hovercompare*, *togglehover*, *togglespikelines*, *drawline*, *drawopenpath*, *drawclosedpath*, *drawcircle*, *drawrect*, *eraseshape*.
	Add String `json:"add,omitempty"`

	// Addsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `add`.
	Addsrc String `json:"addsrc,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the modebar.
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets the color of the icons in the modebar.
	Color Color `json:"color,omitempty"`

	// Orientation
	// default: h
	// type: enumerated
	// Sets the orientation of the modebar.
	Orientation LayoutModebarOrientation `json:"orientation,omitempty"`

	// Remove
	// arrayOK: true
	// type: string
	// Determines which predefined modebar buttons to remove. Similar to `config.modeBarButtonsToRemove` option. This may include *autoScale2d*, *autoscale*, *editInChartStudio*, *editinchartstudio*, *hoverCompareCartesian*, *hovercompare*, *lasso*, *lasso2d*, *orbitRotation*, *orbitrotation*, *pan*, *pan2d*, *pan3d*, *reset*, *resetCameraDefault3d*, *resetCameraLastSave3d*, *resetGeo*, *resetSankeyGroup*, *resetScale2d*, *resetViewMapbox*, *resetViews*, *resetcameradefault*, *resetcameralastsave*, *resetsankeygroup*, *resetscale*, *resetview*, *resetviews*, *select*, *select2d*, *sendDataToCloud*, *senddatatocloud*, *tableRotation*, *tablerotation*, *toImage*, *toggleHover*, *toggleSpikelines*, *togglehover*, *togglespikelines*, *toimage*, *zoom*, *zoom2d*, *zoom3d*, *zoomIn2d*, *zoomInGeo*, *zoomInMapbox*, *zoomOut2d*, *zoomOutGeo*, *zoomOutMapbox*, *zoomin*, *zoomout*.
	Remove String `json:"remove,omitempty"`

	// Removesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `remove`.
	Removesrc String `json:"removesrc,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes related to the modebar, including `hovermode`, `dragmode`, and `showspikes` at both the root level and inside subplots. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutNewselectionLine
type LayoutNewselectionLine struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the line color. By default uses either dark grey or white to increase contrast with background color.
	Color Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

// LayoutNewselection
type LayoutNewselection struct {

	// Line
	// role: Object
	Line *LayoutNewselectionLine `json:"line,omitempty"`

	// Mode
	// default: immediate
	// type: enumerated
	// Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.
	Mode LayoutNewselectionMode `json:"mode,omitempty"`
}

// LayoutNewshapeLabelFont Sets the new shape label text font.
type LayoutNewshapeLabelFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutNewshapeLabel
type LayoutNewshapeLabel struct {

	// Font
	// role: Object
	Font *LayoutNewshapeLabelFont `json:"font,omitempty"`

	// Padding
	// arrayOK: false
	// type: number
	// Sets padding (in px) between edge of label and edge of new shape.
	Padding float64 `json:"padding,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the text to display with the new shape. It is also used for legend item if `name` is not provided.
	Text String `json:"text,omitempty"`

	// Textangle
	// arrayOK: false
	// type: angle
	// Sets the angle at which the label text is drawn with respect to the horizontal. For lines, angle *auto* is the same angle as the line. For all other shapes, angle *auto* is horizontal.
	Textangle float64 `json:"textangle,omitempty"`

	// Textposition
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are *top left*, *top center*, *top right*, *middle left*, *middle center*, *middle right*, *bottom left*, *bottom center*, and *bottom right*. Supported values for lines are *start*, *middle*, and *end*. Default: *middle center* for rectangles, circles, and paths; *middle* for lines.
	Textposition LayoutNewshapeLabelTextposition `json:"textposition,omitempty"`

	// Texttemplate
	// arrayOK: false
	// type: string
	// Template string used for rendering the new shape's label. Note that this will override `text`. Variables are inserted using %{variable}, for example "x0: %{x0}". Numbers are formatted using d3-format's syntax %{variable:d3-format}, for example "Price: %{x0:$.2f}". See https://github.com/d3/d3-format/tree/v1.4.5#d3-format for details on the formatting syntax. Dates are formatted using d3-time-format's syntax %{variable|d3-time-format}, for example "Day: %{x0|%m %b %Y}". See https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format for details on the date formatting syntax. A single multiplication or division operation may be applied to numeric variables, and combined with d3 number formatting, for example "Length in cm: %{x0*2.54}", "%{slope*60:.1f} meters per second." For log axes, variable values are given in log units. For date axes, x/y coordinate variables and center variables use datetimes, while all other variable values use values in ms. Finally, the template string has access to variables `x0`, `x1`, `y0`, `y1`, `slope`, `dx`, `dy`, `width`, `height`, `length`, `xcenter` and `ycenter`.
	Texttemplate String `json:"texttemplate,omitempty"`

	// Xanchor
	// default: auto
	// type: enumerated
	// Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the *left*, *center* or *right* of the label text. For example, if `textposition` is set to *top right* and `xanchor` to *right* then the right-most portion of the label text lines up with the right-most edge of the new shape.
	Xanchor LayoutNewshapeLabelXanchor `json:"xanchor,omitempty"`

	// Yanchor
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the label's vertical position anchor This anchor binds the specified `textposition` to the *top*, *middle* or *bottom* of the label text. For example, if `textposition` is set to *top right* and `yanchor` to *top* then the top-most portion of the label text lines up with the top-most edge of the new shape.
	Yanchor LayoutNewshapeLabelYanchor `json:"yanchor,omitempty"`
}

// LayoutNewshapeLegendgrouptitleFont Sets this legend group's title font.
type LayoutNewshapeLegendgrouptitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutNewshapeLegendgrouptitle
type LayoutNewshapeLegendgrouptitle struct {

	// Font
	// role: Object
	Font *LayoutNewshapeLegendgrouptitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of the legend group.
	Text String `json:"text,omitempty"`
}

// LayoutNewshapeLine
type LayoutNewshapeLine struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets the line color. By default uses either dark grey or white to increase contrast with background color.
	Color Color `json:"color,omitempty"`

	// Dash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Dash String `json:"dash,omitempty"`

	// Width
	// arrayOK: false
	// type: number
	// Sets the line width (in px).
	Width float64 `json:"width,omitempty"`
}

// LayoutNewshape
type LayoutNewshape struct {

	// Drawdirection
	// default: diagonal
	// type: enumerated
	// When `dragmode` is set to *drawrect*, *drawline* or *drawcircle* this limits the drag to be horizontal, vertical or diagonal. Using *diagonal* there is no limit e.g. in drawing lines in any direction. *ortho* limits the draw to be either horizontal or vertical. *horizontal* allows horizontal extend. *vertical* allows vertical extend.
	Drawdirection LayoutNewshapeDrawdirection `json:"drawdirection,omitempty"`

	// Fillcolor
	// arrayOK: false
	// type: color
	// Sets the color filling new shapes' interior. Please note that if using a fillcolor with alpha greater than half, drag inside the active shape starts moving the shape underneath, otherwise a new shape could be started over.
	Fillcolor Color `json:"fillcolor,omitempty"`

	// Fillrule
	// default: evenodd
	// type: enumerated
	// Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
	Fillrule LayoutNewshapeFillrule `json:"fillrule,omitempty"`

	// Label
	// role: Object
	Label *LayoutNewshapeLabel `json:"label,omitempty"`

	// Layer
	// default: above
	// type: enumerated
	// Specifies whether new shapes are drawn below or above traces.
	Layer LayoutNewshapeLayer `json:"layer,omitempty"`

	// Legend
	// arrayOK: false
	// type: subplotid
	// Sets the reference to a legend to show new shape in. References to these legends are *legend*, *legend2*, *legend3*, etc. Settings for these legends are set in the layout, under `layout.legend`, `layout.legend2`, etc.
	Legend String `json:"legend,omitempty"`

	// Legendgroup
	// arrayOK: false
	// type: string
	// Sets the legend group for new shape. Traces and shapes part of the same legend group hide/show at the same time when toggling legend items.
	Legendgroup String `json:"legendgroup,omitempty"`

	// Legendgrouptitle
	// role: Object
	Legendgrouptitle *LayoutNewshapeLegendgrouptitle `json:"legendgrouptitle,omitempty"`

	// Legendrank
	// arrayOK: false
	// type: number
	// Sets the legend rank for new shape. Items and groups with smaller ranks are presented on top/left side while with *reversed* `legend.traceorder` they are on bottom/right side. The default legendrank is 1000, so that you can use ranks less than 1000 to place certain items before all unranked items, and ranks greater than 1000 to go after all unranked items.
	Legendrank float64 `json:"legendrank,omitempty"`

	// Legendwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px or fraction) of the legend for new shape.
	Legendwidth float64 `json:"legendwidth,omitempty"`

	// Line
	// role: Object
	Line *LayoutNewshapeLine `json:"line,omitempty"`

	// Name
	// arrayOK: false
	// type: string
	// Sets new shape name. The name appears as the legend item.
	Name String `json:"name,omitempty"`

	// Opacity
	// arrayOK: false
	// type: number
	// Sets the opacity of new shapes.
	Opacity float64 `json:"opacity,omitempty"`

	// Showlegend
	// arrayOK: false
	// type: boolean
	// Determines whether or not new shape is shown in the legend.
	Showlegend Bool `json:"showlegend,omitempty"`

	// Visible
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not new shape is visible. If *legendonly*, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).
	Visible LayoutNewshapeVisible `json:"visible,omitempty"`
}

// LayoutPolarAngularaxisTickfont Sets the tick font.
type LayoutPolarAngularaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutPolarAngularaxis
type LayoutPolarAngularaxis struct {

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutPolarAngularaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutPolarAngularaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Direction
	// default: counterclockwise
	// type: enumerated
	// Sets the direction corresponding to positive angles.
	Direction LayoutPolarAngularaxisDirection `json:"direction,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutPolarAngularaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutPolarAngularaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Period
	// arrayOK: false
	// type: number
	// Set the angular period. Has an effect only when `angularaxis.type` is *category*.
	Period float64 `json:"period,omitempty"`

	// Rotation
	// arrayOK: false
	// type: angle
	// Sets that start position (in degrees) of the angular axis By default, polar subplots with `direction` set to *counterclockwise* get a `rotation` of *0* which corresponds to due East (like what mathematicians prefer). In turn, polar with `direction` set to *clockwise* get a rotation of *90* which corresponds to due North (like on a compass),
	Rotation float64 `json:"rotation,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutPolarAngularaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutPolarAngularaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutPolarAngularaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Thetaunit
	// default: degrees
	// type: enumerated
	// Sets the format unit of the formatted *theta* values. Has an effect only when `angularaxis.type` is *linear*.
	Thetaunit LayoutPolarAngularaxisThetaunit `json:"thetaunit,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutPolarAngularaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutPolarAngularaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutPolarAngularaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Type
	// default: -
	// type: enumerated
	// Sets the angular axis type. If *linear*, set `thetaunit` to determine the unit in which axis value are shown. If *category, use `period` to set the number of integer coordinates around polar axis.
	Type LayoutPolarAngularaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `rotation`. Defaults to `polar<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`
}

// LayoutPolarDomain
type LayoutPolarDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this polar subplot .
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this polar subplot .
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this polar subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this polar subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// LayoutPolarRadialaxisAutorangeoptions
type LayoutPolarRadialaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	Include interface{} `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	Includesrc String `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutPolarRadialaxisTickfont Sets the tick font.
type LayoutPolarRadialaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutPolarRadialaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutPolarRadialaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutPolarRadialaxisTitle
type LayoutPolarRadialaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutPolarRadialaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutPolarRadialaxis
type LayoutPolarRadialaxis struct {

	// Angle
	// arrayOK: false
	// type: angle
	// Sets the angle (in degrees) from which the radial axis is drawn. Note that by default, radial axis line on the theta=0 line corresponds to a line pointing right (like what mathematicians prefer). Defaults to the first `polar.sector` angle.
	Angle float64 `json:"angle,omitempty"`

	// Autorange
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	Autorange LayoutPolarRadialaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// role: Object
	Autorangeoptions *LayoutPolarRadialaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotickangles
	// arrayOK: false
	// type: info_array
	// When `tickangle` is set to *auto*, it will be set to the first angle in this array that is large enough to prevent label overlap.
	Autotickangles interface{} `json:"autotickangles,omitempty"`

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutPolarRadialaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutPolarRadialaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutPolarRadialaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutPolarRadialaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutPolarRadialaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// default: tozero
	// type: enumerated
	// If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. If *normal*, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).
	Rangemode LayoutPolarRadialaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutPolarRadialaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutPolarRadialaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutPolarRadialaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// default: clockwise
	// type: enumerated
	// Determines on which side of radial axis line the tick and tick labels appear.
	Side LayoutPolarRadialaxisSide `json:"side,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutPolarRadialaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutPolarRadialaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutPolarRadialaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutPolarRadialaxisTitle `json:"title,omitempty"`

	// Type
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutPolarRadialaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `range`, `autorange`, `angle`, and `title` if in `editable: true` configuration. Defaults to `polar<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`
}

// LayoutPolar
type LayoutPolar struct {

	// Angularaxis
	// role: Object
	Angularaxis *LayoutPolarAngularaxis `json:"angularaxis,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the subplot
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Domain
	// role: Object
	Domain *LayoutPolarDomain `json:"domain,omitempty"`

	// Gridshape
	// default: circular
	// type: enumerated
	// Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).
	Gridshape LayoutPolarGridshape `json:"gridshape,omitempty"`

	// Hole
	// arrayOK: false
	// type: number
	// Sets the fraction of the radius to cut out of the polar subplot.
	Hole float64 `json:"hole,omitempty"`

	// Radialaxis
	// role: Object
	Radialaxis *LayoutPolarRadialaxis `json:"radialaxis,omitempty"`

	// Sector
	// arrayOK: false
	// type: info_array
	// Sets angular span of this polar subplot with two angles (in degrees). Sector are assumed to be spanned in the counterclockwise direction with *0* corresponding to rightmost limit of the polar subplot.
	Sector interface{} `json:"sector,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis attributes, if not overridden in the individual axes. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutSceneAspectratio Sets this scene's axis aspectratio.
type LayoutSceneAspectratio struct {

	// X
	// arrayOK: false
	// type: number
	//
	X float64 `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	Y float64 `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	Z float64 `json:"z,omitempty"`
}

// LayoutSceneCameraCenter Sets the (x,y,z) components of the 'center' camera vector This vector determines the translation (x,y,z) space about the center of this scene. By default, there is no such translation.
type LayoutSceneCameraCenter struct {

	// X
	// arrayOK: false
	// type: number
	//
	X float64 `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	Y float64 `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	Z float64 `json:"z,omitempty"`
}

// LayoutSceneCameraEye Sets the (x,y,z) components of the 'eye' camera vector. This vector determines the view point about the origin of this scene.
type LayoutSceneCameraEye struct {

	// X
	// arrayOK: false
	// type: number
	//
	X float64 `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	Y float64 `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	Z float64 `json:"z,omitempty"`
}

// LayoutSceneCameraProjection
type LayoutSceneCameraProjection struct {

	// Type
	// default: perspective
	// type: enumerated
	// Sets the projection type. The projection type could be either *perspective* or *orthographic*. The default is *perspective*.
	Type LayoutSceneCameraProjectionType `json:"type,omitempty"`
}

// LayoutSceneCameraUp Sets the (x,y,z) components of the 'up' camera vector. This vector determines the up direction of this scene with respect to the page. The default is *{x: 0, y: 0, z: 1}* which means that the z axis points up.
type LayoutSceneCameraUp struct {

	// X
	// arrayOK: false
	// type: number
	//
	X float64 `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	//
	Y float64 `json:"y,omitempty"`

	// Z
	// arrayOK: false
	// type: number
	//
	Z float64 `json:"z,omitempty"`
}

// LayoutSceneCamera
type LayoutSceneCamera struct {

	// Center
	// role: Object
	Center *LayoutSceneCameraCenter `json:"center,omitempty"`

	// Eye
	// role: Object
	Eye *LayoutSceneCameraEye `json:"eye,omitempty"`

	// Projection
	// role: Object
	Projection *LayoutSceneCameraProjection `json:"projection,omitempty"`

	// Up
	// role: Object
	Up *LayoutSceneCameraUp `json:"up,omitempty"`
}

// LayoutSceneDomain
type LayoutSceneDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this scene subplot .
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this scene subplot .
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this scene subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this scene subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// LayoutSceneXaxisAutorangeoptions
type LayoutSceneXaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	Include interface{} `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	Includesrc String `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutSceneXaxisTickfont Sets the tick font.
type LayoutSceneXaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneXaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutSceneXaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneXaxisTitle
type LayoutSceneXaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutSceneXaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutSceneXaxis
type LayoutSceneXaxis struct {

	// Autorange
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	Autorange LayoutSceneXaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// role: Object
	Autorangeoptions *LayoutSceneXaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutSceneXaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor
	// arrayOK: false
	// type: color
	// Sets the background color of this axis' wall.
	Backgroundcolor Color `json:"backgroundcolor,omitempty"`

	// Calendar
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutSceneXaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutSceneXaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutSceneXaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutSceneXaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutSceneXaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showaxeslabels
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis is labeled
	Showaxeslabels Bool `json:"showaxeslabels,omitempty"`

	// Showbackground
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis' wall has a background color.
	Showbackground Bool `json:"showbackground,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutSceneXaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSceneXaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSceneXaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the color of the spikes.
	Spikecolor Color `json:"spikecolor,omitempty"`

	// Spikesides
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	Spikesides Bool `json:"spikesides,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the thickness (in px) of the spikes.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutSceneXaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutSceneXaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutSceneXaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutSceneXaxisTitle `json:"title,omitempty"`

	// Type
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutSceneXaxisType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	Zerolinecolor Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

// LayoutSceneYaxisAutorangeoptions
type LayoutSceneYaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	Include interface{} `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	Includesrc String `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutSceneYaxisTickfont Sets the tick font.
type LayoutSceneYaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneYaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutSceneYaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneYaxisTitle
type LayoutSceneYaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutSceneYaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutSceneYaxis
type LayoutSceneYaxis struct {

	// Autorange
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	Autorange LayoutSceneYaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// role: Object
	Autorangeoptions *LayoutSceneYaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutSceneYaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor
	// arrayOK: false
	// type: color
	// Sets the background color of this axis' wall.
	Backgroundcolor Color `json:"backgroundcolor,omitempty"`

	// Calendar
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutSceneYaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutSceneYaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutSceneYaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutSceneYaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutSceneYaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showaxeslabels
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis is labeled
	Showaxeslabels Bool `json:"showaxeslabels,omitempty"`

	// Showbackground
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis' wall has a background color.
	Showbackground Bool `json:"showbackground,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutSceneYaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSceneYaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSceneYaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the color of the spikes.
	Spikecolor Color `json:"spikecolor,omitempty"`

	// Spikesides
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	Spikesides Bool `json:"spikesides,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the thickness (in px) of the spikes.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutSceneYaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutSceneYaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutSceneYaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutSceneYaxisTitle `json:"title,omitempty"`

	// Type
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutSceneYaxisType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	Zerolinecolor Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

// LayoutSceneZaxisAutorangeoptions
type LayoutSceneZaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	Include interface{} `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	Includesrc String `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutSceneZaxisTickfont Sets the tick font.
type LayoutSceneZaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneZaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutSceneZaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSceneZaxisTitle
type LayoutSceneZaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutSceneZaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutSceneZaxis
type LayoutSceneZaxis struct {

	// Autorange
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	Autorange LayoutSceneZaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// role: Object
	Autorangeoptions *LayoutSceneZaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutSceneZaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Backgroundcolor
	// arrayOK: false
	// type: color
	// Sets the background color of this axis' wall.
	Backgroundcolor Color `json:"backgroundcolor,omitempty"`

	// Calendar
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutSceneZaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutSceneZaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutSceneZaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Mirror
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutSceneZaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutSceneZaxisRangemode `json:"rangemode,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showaxeslabels
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis is labeled
	Showaxeslabels Bool `json:"showaxeslabels,omitempty"`

	// Showbackground
	// arrayOK: false
	// type: boolean
	// Sets whether or not this axis' wall has a background color.
	Showbackground Bool `json:"showbackground,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutSceneZaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes starting from data points to this axis' wall are shown on hover.
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSceneZaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSceneZaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the color of the spikes.
	Spikecolor Color `json:"spikecolor,omitempty"`

	// Spikesides
	// arrayOK: false
	// type: boolean
	// Sets whether or not spikes extending from the projection data points to this axis' wall boundaries are shown on hover.
	Spikesides Bool `json:"spikesides,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the thickness (in px) of the spikes.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutSceneZaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutSceneZaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutSceneZaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutSceneZaxisTitle `json:"title,omitempty"`

	// Type
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutSceneZaxisType `json:"type,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	Zerolinecolor Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

// LayoutScene
type LayoutScene struct {

	// Annotations
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Annotations interface{} `json:"annotations,omitempty"`

	// Aspectmode
	// default: auto
	// type: enumerated
	// If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.
	Aspectmode LayoutSceneAspectmode `json:"aspectmode,omitempty"`

	// Aspectratio
	// role: Object
	Aspectratio *LayoutSceneAspectratio `json:"aspectratio,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	//
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Camera
	// role: Object
	Camera *LayoutSceneCamera `json:"camera,omitempty"`

	// Domain
	// role: Object
	Domain *LayoutSceneDomain `json:"domain,omitempty"`

	// Dragmode
	// default: %!s(<nil>)
	// type: enumerated
	// Determines the mode of drag interactions for this scene.
	Dragmode LayoutSceneDragmode `json:"dragmode,omitempty"`

	// Hovermode
	// default: closest
	// type: enumerated
	// Determines the mode of hover interactions for this scene.
	Hovermode LayoutSceneHovermode `json:"hovermode,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in camera attributes. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Xaxis
	// role: Object
	Xaxis *LayoutSceneXaxis `json:"xaxis,omitempty"`

	// Yaxis
	// role: Object
	Yaxis *LayoutSceneYaxis `json:"yaxis,omitempty"`

	// Zaxis
	// role: Object
	Zaxis *LayoutSceneZaxis `json:"zaxis,omitempty"`
}

// LayoutSmithDomain
type LayoutSmithDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this smith subplot .
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this smith subplot .
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this smith subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this smith subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// LayoutSmithImaginaryaxisTickfont Sets the tick font.
type LayoutSmithImaginaryaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSmithImaginaryaxis
type LayoutSmithImaginaryaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutSmithImaginaryaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSmithImaginaryaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSmithImaginaryaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutSmithImaginaryaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutSmithImaginaryaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Defaults to `realaxis.tickvals` plus the same as negatives and zero.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`
}

// LayoutSmithRealaxisTickfont Sets the tick font.
type LayoutSmithRealaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutSmithRealaxis
type LayoutSmithRealaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutSmithRealaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutSmithRealaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutSmithRealaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// default: top
	// type: enumerated
	// Determines on which side of real axis line the tick and tick labels appear.
	Side LayoutSmithRealaxisSide `json:"side,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutSmithRealaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *top* (*bottom*), this axis' are drawn above (below) the axis line.
	Ticks LayoutSmithRealaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`
}

// LayoutSmith
type LayoutSmith struct {

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the subplot
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Domain
	// role: Object
	Domain *LayoutSmithDomain `json:"domain,omitempty"`

	// Imaginaryaxis
	// role: Object
	Imaginaryaxis *LayoutSmithImaginaryaxis `json:"imaginaryaxis,omitempty"`

	// Realaxis
	// role: Object
	Realaxis *LayoutSmithRealaxis `json:"realaxis,omitempty"`
}

// LayoutTernaryAaxisTickfont Sets the tick font.
type LayoutTernaryAaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryAaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTernaryAaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryAaxisTitle
type LayoutTernaryAaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutTernaryAaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutTernaryAaxis
type LayoutTernaryAaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutTernaryAaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutTernaryAaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Min
	// arrayOK: false
	// type: number
	// The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	Min float64 `json:"min,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutTernaryAaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutTernaryAaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutTernaryAaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutTernaryAaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutTernaryAaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutTernaryAaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutTernaryAaxisTitle `json:"title,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTernaryBaxisTickfont Sets the tick font.
type LayoutTernaryBaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryBaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTernaryBaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryBaxisTitle
type LayoutTernaryBaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutTernaryBaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutTernaryBaxis
type LayoutTernaryBaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutTernaryBaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutTernaryBaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Min
	// arrayOK: false
	// type: number
	// The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	Min float64 `json:"min,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutTernaryBaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutTernaryBaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutTernaryBaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutTernaryBaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutTernaryBaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutTernaryBaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutTernaryBaxisTitle `json:"title,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTernaryCaxisTickfont Sets the tick font.
type LayoutTernaryCaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryCaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTernaryCaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutTernaryCaxisTitle
type LayoutTernaryCaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutTernaryCaxisTitleFont `json:"font,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutTernaryCaxis
type LayoutTernaryCaxis struct {

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutTernaryCaxisExponentformat `json:"exponentformat,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutTernaryCaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Min
	// arrayOK: false
	// type: number
	// The minimum value visible on this axis. The maximum is determined by the sum minus the minimum values of the other two axes. The full view corresponds to all the minima set to zero.
	Min float64 `json:"min,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutTernaryCaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutTernaryCaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutTernaryCaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutTernaryCaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutTernaryCaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutTernaryCaxisTicks `json:"ticks,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutTernaryCaxisTitle `json:"title,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min`, and `title` if in `editable: true` configuration. Defaults to `ternary<N>.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTernaryDomain
type LayoutTernaryDomain struct {

	// Column
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this column in the grid for this ternary subplot .
	Column int64 `json:"column,omitempty"`

	// Row
	// arrayOK: false
	// type: integer
	// If there is a layout grid, use the domain for this row in the grid for this ternary subplot .
	Row int64 `json:"row,omitempty"`

	// X
	// arrayOK: false
	// type: info_array
	// Sets the horizontal domain of this ternary subplot (in plot fraction).
	X interface{} `json:"x,omitempty"`

	// Y
	// arrayOK: false
	// type: info_array
	// Sets the vertical domain of this ternary subplot (in plot fraction).
	Y interface{} `json:"y,omitempty"`
}

// LayoutTernary
type LayoutTernary struct {

	// Aaxis
	// role: Object
	Aaxis *LayoutTernaryAaxis `json:"aaxis,omitempty"`

	// Baxis
	// role: Object
	Baxis *LayoutTernaryBaxis `json:"baxis,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Set the background color of the subplot
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Caxis
	// role: Object
	Caxis *LayoutTernaryCaxis `json:"caxis,omitempty"`

	// Domain
	// role: Object
	Domain *LayoutTernaryDomain `json:"domain,omitempty"`

	// Sum
	// arrayOK: false
	// type: number
	// The number each triplet should sum to, and the maximum range of each axis
	Sum float64 `json:"sum,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `min` and `title`, if not overridden in the individual axes. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`
}

// LayoutTitleFont Sets the title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutTitlePad Sets the padding of the title. Each padding value only applies when the corresponding `xanchor`/`yanchor` value is set accordingly. E.g. for left padding to take effect, `xanchor` must be set to *left*. The same rule applies if `xanchor`/`yanchor` is determined automatically. Padding is muted if the respective anchor value is *middle*/*center*.
type LayoutTitlePad struct {

	// B
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the bottom of the component.
	B float64 `json:"b,omitempty"`

	// L
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the left side of the component.
	L float64 `json:"l,omitempty"`

	// R
	// arrayOK: false
	// type: number
	// The amount of padding (in px) on the right side of the component.
	R float64 `json:"r,omitempty"`

	// T
	// arrayOK: false
	// type: number
	// The amount of padding (in px) along the top of the component.
	T float64 `json:"t,omitempty"`
}

// LayoutTitle
type LayoutTitle struct {

	// Automargin
	// arrayOK: false
	// type: boolean
	// Determines whether the title can automatically push the figure margins. If `yref='paper'` then the margin will expand to ensure that the title doesn’t overlap with the edges of the container. If `yref='container'` then the margins will ensure that the title doesn’t overlap with the plot area, tick labels, and axis titles. If `automargin=true` and the margins need to be expanded, then y will be set to a default 1 and yanchor will be set to an appropriate default to ensure that minimal margin space is needed. Note that when `yref='paper'`, only 1 or 0 are allowed y values. Invalid values will be reset to the default 1.
	Automargin Bool `json:"automargin,omitempty"`

	// Font
	// role: Object
	Font *LayoutTitleFont `json:"font,omitempty"`

	// Pad
	// role: Object
	Pad *LayoutTitlePad `json:"pad,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the plot's title. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position with respect to `xref` in normalized coordinates from *0* (left) to *1* (right).
	X float64 `json:"x,omitempty"`

	// Xanchor
	// default: auto
	// type: enumerated
	// Sets the title's horizontal alignment with respect to its x position. *left* means that the title starts at x, *right* means that the title ends at x and *center* means that the title's center is at x. *auto* divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.
	Xanchor LayoutTitleXanchor `json:"xanchor,omitempty"`

	// Xref
	// default: container
	// type: enumerated
	// Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
	Xref LayoutTitleXref `json:"xref,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position with respect to `yref` in normalized coordinates from *0* (bottom) to *1* (top). *auto* places the baseline of the title onto the vertical center of the top margin.
	Y float64 `json:"y,omitempty"`

	// Yanchor
	// default: auto
	// type: enumerated
	// Sets the title's vertical alignment with respect to its y position. *top* means that the title's cap line is at y, *bottom* means that the title's baseline is at y and *middle* means that the title's midline is at y. *auto* divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.
	Yanchor LayoutTitleYanchor `json:"yanchor,omitempty"`

	// Yref
	// default: container
	// type: enumerated
	// Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
	Yref LayoutTitleYref `json:"yref,omitempty"`
}

// LayoutTransition Sets transition options used during Plotly.react updates.
type LayoutTransition struct {

	// Duration
	// arrayOK: false
	// type: number
	// The duration of the transition, in milliseconds. If equal to zero, updates are synchronous.
	Duration float64 `json:"duration,omitempty"`

	// Easing
	// default: cubic-in-out
	// type: enumerated
	// The easing function used for the transition
	Easing LayoutTransitionEasing `json:"easing,omitempty"`

	// Ordering
	// default: layout first
	// type: enumerated
	// Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.
	Ordering LayoutTransitionOrdering `json:"ordering,omitempty"`
}

// LayoutUniformtext
type LayoutUniformtext struct {

	// Minsize
	// arrayOK: false
	// type: number
	// Sets the minimum text size between traces of the same type.
	Minsize float64 `json:"minsize,omitempty"`

	// Mode
	// default: %!s(bool=false)
	// type: enumerated
	// Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using *hide* option hides the text; and using *show* option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.
	Mode LayoutUniformtextMode `json:"mode,omitempty"`
}

// LayoutXaxisAutorangeoptions
type LayoutXaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	Include interface{} `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	Includesrc String `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutXaxisMinor
type LayoutXaxisMinor struct {

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutXaxisMinorTickmode `json:"tickmode,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutXaxisMinorTicks `json:"ticks,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`
}

// LayoutXaxisRangeselectorFont Sets the font of the range selector button text.
type LayoutXaxisRangeselectorFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutXaxisRangeselector
type LayoutXaxisRangeselector struct {

	// Activecolor
	// arrayOK: false
	// type: color
	// Sets the background color of the active range selector button.
	Activecolor Color `json:"activecolor,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the range selector buttons.
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the color of the border enclosing the range selector.
	Bordercolor Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the border enclosing the range selector.
	Borderwidth float64 `json:"borderwidth,omitempty"`

	// Buttons
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Buttons interface{} `json:"buttons,omitempty"`

	// Font
	// role: Object
	Font *LayoutXaxisRangeselectorFont `json:"font,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not this range selector is visible. Note that range selectors are only available for x axes of `type` set to or auto-typed to *date*.
	Visible Bool `json:"visible,omitempty"`

	// X
	// arrayOK: false
	// type: number
	// Sets the x position (in normalized coordinates) of the range selector.
	X float64 `json:"x,omitempty"`

	// Xanchor
	// default: left
	// type: enumerated
	// Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
	Xanchor LayoutXaxisRangeselectorXanchor `json:"xanchor,omitempty"`

	// Y
	// arrayOK: false
	// type: number
	// Sets the y position (in normalized coordinates) of the range selector.
	Y float64 `json:"y,omitempty"`

	// Yanchor
	// default: bottom
	// type: enumerated
	// Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
	Yanchor LayoutXaxisRangeselectorYanchor `json:"yanchor,omitempty"`
}

// LayoutXaxisRangesliderYaxis
type LayoutXaxisRangesliderYaxis struct {

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis for the rangeslider.
	Range interface{} `json:"range,omitempty"`

	// Rangemode
	// default: match
	// type: enumerated
	// Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If *auto*, the autorange will be used. If *fixed*, the `range` is used. If *match*, the current range of the corresponding y-axis on the main subplot is used.
	Rangemode LayoutXaxisRangesliderYaxisRangemode `json:"rangemode,omitempty"`
}

// LayoutXaxisRangeslider
type LayoutXaxisRangeslider struct {

	// Autorange
	// arrayOK: false
	// type: boolean
	// Determines whether or not the range slider range is computed in relation to the input data. If `range` is provided, then `autorange` is set to *false*.
	Autorange Bool `json:"autorange,omitempty"`

	// Bgcolor
	// arrayOK: false
	// type: color
	// Sets the background color of the range slider.
	Bgcolor Color `json:"bgcolor,omitempty"`

	// Bordercolor
	// arrayOK: false
	// type: color
	// Sets the border color of the range slider.
	Bordercolor Color `json:"bordercolor,omitempty"`

	// Borderwidth
	// arrayOK: false
	// type: integer
	// Sets the border width of the range slider.
	Borderwidth int64 `json:"borderwidth,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of the range slider. If not set, defaults to the full xaxis range. If the axis `type` is *log*, then you must take the log of your desired range. If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears.
	Range interface{} `json:"range,omitempty"`

	// Thickness
	// arrayOK: false
	// type: number
	// The height of the range slider as a fraction of the total plot area height.
	Thickness float64 `json:"thickness,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// Determines whether or not the range slider will be visible. If visible, perpendicular axes will be set to `fixedrange`
	Visible Bool `json:"visible,omitempty"`

	// Yaxis
	// role: Object
	Yaxis *LayoutXaxisRangesliderYaxis `json:"yaxis,omitempty"`
}

// LayoutXaxisTickfont Sets the tick font.
type LayoutXaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutXaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutXaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutXaxisTitle
type LayoutXaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutXaxisTitleFont `json:"font,omitempty"`

	// Standoff
	// arrayOK: false
	// type: number
	// Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.
	Standoff float64 `json:"standoff,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutXaxis
type LayoutXaxis struct {

	// Anchor
	// default: %!s(<nil>)
	// type: enumerated
	// If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
	Anchor LayoutXaxisAnchor `json:"anchor,omitempty"`

	// Automargin
	// default: %!s(bool=false)
	// type: flaglist
	// Determines whether long tick labels automatically grow the figure margins.
	Automargin LayoutXaxisAutomargin `json:"automargin,omitempty"`

	// Autorange
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	Autorange LayoutXaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// role: Object
	Autorangeoptions *LayoutXaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autotickangles
	// arrayOK: false
	// type: info_array
	// When `tickangle` is set to *auto*, it will be set to the first angle in this array that is large enough to prevent label overlap.
	Autotickangles interface{} `json:"autotickangles,omitempty"`

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutXaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutXaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutXaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Constrain
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
	Constrain LayoutXaxisConstrain `json:"constrain,omitempty"`

	// Constraintoward
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
	Constraintoward LayoutXaxisConstraintoward `json:"constraintoward,omitempty"`

	// Dividercolor
	// arrayOK: false
	// type: color
	// Sets the color of the dividers Only has an effect on *multicategory* axes.
	Dividercolor Color `json:"dividercolor,omitempty"`

	// Dividerwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.
	Dividerwidth float64 `json:"dividerwidth,omitempty"`

	// Domain
	// arrayOK: false
	// type: info_array
	// Sets the domain of this axis (in plot fraction).
	Domain interface{} `json:"domain,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutXaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange
	// arrayOK: false
	// type: boolean
	// Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	Fixedrange Bool `json:"fixedrange,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Insiderange
	// arrayOK: false
	// type: info_array
	// Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has *inside*. Not implemented for axes with `type` *log*. This would be ignored when `range` is provided.
	Insiderange interface{} `json:"insiderange,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutXaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Matches
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
	Matches LayoutXaxisMatches `json:"matches,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Minor
	// role: Object
	Minor *LayoutXaxisMinor `json:"minor,omitempty"`

	// Mirror
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutXaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Overlaying
	// default: %!s(<nil>)
	// type: enumerated
	// If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
	Overlaying LayoutXaxisOverlaying `json:"overlaying,omitempty"`

	// Position
	// arrayOK: false
	// type: number
	// Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.
	Position float64 `json:"position,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	Range interface{} `json:"range,omitempty"`

	// Rangebreaks
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Rangebreaks interface{} `json:"rangebreaks,omitempty"`

	// Rangemode
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutXaxisRangemode `json:"rangemode,omitempty"`

	// Rangeselector
	// role: Object
	Rangeselector *LayoutXaxisRangeselector `json:"rangeselector,omitempty"`

	// Rangeslider
	// role: Object
	Rangeslider *LayoutXaxisRangeslider `json:"rangeslider,omitempty"`

	// Scaleanchor
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
	Scaleanchor LayoutXaxisScaleanchor `json:"scaleanchor,omitempty"`

	// Scaleratio
	// arrayOK: false
	// type: number
	// If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
	Scaleratio float64 `json:"scaleratio,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Showdividers
	// arrayOK: false
	// type: boolean
	// Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.
	Showdividers Bool `json:"showdividers,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutXaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutXaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutXaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
	Side LayoutXaxisSide `json:"side,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the spike color. If undefined, will use the series color
	Spikecolor Color `json:"spikecolor,omitempty"`

	// Spikedash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Spikedash String `json:"spikedash,omitempty"`

	// Spikemode
	// default: toaxis
	// type: flaglist
	// Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
	Spikemode LayoutXaxisSpikemode `json:"spikemode,omitempty"`

	// Spikesnap
	// default: hovered data
	// type: enumerated
	// Determines whether spikelines are stuck to the cursor or to the closest datapoints.
	Spikesnap LayoutXaxisSpikesnap `json:"spikesnap,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutXaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabelmode
	// default: instant
	// type: enumerated
	// Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
	Ticklabelmode LayoutXaxisTicklabelmode `json:"ticklabelmode,omitempty"`

	// Ticklabeloverflow
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
	Ticklabeloverflow LayoutXaxisTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
	Ticklabelposition LayoutXaxisTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
	Tickmode LayoutXaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutXaxisTicks `json:"ticks,omitempty"`

	// Tickson
	// default: labels
	// type: enumerated
	// Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
	Tickson LayoutXaxisTickson `json:"tickson,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutXaxisTitle `json:"title,omitempty"`

	// Type
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutXaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	Zerolinecolor Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

// LayoutYaxisAutorangeoptions
type LayoutYaxisAutorangeoptions struct {

	// Clipmax
	// arrayOK: false
	// type: any
	// Clip autorange maximum if it goes beyond this value. Has no effect when `autorangeoptions.maxallowed` is provided.
	Clipmax interface{} `json:"clipmax,omitempty"`

	// Clipmin
	// arrayOK: false
	// type: any
	// Clip autorange minimum if it goes beyond this value. Has no effect when `autorangeoptions.minallowed` is provided.
	Clipmin interface{} `json:"clipmin,omitempty"`

	// Include
	// arrayOK: true
	// type: any
	// Ensure this value is included in autorange.
	Include interface{} `json:"include,omitempty"`

	// Includesrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `include`.
	Includesrc String `json:"includesrc,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange maximum.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Use this value exactly as autorange minimum.
	Minallowed interface{} `json:"minallowed,omitempty"`
}

// LayoutYaxisMinor
type LayoutYaxisMinor struct {

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
	Tickmode LayoutYaxisMinorTickmode `json:"tickmode,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutYaxisMinorTicks `json:"ticks,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`
}

// LayoutYaxisTickfont Sets the tick font.
type LayoutYaxisTickfont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutYaxisTitleFont Sets this axis' title font. Note that the title's font used to be customized by the now deprecated `titlefont` attribute.
type LayoutYaxisTitleFont struct {

	// Color
	// arrayOK: false
	// type: color
	//
	Color Color `json:"color,omitempty"`

	// Family
	// arrayOK: false
	// type: string
	// HTML font family - the typeface that will be applied by the web browser. The web browser will only be able to apply a font if it is available on the system which it operates. Provide multiple font families, separated by commas, to indicate the preference in which to apply fonts if they aren't available on the system. The Chart Studio Cloud (at https://chart-studio.plotly.com or on-premise) generates images on a server, where only a select number of fonts are installed and supported. These include *Arial*, *Balto*, *Courier New*, *Droid Sans*,, *Droid Serif*, *Droid Sans Mono*, *Gravitas One*, *Old Standard TT*, *Open Sans*, *Overpass*, *PT Sans Narrow*, *Raleway*, *Times New Roman*.
	Family String `json:"family,omitempty"`

	// Size
	// arrayOK: false
	// type: number
	//
	Size float64 `json:"size,omitempty"`
}

// LayoutYaxisTitle
type LayoutYaxisTitle struct {

	// Font
	// role: Object
	Font *LayoutYaxisTitleFont `json:"font,omitempty"`

	// Standoff
	// arrayOK: false
	// type: number
	// Sets the standoff distance (in px) between the axis labels and the title text The default value is a function of the axis tick labels, the title `font.size` and the axis `linewidth`. Note that the axis title position is always constrained within the margins, so the actual standoff distance is always less than the set or default value. By setting `standoff` and turning on `automargin`, plotly.js will push the margins to fit the axis title at given standoff distance.
	Standoff float64 `json:"standoff,omitempty"`

	// Text
	// arrayOK: false
	// type: string
	// Sets the title of this axis. Note that before the existence of `title.text`, the title's contents used to be defined as the `title` attribute itself. This behavior has been deprecated.
	Text String `json:"text,omitempty"`
}

// LayoutYaxis
type LayoutYaxis struct {

	// Anchor
	// default: %!s(<nil>)
	// type: enumerated
	// If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
	Anchor LayoutYaxisAnchor `json:"anchor,omitempty"`

	// Automargin
	// default: %!s(bool=false)
	// type: flaglist
	// Determines whether long tick labels automatically grow the figure margins.
	Automargin LayoutYaxisAutomargin `json:"automargin,omitempty"`

	// Autorange
	// default: %!s(bool=true)
	// type: enumerated
	// Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
	Autorange LayoutYaxisAutorange `json:"autorange,omitempty"`

	// Autorangeoptions
	// role: Object
	Autorangeoptions *LayoutYaxisAutorangeoptions `json:"autorangeoptions,omitempty"`

	// Autoshift
	// arrayOK: false
	// type: boolean
	// Automatically reposition the axis to avoid overlap with other axes with the same `overlaying` value. This repositioning will account for any `shift` amount applied to other axes on the same side with `autoshift` is set to true. Only has an effect if `anchor` is set to *free*.
	Autoshift Bool `json:"autoshift,omitempty"`

	// Autotickangles
	// arrayOK: false
	// type: info_array
	// When `tickangle` is set to *auto*, it will be set to the first angle in this array that is large enough to prevent label overlap.
	Autotickangles interface{} `json:"autotickangles,omitempty"`

	// Autotypenumbers
	// default: convert types
	// type: enumerated
	// Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
	Autotypenumbers LayoutYaxisAutotypenumbers `json:"autotypenumbers,omitempty"`

	// Calendar
	// default: gregorian
	// type: enumerated
	// Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
	Calendar LayoutYaxisCalendar `json:"calendar,omitempty"`

	// Categoryarray
	// arrayOK: false
	// type: data_array
	// Sets the order in which categories on this axis appear. Only has an effect if `categoryorder` is set to *array*. Used with `categoryorder`.
	Categoryarray interface{} `json:"categoryarray,omitempty"`

	// Categoryarraysrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `categoryarray`.
	Categoryarraysrc String `json:"categoryarraysrc,omitempty"`

	// Categoryorder
	// default: trace
	// type: enumerated
	// Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
	Categoryorder LayoutYaxisCategoryorder `json:"categoryorder,omitempty"`

	// Color
	// arrayOK: false
	// type: color
	// Sets default for all colors associated with this axis all at once: line, font, tick, and grid colors. Grid color is lightened by blending this with the plot background Individual pieces can override this.
	Color Color `json:"color,omitempty"`

	// Constrain
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
	Constrain LayoutYaxisConstrain `json:"constrain,omitempty"`

	// Constraintoward
	// default: %!s(<nil>)
	// type: enumerated
	// If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
	Constraintoward LayoutYaxisConstraintoward `json:"constraintoward,omitempty"`

	// Dividercolor
	// arrayOK: false
	// type: color
	// Sets the color of the dividers Only has an effect on *multicategory* axes.
	Dividercolor Color `json:"dividercolor,omitempty"`

	// Dividerwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the dividers Only has an effect on *multicategory* axes.
	Dividerwidth float64 `json:"dividerwidth,omitempty"`

	// Domain
	// arrayOK: false
	// type: info_array
	// Sets the domain of this axis (in plot fraction).
	Domain interface{} `json:"domain,omitempty"`

	// Dtick
	// arrayOK: false
	// type: any
	// Sets the step in-between ticks on this axis. Use with `tick0`. Must be a positive number, or special strings available to *log* and *date* axes. If the axis `type` is *log*, then ticks are set every 10^(n*dtick) where n is the tick number. For example, to set a tick mark at 1, 10, 100, 1000, ... set dtick to 1. To set tick marks at 1, 100, 10000, ... set dtick to 2. To set tick marks at 1, 5, 25, 125, 625, 3125, ... set dtick to log_10(5), or 0.69897000433. *log* has several special values; *L<f>*, where `f` is a positive number, gives ticks linearly spaced in value (but not position). For example `tick0` = 0.1, `dtick` = *L0.5* will put ticks at 0.1, 0.6, 1.1, 1.6 etc. To show powers of 10 plus small digits between, use *D1* (all digits) or *D2* (only 2 and 5). `tick0` is ignored for *D1* and *D2*. If the axis `type` is *date*, then you must convert the time to milliseconds. For example, to set the interval between ticks to one day, set `dtick` to 86400000.0. *date* also has special values *M<n>* gives ticks spaced by a number of months. `n` must be a positive integer. To set ticks on the 15th of every third month, set `tick0` to *2000-01-15* and `dtick` to *M3*. To set ticks every 4 years, set `dtick` to *M48*
	Dtick interface{} `json:"dtick,omitempty"`

	// Exponentformat
	// default: B
	// type: enumerated
	// Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
	Exponentformat LayoutYaxisExponentformat `json:"exponentformat,omitempty"`

	// Fixedrange
	// arrayOK: false
	// type: boolean
	// Determines whether or not this axis is zoom-able. If true, then zoom is disabled.
	Fixedrange Bool `json:"fixedrange,omitempty"`

	// Gridcolor
	// arrayOK: false
	// type: color
	// Sets the color of the grid lines.
	Gridcolor Color `json:"gridcolor,omitempty"`

	// Griddash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Griddash String `json:"griddash,omitempty"`

	// Gridwidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the grid lines.
	Gridwidth float64 `json:"gridwidth,omitempty"`

	// Hoverformat
	// arrayOK: false
	// type: string
	// Sets the hover text formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Hoverformat String `json:"hoverformat,omitempty"`

	// Insiderange
	// arrayOK: false
	// type: info_array
	// Could be used to set the desired inside range of this axis (excluding the labels) when `ticklabelposition` of the anchored axis has *inside*. Not implemented for axes with `type` *log*. This would be ignored when `range` is provided.
	Insiderange interface{} `json:"insiderange,omitempty"`

	// Labelalias
	// arrayOK: false
	// type: any
	// Replacement text for specific tick or hover labels. For example using {US: 'USA', CA: 'Canada'} changes US to USA and CA to Canada. The labels we would have shown must match the keys exactly, after adding any tickprefix or ticksuffix. For negative numbers the minus sign symbol used (U+2212) is wider than the regular ascii dash. That means you need to use −1 instead of -1. labelalias can be used with any axis type, and both keys (if needed) and values (if desired) can include html-like tags or MathJax.
	Labelalias interface{} `json:"labelalias,omitempty"`

	// Layer
	// default: above traces
	// type: enumerated
	// Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
	Layer LayoutYaxisLayer `json:"layer,omitempty"`

	// Linecolor
	// arrayOK: false
	// type: color
	// Sets the axis line color.
	Linecolor Color `json:"linecolor,omitempty"`

	// Linewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the axis line.
	Linewidth float64 `json:"linewidth,omitempty"`

	// Matches
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
	Matches LayoutYaxisMatches `json:"matches,omitempty"`

	// Maxallowed
	// arrayOK: false
	// type: any
	// Determines the maximum range of this axis.
	Maxallowed interface{} `json:"maxallowed,omitempty"`

	// Minallowed
	// arrayOK: false
	// type: any
	// Determines the minimum range of this axis.
	Minallowed interface{} `json:"minallowed,omitempty"`

	// Minexponent
	// arrayOK: false
	// type: number
	// Hide SI prefix for 10^n if |n| is below this number. This only has an effect when `tickformat` is *SI* or *B*.
	Minexponent float64 `json:"minexponent,omitempty"`

	// Minor
	// role: Object
	Minor *LayoutYaxisMinor `json:"minor,omitempty"`

	// Mirror
	// default: %!s(bool=false)
	// type: enumerated
	// Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
	Mirror LayoutYaxisMirror `json:"mirror,omitempty"`

	// Nticks
	// arrayOK: false
	// type: integer
	// Specifies the maximum number of ticks for the particular axis. The actual number of ticks will be chosen automatically to be less than or equal to `nticks`. Has an effect only if `tickmode` is set to *auto*.
	Nticks int64 `json:"nticks,omitempty"`

	// Overlaying
	// default: %!s(<nil>)
	// type: enumerated
	// If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
	Overlaying LayoutYaxisOverlaying `json:"overlaying,omitempty"`

	// Position
	// arrayOK: false
	// type: number
	// Sets the position of this axis in the plotting space (in normalized coordinates). Only has an effect if `anchor` is set to *free*.
	Position float64 `json:"position,omitempty"`

	// Range
	// arrayOK: false
	// type: info_array
	// Sets the range of this axis. If the axis `type` is *log*, then you must take the log of your desired range (e.g. to set the range from 1 to 100, set the range from 0 to 2). If the axis `type` is *date*, it should be date strings, like date data, though Date objects and unix milliseconds will be accepted and converted to strings. If the axis `type` is *category*, it should be numbers, using the scale where each category is assigned a serial number from zero in the order it appears. Leaving either or both elements `null` impacts the default `autorange`.
	Range interface{} `json:"range,omitempty"`

	// Rangebreaks
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Rangebreaks interface{} `json:"rangebreaks,omitempty"`

	// Rangemode
	// default: normal
	// type: enumerated
	// If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
	Rangemode LayoutYaxisRangemode `json:"rangemode,omitempty"`

	// Scaleanchor
	// default: %!s(<nil>)
	// type: enumerated
	// If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
	Scaleanchor LayoutYaxisScaleanchor `json:"scaleanchor,omitempty"`

	// Scaleratio
	// arrayOK: false
	// type: number
	// If this axis is linked to another by `scaleanchor`, this determines the pixel to unit scale ratio. For example, if this value is 10, then every unit on this axis spans 10 times the number of pixels as a unit on the linked axis. Use this for example to create an elevation profile where the vertical scale is exaggerated a fixed amount with respect to the horizontal.
	Scaleratio float64 `json:"scaleratio,omitempty"`

	// Separatethousands
	// arrayOK: false
	// type: boolean
	// If "true", even 4-digit integers are separated
	Separatethousands Bool `json:"separatethousands,omitempty"`

	// Shift
	// arrayOK: false
	// type: number
	// Moves the axis a given number of pixels from where it would have been otherwise. Accepts both positive and negative values, which will shift the axis either right or left, respectively. If `autoshift` is set to true, then this defaults to a padding of -3 if `side` is set to *left*. and defaults to +3 if `side` is set to *right*. Defaults to 0 if `autoshift` is set to false. Only has an effect if `anchor` is set to *free*.
	Shift float64 `json:"shift,omitempty"`

	// Showdividers
	// arrayOK: false
	// type: boolean
	// Determines whether or not a dividers are drawn between the category levels of this axis. Only has an effect on *multicategory* axes.
	Showdividers Bool `json:"showdividers,omitempty"`

	// Showexponent
	// default: all
	// type: enumerated
	// If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
	Showexponent LayoutYaxisShowexponent `json:"showexponent,omitempty"`

	// Showgrid
	// arrayOK: false
	// type: boolean
	// Determines whether or not grid lines are drawn. If *true*, the grid lines are drawn at every tick mark.
	Showgrid Bool `json:"showgrid,omitempty"`

	// Showline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line bounding this axis is drawn.
	Showline Bool `json:"showline,omitempty"`

	// Showspikes
	// arrayOK: false
	// type: boolean
	// Determines whether or not spikes (aka droplines) are drawn for this axis. Note: This only takes affect when hovermode = closest
	Showspikes Bool `json:"showspikes,omitempty"`

	// Showticklabels
	// arrayOK: false
	// type: boolean
	// Determines whether or not the tick labels are drawn.
	Showticklabels Bool `json:"showticklabels,omitempty"`

	// Showtickprefix
	// default: all
	// type: enumerated
	// If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
	Showtickprefix LayoutYaxisShowtickprefix `json:"showtickprefix,omitempty"`

	// Showticksuffix
	// default: all
	// type: enumerated
	// Same as `showtickprefix` but for tick suffixes.
	Showticksuffix LayoutYaxisShowticksuffix `json:"showticksuffix,omitempty"`

	// Side
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
	Side LayoutYaxisSide `json:"side,omitempty"`

	// Spikecolor
	// arrayOK: false
	// type: color
	// Sets the spike color. If undefined, will use the series color
	Spikecolor Color `json:"spikecolor,omitempty"`

	// Spikedash
	// arrayOK: false
	// type: string
	// Sets the dash style of lines. Set to a dash type string (*solid*, *dot*, *dash*, *longdash*, *dashdot*, or *longdashdot*) or a dash length list in px (eg *5px,10px,2px,2px*).
	Spikedash String `json:"spikedash,omitempty"`

	// Spikemode
	// default: toaxis
	// type: flaglist
	// Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
	Spikemode LayoutYaxisSpikemode `json:"spikemode,omitempty"`

	// Spikesnap
	// default: hovered data
	// type: enumerated
	// Determines whether spikelines are stuck to the cursor or to the closest datapoints.
	Spikesnap LayoutYaxisSpikesnap `json:"spikesnap,omitempty"`

	// Spikethickness
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	Spikethickness float64 `json:"spikethickness,omitempty"`

	// Tick0
	// arrayOK: false
	// type: any
	// Sets the placement of the first tick on this axis. Use with `dtick`. If the axis `type` is *log*, then you must take the log of your starting tick (e.g. to set the starting tick to 100, set the `tick0` to 2) except when `dtick`=*L<f>* (see `dtick` for more info). If the axis `type` is *date*, it should be a date string, like date data. If the axis `type` is *category*, it should be a number, using the scale where each category is assigned a serial number from zero in the order it appears.
	Tick0 interface{} `json:"tick0,omitempty"`

	// Tickangle
	// arrayOK: false
	// type: angle
	// Sets the angle of the tick labels with respect to the horizontal. For example, a `tickangle` of -90 draws the tick labels vertically.
	Tickangle float64 `json:"tickangle,omitempty"`

	// Tickcolor
	// arrayOK: false
	// type: color
	// Sets the tick color.
	Tickcolor Color `json:"tickcolor,omitempty"`

	// Tickfont
	// role: Object
	Tickfont *LayoutYaxisTickfont `json:"tickfont,omitempty"`

	// Tickformat
	// arrayOK: false
	// type: string
	// Sets the tick label formatting rule using d3 formatting mini-languages which are very similar to those in Python. For numbers, see: https://github.com/d3/d3-format/tree/v1.4.5#d3-format. And for dates see: https://github.com/d3/d3-time-format/tree/v2.2.3#locale_format. We add two items to d3's date formatter: *%h* for half of the year as a decimal number as well as *%{n}f* for fractional seconds with n digits. For example, *2016-10-13 09:15:23.456* with tickformat *%H~%M~%S.%2f* would display *09~15~23.46*
	Tickformat String `json:"tickformat,omitempty"`

	// Tickformatstops
	// It's an items array and what goes inside it's... messy... check the docs
	// I will be happy if you want to contribute by implementing this
	// just raise an issue before you start so we do not overlap
	Tickformatstops interface{} `json:"tickformatstops,omitempty"`

	// Ticklabelmode
	// default: instant
	// type: enumerated
	// Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
	Ticklabelmode LayoutYaxisTicklabelmode `json:"ticklabelmode,omitempty"`

	// Ticklabeloverflow
	// default: %!s(<nil>)
	// type: enumerated
	// Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
	Ticklabeloverflow LayoutYaxisTicklabeloverflow `json:"ticklabeloverflow,omitempty"`

	// Ticklabelposition
	// default: outside
	// type: enumerated
	// Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
	Ticklabelposition LayoutYaxisTicklabelposition `json:"ticklabelposition,omitempty"`

	// Ticklabelstep
	// arrayOK: false
	// type: integer
	// Sets the spacing between tick labels as compared to the spacing between ticks. A value of 1 (default) means each tick gets a label. A value of 2 means shows every 2nd label. A larger value n means only every nth tick is labeled. `tick0` determines which labels are shown. Not implemented for axes with `type` *log* or *multicategory*, or when `tickmode` is *array*.
	Ticklabelstep int64 `json:"ticklabelstep,omitempty"`

	// Ticklen
	// arrayOK: false
	// type: number
	// Sets the tick length (in px).
	Ticklen float64 `json:"ticklen,omitempty"`

	// Tickmode
	// default: %!s(<nil>)
	// type: enumerated
	// Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
	Tickmode LayoutYaxisTickmode `json:"tickmode,omitempty"`

	// Tickprefix
	// arrayOK: false
	// type: string
	// Sets a tick label prefix.
	Tickprefix String `json:"tickprefix,omitempty"`

	// Ticks
	// default: %!s(<nil>)
	// type: enumerated
	// Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
	Ticks LayoutYaxisTicks `json:"ticks,omitempty"`

	// Tickson
	// default: labels
	// type: enumerated
	// Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
	Tickson LayoutYaxisTickson `json:"tickson,omitempty"`

	// Ticksuffix
	// arrayOK: false
	// type: string
	// Sets a tick label suffix.
	Ticksuffix String `json:"ticksuffix,omitempty"`

	// Ticktext
	// arrayOK: false
	// type: data_array
	// Sets the text displayed at the ticks position via `tickvals`. Only has an effect if `tickmode` is set to *array*. Used with `tickvals`.
	Ticktext interface{} `json:"ticktext,omitempty"`

	// Ticktextsrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `ticktext`.
	Ticktextsrc String `json:"ticktextsrc,omitempty"`

	// Tickvals
	// arrayOK: false
	// type: data_array
	// Sets the values at which ticks on this axis appear. Only has an effect if `tickmode` is set to *array*. Used with `ticktext`.
	Tickvals interface{} `json:"tickvals,omitempty"`

	// Tickvalssrc
	// arrayOK: false
	// type: string
	// Sets the source reference on Chart Studio Cloud for `tickvals`.
	Tickvalssrc String `json:"tickvalssrc,omitempty"`

	// Tickwidth
	// arrayOK: false
	// type: number
	// Sets the tick width (in px).
	Tickwidth float64 `json:"tickwidth,omitempty"`

	// Title
	// role: Object
	Title *LayoutYaxisTitle `json:"title,omitempty"`

	// Type
	// default: -
	// type: enumerated
	// Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
	Type LayoutYaxisType `json:"type,omitempty"`

	// Uirevision
	// arrayOK: false
	// type: any
	// Controls persistence of user-driven changes in axis `range`, `autorange`, and `title` if in `editable: true` configuration. Defaults to `layout.uirevision`.
	Uirevision interface{} `json:"uirevision,omitempty"`

	// Visible
	// arrayOK: false
	// type: boolean
	// A single toggle to hide the axis while preserving interaction like dragging. Default is true when a cheater plot is present on the axis, otherwise false
	Visible Bool `json:"visible,omitempty"`

	// Zeroline
	// arrayOK: false
	// type: boolean
	// Determines whether or not a line is drawn at along the 0 value of this axis. If *true*, the zero line is drawn on top of the grid lines.
	Zeroline Bool `json:"zeroline,omitempty"`

	// Zerolinecolor
	// arrayOK: false
	// type: color
	// Sets the line color of the zero line.
	Zerolinecolor Color `json:"zerolinecolor,omitempty"`

	// Zerolinewidth
	// arrayOK: false
	// type: number
	// Sets the width (in px) of the zero line.
	Zerolinewidth float64 `json:"zerolinewidth,omitempty"`
}

// LayoutAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. This is the default value; however it could be overridden for individual axes.
type LayoutAutotypenumbers string

const (
	LayoutAutotypenumbersConvertTypes LayoutAutotypenumbers = "convert types"
	LayoutAutotypenumbersStrict       LayoutAutotypenumbers = "strict"
)

// LayoutBarmode Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *relative*, the bars are stacked on top of one another, with negative values below the axis, positive values above With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
type LayoutBarmode string

const (
	HistogramBarmodeStack    LayoutBarmode = "stack"
	HistogramBarmodeGroup    LayoutBarmode = "group"
	HistogramBarmodeOverlay  LayoutBarmode = "overlay"
	HistogramBarmodeRelative LayoutBarmode = "relative"
	BarBarmodeStack          LayoutBarmode = "stack"
	BarBarmodeGroup          LayoutBarmode = "group"
	BarBarmodeOverlay        LayoutBarmode = "overlay"
	BarBarmodeRelative       LayoutBarmode = "relative"
	BarpolarBarmodeStack     LayoutBarmode = "stack"
	BarpolarBarmodeOverlay   LayoutBarmode = "overlay"
)

// LayoutBarnorm Sets the normalization for bar traces on the graph. With *fraction*, the value of each bar is divided by the sum of all values at that location coordinate. *percent* is the same but multiplied by 100 to show percentages.
type LayoutBarnorm string

const (
	BarBarnormEmpty          LayoutBarnorm = ""
	BarBarnormFraction       LayoutBarnorm = "fraction"
	BarBarnormPercent        LayoutBarnorm = "percent"
	HistogramBarnormEmpty    LayoutBarnorm = ""
	HistogramBarnormFraction LayoutBarnorm = "fraction"
	HistogramBarnormPercent  LayoutBarnorm = "percent"
)

// LayoutBoxmode Determines how boxes at the same location coordinate are displayed on the graph. If *group*, the boxes are plotted next to one another centered around the shared location. If *overlay*, the boxes are plotted over one another, you might need to set *opacity* to see them multiple boxes. Has no effect on traces that have *width* set.
type LayoutBoxmode string

const (
	BoxBoxmodeGroup           LayoutBoxmode = "group"
	BoxBoxmodeOverlay         LayoutBoxmode = "overlay"
	CandlestickBoxmodeGroup   LayoutBoxmode = "group"
	CandlestickBoxmodeOverlay LayoutBoxmode = "overlay"
)

// LayoutCalendar Sets the default calendar system to use for interpreting and displaying dates throughout the plot.
type LayoutCalendar string

const (
	LayoutCalendarChinese    LayoutCalendar = "chinese"
	LayoutCalendarCoptic     LayoutCalendar = "coptic"
	LayoutCalendarDiscworld  LayoutCalendar = "discworld"
	LayoutCalendarEthiopian  LayoutCalendar = "ethiopian"
	LayoutCalendarGregorian  LayoutCalendar = "gregorian"
	LayoutCalendarHebrew     LayoutCalendar = "hebrew"
	LayoutCalendarIslamic    LayoutCalendar = "islamic"
	LayoutCalendarJalali     LayoutCalendar = "jalali"
	LayoutCalendarJulian     LayoutCalendar = "julian"
	LayoutCalendarMayan      LayoutCalendar = "mayan"
	LayoutCalendarNanakshahi LayoutCalendar = "nanakshahi"
	LayoutCalendarNepali     LayoutCalendar = "nepali"
	LayoutCalendarPersian    LayoutCalendar = "persian"
	LayoutCalendarTaiwan     LayoutCalendar = "taiwan"
	LayoutCalendarThai       LayoutCalendar = "thai"
	LayoutCalendarUmmalqura  LayoutCalendar = "ummalqura"
)

// LayoutColoraxisColorbarExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutColoraxisColorbarExponentformat string

const (
	LayoutColoraxisColorbarExponentformatNone  LayoutColoraxisColorbarExponentformat = "none"
	LayoutColoraxisColorbarExponentformatE1    LayoutColoraxisColorbarExponentformat = "e"
	LayoutColoraxisColorbarExponentformatE2    LayoutColoraxisColorbarExponentformat = "E"
	LayoutColoraxisColorbarExponentformatPower LayoutColoraxisColorbarExponentformat = "power"
	LayoutColoraxisColorbarExponentformatSI    LayoutColoraxisColorbarExponentformat = "SI"
	LayoutColoraxisColorbarExponentformatB     LayoutColoraxisColorbarExponentformat = "B"
)

// LayoutColoraxisColorbarLenmode Determines whether this color bar's length (i.e. the measure in the color variation direction) is set in units of plot *fraction* or in *pixels. Use `len` to set the value.
type LayoutColoraxisColorbarLenmode string

const (
	LayoutColoraxisColorbarLenmodeFraction LayoutColoraxisColorbarLenmode = "fraction"
	LayoutColoraxisColorbarLenmodePixels   LayoutColoraxisColorbarLenmode = "pixels"
)

// LayoutColoraxisColorbarOrientation Sets the orientation of the colorbar.
type LayoutColoraxisColorbarOrientation string

const (
	LayoutColoraxisColorbarOrientationH LayoutColoraxisColorbarOrientation = "h"
	LayoutColoraxisColorbarOrientationV LayoutColoraxisColorbarOrientation = "v"
)

// LayoutColoraxisColorbarShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutColoraxisColorbarShowexponent string

const (
	LayoutColoraxisColorbarShowexponentAll   LayoutColoraxisColorbarShowexponent = "all"
	LayoutColoraxisColorbarShowexponentFirst LayoutColoraxisColorbarShowexponent = "first"
	LayoutColoraxisColorbarShowexponentLast  LayoutColoraxisColorbarShowexponent = "last"
	LayoutColoraxisColorbarShowexponentNone  LayoutColoraxisColorbarShowexponent = "none"
)

// LayoutColoraxisColorbarShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutColoraxisColorbarShowtickprefix string

const (
	LayoutColoraxisColorbarShowtickprefixAll   LayoutColoraxisColorbarShowtickprefix = "all"
	LayoutColoraxisColorbarShowtickprefixFirst LayoutColoraxisColorbarShowtickprefix = "first"
	LayoutColoraxisColorbarShowtickprefixLast  LayoutColoraxisColorbarShowtickprefix = "last"
	LayoutColoraxisColorbarShowtickprefixNone  LayoutColoraxisColorbarShowtickprefix = "none"
)

// LayoutColoraxisColorbarShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutColoraxisColorbarShowticksuffix string

const (
	LayoutColoraxisColorbarShowticksuffixAll   LayoutColoraxisColorbarShowticksuffix = "all"
	LayoutColoraxisColorbarShowticksuffixFirst LayoutColoraxisColorbarShowticksuffix = "first"
	LayoutColoraxisColorbarShowticksuffixLast  LayoutColoraxisColorbarShowticksuffix = "last"
	LayoutColoraxisColorbarShowticksuffixNone  LayoutColoraxisColorbarShowticksuffix = "none"
)

// LayoutColoraxisColorbarThicknessmode Determines whether this color bar's thickness (i.e. the measure in the constant color direction) is set in units of plot *fraction* or in *pixels*. Use `thickness` to set the value.
type LayoutColoraxisColorbarThicknessmode string

const (
	LayoutColoraxisColorbarThicknessmodeFraction LayoutColoraxisColorbarThicknessmode = "fraction"
	LayoutColoraxisColorbarThicknessmodePixels   LayoutColoraxisColorbarThicknessmode = "pixels"
)

// LayoutColoraxisColorbarTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. In other cases the default is *hide past div*.
type LayoutColoraxisColorbarTicklabeloverflow string

const (
	LayoutColoraxisColorbarTicklabeloverflowAllow          LayoutColoraxisColorbarTicklabeloverflow = "allow"
	LayoutColoraxisColorbarTicklabeloverflowHidePastDiv    LayoutColoraxisColorbarTicklabeloverflow = "hide past div"
	LayoutColoraxisColorbarTicklabeloverflowHidePastDomain LayoutColoraxisColorbarTicklabeloverflow = "hide past domain"
)

// LayoutColoraxisColorbarTicklabelposition Determines where tick labels are drawn relative to the ticks. Left and right options are used when `orientation` is *h*, top and bottom when `orientation` is *v*.
type LayoutColoraxisColorbarTicklabelposition string

const (
	LayoutColoraxisColorbarTicklabelpositionOutside       LayoutColoraxisColorbarTicklabelposition = "outside"
	LayoutColoraxisColorbarTicklabelpositionInside        LayoutColoraxisColorbarTicklabelposition = "inside"
	LayoutColoraxisColorbarTicklabelpositionOutsideTop    LayoutColoraxisColorbarTicklabelposition = "outside top"
	LayoutColoraxisColorbarTicklabelpositionInsideTop     LayoutColoraxisColorbarTicklabelposition = "inside top"
	LayoutColoraxisColorbarTicklabelpositionOutsideLeft   LayoutColoraxisColorbarTicklabelposition = "outside left"
	LayoutColoraxisColorbarTicklabelpositionInsideLeft    LayoutColoraxisColorbarTicklabelposition = "inside left"
	LayoutColoraxisColorbarTicklabelpositionOutsideRight  LayoutColoraxisColorbarTicklabelposition = "outside right"
	LayoutColoraxisColorbarTicklabelpositionInsideRight   LayoutColoraxisColorbarTicklabelposition = "inside right"
	LayoutColoraxisColorbarTicklabelpositionOutsideBottom LayoutColoraxisColorbarTicklabelposition = "outside bottom"
	LayoutColoraxisColorbarTicklabelpositionInsideBottom  LayoutColoraxisColorbarTicklabelposition = "inside bottom"
)

// LayoutColoraxisColorbarTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutColoraxisColorbarTickmode string

const (
	LayoutColoraxisColorbarTickmodeAuto   LayoutColoraxisColorbarTickmode = "auto"
	LayoutColoraxisColorbarTickmodeLinear LayoutColoraxisColorbarTickmode = "linear"
	LayoutColoraxisColorbarTickmodeArray  LayoutColoraxisColorbarTickmode = "array"
)

// LayoutColoraxisColorbarTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutColoraxisColorbarTicks string

const (
	LayoutColoraxisColorbarTicksOutside LayoutColoraxisColorbarTicks = "outside"
	LayoutColoraxisColorbarTicksInside  LayoutColoraxisColorbarTicks = "inside"
	LayoutColoraxisColorbarTicksEmpty   LayoutColoraxisColorbarTicks = ""
)

// LayoutColoraxisColorbarTitleSide Determines the location of color bar's title with respect to the color bar. Defaults to *top* when `orientation` if *v* and  defaults to *right* when `orientation` if *h*. Note that the title's location used to be set by the now deprecated `titleside` attribute.
type LayoutColoraxisColorbarTitleSide string

const (
	LayoutColoraxisColorbarTitleSideRight  LayoutColoraxisColorbarTitleSide = "right"
	LayoutColoraxisColorbarTitleSideTop    LayoutColoraxisColorbarTitleSide = "top"
	LayoutColoraxisColorbarTitleSideBottom LayoutColoraxisColorbarTitleSide = "bottom"
)

// LayoutColoraxisColorbarXanchor Sets this color bar's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the color bar. Defaults to *left* when `orientation` is *v* and *center* when `orientation` is *h*.
type LayoutColoraxisColorbarXanchor string

const (
	LayoutColoraxisColorbarXanchorLeft   LayoutColoraxisColorbarXanchor = "left"
	LayoutColoraxisColorbarXanchorCenter LayoutColoraxisColorbarXanchor = "center"
	LayoutColoraxisColorbarXanchorRight  LayoutColoraxisColorbarXanchor = "right"
)

// LayoutColoraxisColorbarXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type LayoutColoraxisColorbarXref string

const (
	LayoutColoraxisColorbarXrefContainer LayoutColoraxisColorbarXref = "container"
	LayoutColoraxisColorbarXrefPaper     LayoutColoraxisColorbarXref = "paper"
)

// LayoutColoraxisColorbarYanchor Sets this color bar's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the color bar. Defaults to *middle* when `orientation` is *v* and *bottom* when `orientation` is *h*.
type LayoutColoraxisColorbarYanchor string

const (
	LayoutColoraxisColorbarYanchorTop    LayoutColoraxisColorbarYanchor = "top"
	LayoutColoraxisColorbarYanchorMiddle LayoutColoraxisColorbarYanchor = "middle"
	LayoutColoraxisColorbarYanchorBottom LayoutColoraxisColorbarYanchor = "bottom"
)

// LayoutColoraxisColorbarYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type LayoutColoraxisColorbarYref string

const (
	LayoutColoraxisColorbarYrefContainer LayoutColoraxisColorbarYref = "container"
	LayoutColoraxisColorbarYrefPaper     LayoutColoraxisColorbarYref = "paper"
)

// LayoutDragmode Determines the mode of drag interactions. *select* and *lasso* apply only to scatter traces with markers or text. *orbit* and *turntable* apply only to 3D scenes.
type LayoutDragmode interface{}

var (
	LayoutDragmodeZoom           LayoutDragmode = "zoom"
	LayoutDragmodePan            LayoutDragmode = "pan"
	LayoutDragmodeSelect         LayoutDragmode = "select"
	LayoutDragmodeLasso          LayoutDragmode = "lasso"
	LayoutDragmodeDrawclosedpath LayoutDragmode = "drawclosedpath"
	LayoutDragmodeDrawopenpath   LayoutDragmode = "drawopenpath"
	LayoutDragmodeDrawline       LayoutDragmode = "drawline"
	LayoutDragmodeDrawrect       LayoutDragmode = "drawrect"
	LayoutDragmodeDrawcircle     LayoutDragmode = "drawcircle"
	LayoutDragmodeOrbit          LayoutDragmode = "orbit"
	LayoutDragmodeTurntable      LayoutDragmode = "turntable"
	LayoutDragmodeFalse          LayoutDragmode = false
)

// LayoutFunnelmode Determines how bars at the same location coordinate are displayed on the graph. With *stack*, the bars are stacked on top of one another With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
type LayoutFunnelmode string

const (
	FunnelFunnelmodeStack   LayoutFunnelmode = "stack"
	FunnelFunnelmodeGroup   LayoutFunnelmode = "group"
	FunnelFunnelmodeOverlay LayoutFunnelmode = "overlay"
)

// LayoutGeoFitbounds Determines if this subplot's view settings are auto-computed to fit trace data. On scoped maps, setting `fitbounds` leads to `center.lon` and `center.lat` getting auto-filled. On maps with a non-clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, and `projection.rotation.lon` getting auto-filled. On maps with a clipped projection, setting `fitbounds` leads to `center.lon`, `center.lat`, `projection.rotation.lon`, `projection.rotation.lat`, `lonaxis.range` and `lonaxis.range` getting auto-filled. If *locations*, only the trace's visible locations are considered in the `fitbounds` computations. If *geojson*, the entire trace input `geojson` (if provided) is considered in the `fitbounds` computations, Defaults to *false*.
type LayoutGeoFitbounds interface{}

var (
	LayoutGeoFitboundsFalse     LayoutGeoFitbounds = false
	LayoutGeoFitboundsLocations LayoutGeoFitbounds = "locations"
	LayoutGeoFitboundsGeojson   LayoutGeoFitbounds = "geojson"
)

// LayoutGeoProjectionType Sets the projection type.
type LayoutGeoProjectionType string

const (
	LayoutGeoProjectionTypeAiry                     LayoutGeoProjectionType = "airy"
	LayoutGeoProjectionTypeAitoff                   LayoutGeoProjectionType = "aitoff"
	LayoutGeoProjectionTypeAlbers                   LayoutGeoProjectionType = "albers"
	LayoutGeoProjectionTypeAlbersUsa                LayoutGeoProjectionType = "albers usa"
	LayoutGeoProjectionTypeAugust                   LayoutGeoProjectionType = "august"
	LayoutGeoProjectionTypeAzimuthalEqualArea       LayoutGeoProjectionType = "azimuthal equal area"
	LayoutGeoProjectionTypeAzimuthalEquidistant     LayoutGeoProjectionType = "azimuthal equidistant"
	LayoutGeoProjectionTypeBaker                    LayoutGeoProjectionType = "baker"
	LayoutGeoProjectionTypeBertin1953               LayoutGeoProjectionType = "bertin1953"
	LayoutGeoProjectionTypeBoggs                    LayoutGeoProjectionType = "boggs"
	LayoutGeoProjectionTypeBonne                    LayoutGeoProjectionType = "bonne"
	LayoutGeoProjectionTypeBottomley                LayoutGeoProjectionType = "bottomley"
	LayoutGeoProjectionTypeBromley                  LayoutGeoProjectionType = "bromley"
	LayoutGeoProjectionTypeCollignon                LayoutGeoProjectionType = "collignon"
	LayoutGeoProjectionTypeConicConformal           LayoutGeoProjectionType = "conic conformal"
	LayoutGeoProjectionTypeConicEqualArea           LayoutGeoProjectionType = "conic equal area"
	LayoutGeoProjectionTypeConicEquidistant         LayoutGeoProjectionType = "conic equidistant"
	LayoutGeoProjectionTypeCraig                    LayoutGeoProjectionType = "craig"
	LayoutGeoProjectionTypeCraster                  LayoutGeoProjectionType = "craster"
	LayoutGeoProjectionTypeCylindricalEqualArea     LayoutGeoProjectionType = "cylindrical equal area"
	LayoutGeoProjectionTypeCylindricalStereographic LayoutGeoProjectionType = "cylindrical stereographic"
	LayoutGeoProjectionTypeEckert1                  LayoutGeoProjectionType = "eckert1"
	LayoutGeoProjectionTypeEckert2                  LayoutGeoProjectionType = "eckert2"
	LayoutGeoProjectionTypeEckert3                  LayoutGeoProjectionType = "eckert3"
	LayoutGeoProjectionTypeEckert4                  LayoutGeoProjectionType = "eckert4"
	LayoutGeoProjectionTypeEckert5                  LayoutGeoProjectionType = "eckert5"
	LayoutGeoProjectionTypeEckert6                  LayoutGeoProjectionType = "eckert6"
	LayoutGeoProjectionTypeEisenlohr                LayoutGeoProjectionType = "eisenlohr"
	LayoutGeoProjectionTypeEqualEarth               LayoutGeoProjectionType = "equal earth"
	LayoutGeoProjectionTypeEquirectangular          LayoutGeoProjectionType = "equirectangular"
	LayoutGeoProjectionTypeFahey                    LayoutGeoProjectionType = "fahey"
	LayoutGeoProjectionTypeFoucaut                  LayoutGeoProjectionType = "foucaut"
	LayoutGeoProjectionTypeFoucautSinusoidal        LayoutGeoProjectionType = "foucaut sinusoidal"
	LayoutGeoProjectionTypeGinzburg4                LayoutGeoProjectionType = "ginzburg4"
	LayoutGeoProjectionTypeGinzburg5                LayoutGeoProjectionType = "ginzburg5"
	LayoutGeoProjectionTypeGinzburg6                LayoutGeoProjectionType = "ginzburg6"
	LayoutGeoProjectionTypeGinzburg8                LayoutGeoProjectionType = "ginzburg8"
	LayoutGeoProjectionTypeGinzburg9                LayoutGeoProjectionType = "ginzburg9"
	LayoutGeoProjectionTypeGnomonic                 LayoutGeoProjectionType = "gnomonic"
	LayoutGeoProjectionTypeGringorten               LayoutGeoProjectionType = "gringorten"
	LayoutGeoProjectionTypeGringortenQuincuncial    LayoutGeoProjectionType = "gringorten quincuncial"
	LayoutGeoProjectionTypeGuyou                    LayoutGeoProjectionType = "guyou"
	LayoutGeoProjectionTypeHammer                   LayoutGeoProjectionType = "hammer"
	LayoutGeoProjectionTypeHill                     LayoutGeoProjectionType = "hill"
	LayoutGeoProjectionTypeHomolosine               LayoutGeoProjectionType = "homolosine"
	LayoutGeoProjectionTypeHufnagel                 LayoutGeoProjectionType = "hufnagel"
	LayoutGeoProjectionTypeHyperelliptical          LayoutGeoProjectionType = "hyperelliptical"
	LayoutGeoProjectionTypeKavrayskiy7              LayoutGeoProjectionType = "kavrayskiy7"
	LayoutGeoProjectionTypeLagrange                 LayoutGeoProjectionType = "lagrange"
	LayoutGeoProjectionTypeLarrivee                 LayoutGeoProjectionType = "larrivee"
	LayoutGeoProjectionTypeLaskowski                LayoutGeoProjectionType = "laskowski"
	LayoutGeoProjectionTypeLoximuthal               LayoutGeoProjectionType = "loximuthal"
	LayoutGeoProjectionTypeMercator                 LayoutGeoProjectionType = "mercator"
	LayoutGeoProjectionTypeMiller                   LayoutGeoProjectionType = "miller"
	LayoutGeoProjectionTypeMollweide                LayoutGeoProjectionType = "mollweide"
	LayoutGeoProjectionTypeMtFlatPolarParabolic     LayoutGeoProjectionType = "mt flat polar parabolic"
	LayoutGeoProjectionTypeMtFlatPolarQuartic       LayoutGeoProjectionType = "mt flat polar quartic"
	LayoutGeoProjectionTypeMtFlatPolarSinusoidal    LayoutGeoProjectionType = "mt flat polar sinusoidal"
	LayoutGeoProjectionTypeNaturalEarth             LayoutGeoProjectionType = "natural earth"
	LayoutGeoProjectionTypeNaturalEarth1            LayoutGeoProjectionType = "natural earth1"
	LayoutGeoProjectionTypeNaturalEarth2            LayoutGeoProjectionType = "natural earth2"
	LayoutGeoProjectionTypeNellHammer               LayoutGeoProjectionType = "nell hammer"
	LayoutGeoProjectionTypeNicolosi                 LayoutGeoProjectionType = "nicolosi"
	LayoutGeoProjectionTypeOrthographic             LayoutGeoProjectionType = "orthographic"
	LayoutGeoProjectionTypePatterson                LayoutGeoProjectionType = "patterson"
	LayoutGeoProjectionTypePeirceQuincuncial        LayoutGeoProjectionType = "peirce quincuncial"
	LayoutGeoProjectionTypePolyconic                LayoutGeoProjectionType = "polyconic"
	LayoutGeoProjectionTypeRectangularPolyconic     LayoutGeoProjectionType = "rectangular polyconic"
	LayoutGeoProjectionTypeRobinson                 LayoutGeoProjectionType = "robinson"
	LayoutGeoProjectionTypeSatellite                LayoutGeoProjectionType = "satellite"
	LayoutGeoProjectionTypeSinuMollweide            LayoutGeoProjectionType = "sinu mollweide"
	LayoutGeoProjectionTypeSinusoidal               LayoutGeoProjectionType = "sinusoidal"
	LayoutGeoProjectionTypeStereographic            LayoutGeoProjectionType = "stereographic"
	LayoutGeoProjectionTypeTimes                    LayoutGeoProjectionType = "times"
	LayoutGeoProjectionTypeTransverseMercator       LayoutGeoProjectionType = "transverse mercator"
	LayoutGeoProjectionTypeVanDerGrinten            LayoutGeoProjectionType = "van der grinten"
	LayoutGeoProjectionTypeVanDerGrinten2           LayoutGeoProjectionType = "van der grinten2"
	LayoutGeoProjectionTypeVanDerGrinten3           LayoutGeoProjectionType = "van der grinten3"
	LayoutGeoProjectionTypeVanDerGrinten4           LayoutGeoProjectionType = "van der grinten4"
	LayoutGeoProjectionTypeWagner4                  LayoutGeoProjectionType = "wagner4"
	LayoutGeoProjectionTypeWagner6                  LayoutGeoProjectionType = "wagner6"
	LayoutGeoProjectionTypeWiechel                  LayoutGeoProjectionType = "wiechel"
	LayoutGeoProjectionTypeWinkelTripel             LayoutGeoProjectionType = "winkel tripel"
	LayoutGeoProjectionTypeWinkel3                  LayoutGeoProjectionType = "winkel3"
)

// LayoutGeoResolution Sets the resolution of the base layers. The values have units of km/mm e.g. 110 corresponds to a scale ratio of 1:110,000,000.
type LayoutGeoResolution interface{}

var (
	LayoutGeoResolutionNumber110 LayoutGeoResolution = 110
	LayoutGeoResolutionNumber50  LayoutGeoResolution = 50
)

// LayoutGeoScope Set the scope of the map.
type LayoutGeoScope string

const (
	LayoutGeoScopeAfrica       LayoutGeoScope = "africa"
	LayoutGeoScopeAsia         LayoutGeoScope = "asia"
	LayoutGeoScopeEurope       LayoutGeoScope = "europe"
	LayoutGeoScopeNorthAmerica LayoutGeoScope = "north america"
	LayoutGeoScopeSouthAmerica LayoutGeoScope = "south america"
	LayoutGeoScopeUsa          LayoutGeoScope = "usa"
	LayoutGeoScopeWorld        LayoutGeoScope = "world"
)

// LayoutGridPattern If no `subplots`, `xaxes`, or `yaxes` are given but we do have `rows` and `columns`, we can generate defaults using consecutive axis IDs, in two ways: *coupled* gives one x axis per column and one y axis per row. *independent* uses a new xy pair for each cell, left-to-right across each row then iterating rows according to `roworder`.
type LayoutGridPattern string

const (
	LayoutGridPatternIndependent LayoutGridPattern = "independent"
	LayoutGridPatternCoupled     LayoutGridPattern = "coupled"
)

// LayoutGridRoworder Is the first row the top or the bottom? Note that columns are always enumerated from left to right.
type LayoutGridRoworder string

const (
	LayoutGridRoworderTopToBottom LayoutGridRoworder = "top to bottom"
	LayoutGridRoworderBottomToTop LayoutGridRoworder = "bottom to top"
)

// LayoutGridXside Sets where the x axis labels and titles go. *bottom* means the very bottom of the grid. *bottom plot* is the lowest plot that each x axis is used in. *top* and *top plot* are similar.
type LayoutGridXside string

const (
	LayoutGridXsideBottom     LayoutGridXside = "bottom"
	LayoutGridXsideBottomPlot LayoutGridXside = "bottom plot"
	LayoutGridXsideTopPlot    LayoutGridXside = "top plot"
	LayoutGridXsideTop        LayoutGridXside = "top"
)

// LayoutGridYside Sets where the y axis labels and titles go. *left* means the very left edge of the grid. *left plot* is the leftmost plot that each y axis is used in. *right* and *right plot* are similar.
type LayoutGridYside string

const (
	LayoutGridYsideLeft      LayoutGridYside = "left"
	LayoutGridYsideLeftPlot  LayoutGridYside = "left plot"
	LayoutGridYsideRightPlot LayoutGridYside = "right plot"
	LayoutGridYsideRight     LayoutGridYside = "right"
)

// LayoutHoverlabelAlign Sets the horizontal alignment of the text content within hover label box. Has an effect only if the hover label text spans more two or more lines
type LayoutHoverlabelAlign string

const (
	LayoutHoverlabelAlignLeft  LayoutHoverlabelAlign = "left"
	LayoutHoverlabelAlignRight LayoutHoverlabelAlign = "right"
	LayoutHoverlabelAlignAuto  LayoutHoverlabelAlign = "auto"
)

// LayoutHovermode Determines the mode of hover interactions. If *closest*, a single hoverlabel will appear for the *closest* point within the `hoverdistance`. If *x* (or *y*), multiple hoverlabels will appear for multiple points at the *closest* x- (or y-) coordinate within the `hoverdistance`, with the caveat that no more than one hoverlabel will appear per trace. If *x unified* (or *y unified*), a single hoverlabel will appear multiple points at the closest x- (or y-) coordinate within the `hoverdistance` with the caveat that no more than one hoverlabel will appear per trace. In this mode, spikelines are enabled by default perpendicular to the specified axis. If false, hover interactions are disabled.
type LayoutHovermode interface{}

var (
	LayoutHovermodeX        LayoutHovermode = "x"
	LayoutHovermodeY        LayoutHovermode = "y"
	LayoutHovermodeClosest  LayoutHovermode = "closest"
	LayoutHovermodeFalse    LayoutHovermode = false
	LayoutHovermodeXUnified LayoutHovermode = "x unified"
	LayoutHovermodeYUnified LayoutHovermode = "y unified"
)

// LayoutLegendEntrywidthmode Determines what entrywidth means.
type LayoutLegendEntrywidthmode string

const (
	LayoutLegendEntrywidthmodeFraction LayoutLegendEntrywidthmode = "fraction"
	LayoutLegendEntrywidthmodePixels   LayoutLegendEntrywidthmode = "pixels"
)

// LayoutLegendGroupclick Determines the behavior on legend group item click. *toggleitem* toggles the visibility of the individual item clicked on the graph. *togglegroup* toggles the visibility of all items in the same legendgroup as the item clicked on the graph.
type LayoutLegendGroupclick string

const (
	LayoutLegendGroupclickToggleitem  LayoutLegendGroupclick = "toggleitem"
	LayoutLegendGroupclickTogglegroup LayoutLegendGroupclick = "togglegroup"
)

// LayoutLegendItemclick Determines the behavior on legend item click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item click interactions.
type LayoutLegendItemclick interface{}

var (
	LayoutLegendItemclickToggle       LayoutLegendItemclick = "toggle"
	LayoutLegendItemclickToggleothers LayoutLegendItemclick = "toggleothers"
	LayoutLegendItemclickFalse        LayoutLegendItemclick = false
)

// LayoutLegendItemdoubleclick Determines the behavior on legend item double-click. *toggle* toggles the visibility of the item clicked on the graph. *toggleothers* makes the clicked item the sole visible item on the graph. *false* disables legend item double-click interactions.
type LayoutLegendItemdoubleclick interface{}

var (
	LayoutLegendItemdoubleclickToggle       LayoutLegendItemdoubleclick = "toggle"
	LayoutLegendItemdoubleclickToggleothers LayoutLegendItemdoubleclick = "toggleothers"
	LayoutLegendItemdoubleclickFalse        LayoutLegendItemdoubleclick = false
)

// LayoutLegendItemsizing Determines if the legend items symbols scale with their corresponding *trace* attributes or remain *constant* independent of the symbol size on the graph.
type LayoutLegendItemsizing string

const (
	LayoutLegendItemsizingTrace    LayoutLegendItemsizing = "trace"
	LayoutLegendItemsizingConstant LayoutLegendItemsizing = "constant"
)

// LayoutLegendOrientation Sets the orientation of the legend.
type LayoutLegendOrientation string

const (
	LayoutLegendOrientationV LayoutLegendOrientation = "v"
	LayoutLegendOrientationH LayoutLegendOrientation = "h"
)

// LayoutLegendTitleSide Determines the location of legend's title with respect to the legend items. Defaulted to *top* with `orientation` is *h*. Defaulted to *left* with `orientation` is *v*. The *top left* options could be used to expand top center and top right are for horizontal alignment legend area in both x and y sides.
type LayoutLegendTitleSide string

const (
	LayoutLegendTitleSideTop       LayoutLegendTitleSide = "top"
	LayoutLegendTitleSideLeft      LayoutLegendTitleSide = "left"
	LayoutLegendTitleSideTopLeft   LayoutLegendTitleSide = "top left"
	LayoutLegendTitleSideTopCenter LayoutLegendTitleSide = "top center"
	LayoutLegendTitleSideTopRight  LayoutLegendTitleSide = "top right"
)

// LayoutLegendValign Sets the vertical alignment of the symbols with respect to their associated text.
type LayoutLegendValign string

const (
	LayoutLegendValignTop    LayoutLegendValign = "top"
	LayoutLegendValignMiddle LayoutLegendValign = "middle"
	LayoutLegendValignBottom LayoutLegendValign = "bottom"
)

// LayoutLegendXanchor Sets the legend's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the legend. Value *auto* anchors legends to the right for `x` values greater than or equal to 2/3, anchors legends to the left for `x` values less than or equal to 1/3 and anchors legends with respect to their center otherwise.
type LayoutLegendXanchor string

const (
	LayoutLegendXanchorAuto   LayoutLegendXanchor = "auto"
	LayoutLegendXanchorLeft   LayoutLegendXanchor = "left"
	LayoutLegendXanchorCenter LayoutLegendXanchor = "center"
	LayoutLegendXanchorRight  LayoutLegendXanchor = "right"
)

// LayoutLegendXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type LayoutLegendXref string

const (
	LayoutLegendXrefContainer LayoutLegendXref = "container"
	LayoutLegendXrefPaper     LayoutLegendXref = "paper"
)

// LayoutLegendYanchor Sets the legend's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the legend. Value *auto* anchors legends at their bottom for `y` values less than or equal to 1/3, anchors legends to at their top for `y` values greater than or equal to 2/3 and anchors legends with respect to their middle otherwise.
type LayoutLegendYanchor string

const (
	LayoutLegendYanchorAuto   LayoutLegendYanchor = "auto"
	LayoutLegendYanchorTop    LayoutLegendYanchor = "top"
	LayoutLegendYanchorMiddle LayoutLegendYanchor = "middle"
	LayoutLegendYanchorBottom LayoutLegendYanchor = "bottom"
)

// LayoutLegendYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type LayoutLegendYref string

const (
	LayoutLegendYrefContainer LayoutLegendYref = "container"
	LayoutLegendYrefPaper     LayoutLegendYref = "paper"
)

// LayoutModebarOrientation Sets the orientation of the modebar.
type LayoutModebarOrientation string

const (
	LayoutModebarOrientationV LayoutModebarOrientation = "v"
	LayoutModebarOrientationH LayoutModebarOrientation = "h"
)

// LayoutNewselectionMode Describes how a new selection is created. If `immediate`, a new selection is created after first mouse up. If `gradual`, a new selection is not created after first mouse. By adding to and subtracting from the initial selection, this option allows declaring extra outlines of the selection.
type LayoutNewselectionMode string

const (
	LayoutNewselectionModeImmediate LayoutNewselectionMode = "immediate"
	LayoutNewselectionModeGradual   LayoutNewselectionMode = "gradual"
)

// LayoutNewshapeDrawdirection When `dragmode` is set to *drawrect*, *drawline* or *drawcircle* this limits the drag to be horizontal, vertical or diagonal. Using *diagonal* there is no limit e.g. in drawing lines in any direction. *ortho* limits the draw to be either horizontal or vertical. *horizontal* allows horizontal extend. *vertical* allows vertical extend.
type LayoutNewshapeDrawdirection string

const (
	LayoutNewshapeDrawdirectionOrtho      LayoutNewshapeDrawdirection = "ortho"
	LayoutNewshapeDrawdirectionHorizontal LayoutNewshapeDrawdirection = "horizontal"
	LayoutNewshapeDrawdirectionVertical   LayoutNewshapeDrawdirection = "vertical"
	LayoutNewshapeDrawdirectionDiagonal   LayoutNewshapeDrawdirection = "diagonal"
)

// LayoutNewshapeFillrule Determines the path's interior. For more info please visit https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/fill-rule
type LayoutNewshapeFillrule string

const (
	LayoutNewshapeFillruleEvenodd LayoutNewshapeFillrule = "evenodd"
	LayoutNewshapeFillruleNonzero LayoutNewshapeFillrule = "nonzero"
)

// LayoutNewshapeLabelTextposition Sets the position of the label text relative to the new shape. Supported values for rectangles, circles and paths are *top left*, *top center*, *top right*, *middle left*, *middle center*, *middle right*, *bottom left*, *bottom center*, and *bottom right*. Supported values for lines are *start*, *middle*, and *end*. Default: *middle center* for rectangles, circles, and paths; *middle* for lines.
type LayoutNewshapeLabelTextposition string

const (
	LayoutNewshapeLabelTextpositionTopLeft      LayoutNewshapeLabelTextposition = "top left"
	LayoutNewshapeLabelTextpositionTopCenter    LayoutNewshapeLabelTextposition = "top center"
	LayoutNewshapeLabelTextpositionTopRight     LayoutNewshapeLabelTextposition = "top right"
	LayoutNewshapeLabelTextpositionMiddleLeft   LayoutNewshapeLabelTextposition = "middle left"
	LayoutNewshapeLabelTextpositionMiddleCenter LayoutNewshapeLabelTextposition = "middle center"
	LayoutNewshapeLabelTextpositionMiddleRight  LayoutNewshapeLabelTextposition = "middle right"
	LayoutNewshapeLabelTextpositionBottomLeft   LayoutNewshapeLabelTextposition = "bottom left"
	LayoutNewshapeLabelTextpositionBottomCenter LayoutNewshapeLabelTextposition = "bottom center"
	LayoutNewshapeLabelTextpositionBottomRight  LayoutNewshapeLabelTextposition = "bottom right"
	LayoutNewshapeLabelTextpositionStart        LayoutNewshapeLabelTextposition = "start"
	LayoutNewshapeLabelTextpositionMiddle       LayoutNewshapeLabelTextposition = "middle"
	LayoutNewshapeLabelTextpositionEnd          LayoutNewshapeLabelTextposition = "end"
)

// LayoutNewshapeLabelXanchor Sets the label's horizontal position anchor This anchor binds the specified `textposition` to the *left*, *center* or *right* of the label text. For example, if `textposition` is set to *top right* and `xanchor` to *right* then the right-most portion of the label text lines up with the right-most edge of the new shape.
type LayoutNewshapeLabelXanchor string

const (
	LayoutNewshapeLabelXanchorAuto   LayoutNewshapeLabelXanchor = "auto"
	LayoutNewshapeLabelXanchorLeft   LayoutNewshapeLabelXanchor = "left"
	LayoutNewshapeLabelXanchorCenter LayoutNewshapeLabelXanchor = "center"
	LayoutNewshapeLabelXanchorRight  LayoutNewshapeLabelXanchor = "right"
)

// LayoutNewshapeLabelYanchor Sets the label's vertical position anchor This anchor binds the specified `textposition` to the *top*, *middle* or *bottom* of the label text. For example, if `textposition` is set to *top right* and `yanchor` to *top* then the top-most portion of the label text lines up with the top-most edge of the new shape.
type LayoutNewshapeLabelYanchor string

const (
	LayoutNewshapeLabelYanchorTop    LayoutNewshapeLabelYanchor = "top"
	LayoutNewshapeLabelYanchorMiddle LayoutNewshapeLabelYanchor = "middle"
	LayoutNewshapeLabelYanchorBottom LayoutNewshapeLabelYanchor = "bottom"
)

// LayoutNewshapeLayer Specifies whether new shapes are drawn below or above traces.
type LayoutNewshapeLayer string

const (
	LayoutNewshapeLayerBelow LayoutNewshapeLayer = "below"
	LayoutNewshapeLayerAbove LayoutNewshapeLayer = "above"
)

// LayoutNewshapeVisible Determines whether or not new shape is visible. If *legendonly*, the shape is not drawn, but can appear as a legend item (provided that the legend itself is visible).
type LayoutNewshapeVisible interface{}

var (
	LayoutNewshapeVisibleTrue       LayoutNewshapeVisible = true
	LayoutNewshapeVisibleFalse      LayoutNewshapeVisible = false
	LayoutNewshapeVisibleLegendonly LayoutNewshapeVisible = "legendonly"
)

// LayoutPolarAngularaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
type LayoutPolarAngularaxisAutotypenumbers string

const (
	LayoutPolarAngularaxisAutotypenumbersConvertTypes LayoutPolarAngularaxisAutotypenumbers = "convert types"
	LayoutPolarAngularaxisAutotypenumbersStrict       LayoutPolarAngularaxisAutotypenumbers = "strict"
)

// LayoutPolarAngularaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
type LayoutPolarAngularaxisCategoryorder string

const (
	LayoutPolarAngularaxisCategoryorderTrace              LayoutPolarAngularaxisCategoryorder = "trace"
	LayoutPolarAngularaxisCategoryorderCategoryAscending  LayoutPolarAngularaxisCategoryorder = "category ascending"
	LayoutPolarAngularaxisCategoryorderCategoryDescending LayoutPolarAngularaxisCategoryorder = "category descending"
	LayoutPolarAngularaxisCategoryorderArray              LayoutPolarAngularaxisCategoryorder = "array"
	LayoutPolarAngularaxisCategoryorderTotalAscending     LayoutPolarAngularaxisCategoryorder = "total ascending"
	LayoutPolarAngularaxisCategoryorderTotalDescending    LayoutPolarAngularaxisCategoryorder = "total descending"
	LayoutPolarAngularaxisCategoryorderMinAscending       LayoutPolarAngularaxisCategoryorder = "min ascending"
	LayoutPolarAngularaxisCategoryorderMinDescending      LayoutPolarAngularaxisCategoryorder = "min descending"
	LayoutPolarAngularaxisCategoryorderMaxAscending       LayoutPolarAngularaxisCategoryorder = "max ascending"
	LayoutPolarAngularaxisCategoryorderMaxDescending      LayoutPolarAngularaxisCategoryorder = "max descending"
	LayoutPolarAngularaxisCategoryorderSumAscending       LayoutPolarAngularaxisCategoryorder = "sum ascending"
	LayoutPolarAngularaxisCategoryorderSumDescending      LayoutPolarAngularaxisCategoryorder = "sum descending"
	LayoutPolarAngularaxisCategoryorderMeanAscending      LayoutPolarAngularaxisCategoryorder = "mean ascending"
	LayoutPolarAngularaxisCategoryorderMeanDescending     LayoutPolarAngularaxisCategoryorder = "mean descending"
	LayoutPolarAngularaxisCategoryorderMedianAscending    LayoutPolarAngularaxisCategoryorder = "median ascending"
	LayoutPolarAngularaxisCategoryorderMedianDescending   LayoutPolarAngularaxisCategoryorder = "median descending"
)

// LayoutPolarAngularaxisDirection Sets the direction corresponding to positive angles.
type LayoutPolarAngularaxisDirection string

const (
	LayoutPolarAngularaxisDirectionCounterclockwise LayoutPolarAngularaxisDirection = "counterclockwise"
	LayoutPolarAngularaxisDirectionClockwise        LayoutPolarAngularaxisDirection = "clockwise"
)

// LayoutPolarAngularaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutPolarAngularaxisExponentformat string

const (
	LayoutPolarAngularaxisExponentformatNone  LayoutPolarAngularaxisExponentformat = "none"
	LayoutPolarAngularaxisExponentformatE1    LayoutPolarAngularaxisExponentformat = "e"
	LayoutPolarAngularaxisExponentformatE2    LayoutPolarAngularaxisExponentformat = "E"
	LayoutPolarAngularaxisExponentformatPower LayoutPolarAngularaxisExponentformat = "power"
	LayoutPolarAngularaxisExponentformatSI    LayoutPolarAngularaxisExponentformat = "SI"
	LayoutPolarAngularaxisExponentformatB     LayoutPolarAngularaxisExponentformat = "B"
)

// LayoutPolarAngularaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutPolarAngularaxisLayer string

const (
	LayoutPolarAngularaxisLayerAboveTraces LayoutPolarAngularaxisLayer = "above traces"
	LayoutPolarAngularaxisLayerBelowTraces LayoutPolarAngularaxisLayer = "below traces"
)

// LayoutPolarAngularaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutPolarAngularaxisShowexponent string

const (
	LayoutPolarAngularaxisShowexponentAll   LayoutPolarAngularaxisShowexponent = "all"
	LayoutPolarAngularaxisShowexponentFirst LayoutPolarAngularaxisShowexponent = "first"
	LayoutPolarAngularaxisShowexponentLast  LayoutPolarAngularaxisShowexponent = "last"
	LayoutPolarAngularaxisShowexponentNone  LayoutPolarAngularaxisShowexponent = "none"
)

// LayoutPolarAngularaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutPolarAngularaxisShowtickprefix string

const (
	LayoutPolarAngularaxisShowtickprefixAll   LayoutPolarAngularaxisShowtickprefix = "all"
	LayoutPolarAngularaxisShowtickprefixFirst LayoutPolarAngularaxisShowtickprefix = "first"
	LayoutPolarAngularaxisShowtickprefixLast  LayoutPolarAngularaxisShowtickprefix = "last"
	LayoutPolarAngularaxisShowtickprefixNone  LayoutPolarAngularaxisShowtickprefix = "none"
)

// LayoutPolarAngularaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutPolarAngularaxisShowticksuffix string

const (
	LayoutPolarAngularaxisShowticksuffixAll   LayoutPolarAngularaxisShowticksuffix = "all"
	LayoutPolarAngularaxisShowticksuffixFirst LayoutPolarAngularaxisShowticksuffix = "first"
	LayoutPolarAngularaxisShowticksuffixLast  LayoutPolarAngularaxisShowticksuffix = "last"
	LayoutPolarAngularaxisShowticksuffixNone  LayoutPolarAngularaxisShowticksuffix = "none"
)

// LayoutPolarAngularaxisThetaunit Sets the format unit of the formatted *theta* values. Has an effect only when `angularaxis.type` is *linear*.
type LayoutPolarAngularaxisThetaunit string

const (
	LayoutPolarAngularaxisThetaunitRadians LayoutPolarAngularaxisThetaunit = "radians"
	LayoutPolarAngularaxisThetaunitDegrees LayoutPolarAngularaxisThetaunit = "degrees"
)

// LayoutPolarAngularaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutPolarAngularaxisTickmode string

const (
	LayoutPolarAngularaxisTickmodeAuto   LayoutPolarAngularaxisTickmode = "auto"
	LayoutPolarAngularaxisTickmodeLinear LayoutPolarAngularaxisTickmode = "linear"
	LayoutPolarAngularaxisTickmodeArray  LayoutPolarAngularaxisTickmode = "array"
)

// LayoutPolarAngularaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutPolarAngularaxisTicks string

const (
	LayoutPolarAngularaxisTicksOutside LayoutPolarAngularaxisTicks = "outside"
	LayoutPolarAngularaxisTicksInside  LayoutPolarAngularaxisTicks = "inside"
	LayoutPolarAngularaxisTicksEmpty   LayoutPolarAngularaxisTicks = ""
)

// LayoutPolarAngularaxisType Sets the angular axis type. If *linear*, set `thetaunit` to determine the unit in which axis value are shown. If *category, use `period` to set the number of integer coordinates around polar axis.
type LayoutPolarAngularaxisType string

const (
	LayoutPolarAngularaxisTypeHyphenHyphen LayoutPolarAngularaxisType = "-"
	LayoutPolarAngularaxisTypeLinear       LayoutPolarAngularaxisType = "linear"
	LayoutPolarAngularaxisTypeCategory     LayoutPolarAngularaxisType = "category"
)

// LayoutPolarGridshape Determines if the radial axis grid lines and angular axis line are drawn as *circular* sectors or as *linear* (polygon) sectors. Has an effect only when the angular axis has `type` *category*. Note that `radialaxis.angle` is snapped to the angle of the closest vertex when `gridshape` is *circular* (so that radial axis scale is the same as the data scale).
type LayoutPolarGridshape string

const (
	LayoutPolarGridshapeCircular LayoutPolarGridshape = "circular"
	LayoutPolarGridshapeLinear   LayoutPolarGridshape = "linear"
)

// LayoutPolarRadialaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
type LayoutPolarRadialaxisAutorange interface{}

var (
	LayoutPolarRadialaxisAutorangeTrue        LayoutPolarRadialaxisAutorange = true
	LayoutPolarRadialaxisAutorangeFalse       LayoutPolarRadialaxisAutorange = false
	LayoutPolarRadialaxisAutorangeReversed    LayoutPolarRadialaxisAutorange = "reversed"
	LayoutPolarRadialaxisAutorangeMinReversed LayoutPolarRadialaxisAutorange = "min reversed"
	LayoutPolarRadialaxisAutorangeMaxReversed LayoutPolarRadialaxisAutorange = "max reversed"
	LayoutPolarRadialaxisAutorangeMin         LayoutPolarRadialaxisAutorange = "min"
	LayoutPolarRadialaxisAutorangeMax         LayoutPolarRadialaxisAutorange = "max"
)

// LayoutPolarRadialaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
type LayoutPolarRadialaxisAutotypenumbers string

const (
	LayoutPolarRadialaxisAutotypenumbersConvertTypes LayoutPolarRadialaxisAutotypenumbers = "convert types"
	LayoutPolarRadialaxisAutotypenumbersStrict       LayoutPolarRadialaxisAutotypenumbers = "strict"
)

// LayoutPolarRadialaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
type LayoutPolarRadialaxisCalendar string

const (
	LayoutPolarRadialaxisCalendarChinese    LayoutPolarRadialaxisCalendar = "chinese"
	LayoutPolarRadialaxisCalendarCoptic     LayoutPolarRadialaxisCalendar = "coptic"
	LayoutPolarRadialaxisCalendarDiscworld  LayoutPolarRadialaxisCalendar = "discworld"
	LayoutPolarRadialaxisCalendarEthiopian  LayoutPolarRadialaxisCalendar = "ethiopian"
	LayoutPolarRadialaxisCalendarGregorian  LayoutPolarRadialaxisCalendar = "gregorian"
	LayoutPolarRadialaxisCalendarHebrew     LayoutPolarRadialaxisCalendar = "hebrew"
	LayoutPolarRadialaxisCalendarIslamic    LayoutPolarRadialaxisCalendar = "islamic"
	LayoutPolarRadialaxisCalendarJalali     LayoutPolarRadialaxisCalendar = "jalali"
	LayoutPolarRadialaxisCalendarJulian     LayoutPolarRadialaxisCalendar = "julian"
	LayoutPolarRadialaxisCalendarMayan      LayoutPolarRadialaxisCalendar = "mayan"
	LayoutPolarRadialaxisCalendarNanakshahi LayoutPolarRadialaxisCalendar = "nanakshahi"
	LayoutPolarRadialaxisCalendarNepali     LayoutPolarRadialaxisCalendar = "nepali"
	LayoutPolarRadialaxisCalendarPersian    LayoutPolarRadialaxisCalendar = "persian"
	LayoutPolarRadialaxisCalendarTaiwan     LayoutPolarRadialaxisCalendar = "taiwan"
	LayoutPolarRadialaxisCalendarThai       LayoutPolarRadialaxisCalendar = "thai"
	LayoutPolarRadialaxisCalendarUmmalqura  LayoutPolarRadialaxisCalendar = "ummalqura"
)

// LayoutPolarRadialaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
type LayoutPolarRadialaxisCategoryorder string

const (
	LayoutPolarRadialaxisCategoryorderTrace              LayoutPolarRadialaxisCategoryorder = "trace"
	LayoutPolarRadialaxisCategoryorderCategoryAscending  LayoutPolarRadialaxisCategoryorder = "category ascending"
	LayoutPolarRadialaxisCategoryorderCategoryDescending LayoutPolarRadialaxisCategoryorder = "category descending"
	LayoutPolarRadialaxisCategoryorderArray              LayoutPolarRadialaxisCategoryorder = "array"
	LayoutPolarRadialaxisCategoryorderTotalAscending     LayoutPolarRadialaxisCategoryorder = "total ascending"
	LayoutPolarRadialaxisCategoryorderTotalDescending    LayoutPolarRadialaxisCategoryorder = "total descending"
	LayoutPolarRadialaxisCategoryorderMinAscending       LayoutPolarRadialaxisCategoryorder = "min ascending"
	LayoutPolarRadialaxisCategoryorderMinDescending      LayoutPolarRadialaxisCategoryorder = "min descending"
	LayoutPolarRadialaxisCategoryorderMaxAscending       LayoutPolarRadialaxisCategoryorder = "max ascending"
	LayoutPolarRadialaxisCategoryorderMaxDescending      LayoutPolarRadialaxisCategoryorder = "max descending"
	LayoutPolarRadialaxisCategoryorderSumAscending       LayoutPolarRadialaxisCategoryorder = "sum ascending"
	LayoutPolarRadialaxisCategoryorderSumDescending      LayoutPolarRadialaxisCategoryorder = "sum descending"
	LayoutPolarRadialaxisCategoryorderMeanAscending      LayoutPolarRadialaxisCategoryorder = "mean ascending"
	LayoutPolarRadialaxisCategoryorderMeanDescending     LayoutPolarRadialaxisCategoryorder = "mean descending"
	LayoutPolarRadialaxisCategoryorderMedianAscending    LayoutPolarRadialaxisCategoryorder = "median ascending"
	LayoutPolarRadialaxisCategoryorderMedianDescending   LayoutPolarRadialaxisCategoryorder = "median descending"
)

// LayoutPolarRadialaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutPolarRadialaxisExponentformat string

const (
	LayoutPolarRadialaxisExponentformatNone  LayoutPolarRadialaxisExponentformat = "none"
	LayoutPolarRadialaxisExponentformatE1    LayoutPolarRadialaxisExponentformat = "e"
	LayoutPolarRadialaxisExponentformatE2    LayoutPolarRadialaxisExponentformat = "E"
	LayoutPolarRadialaxisExponentformatPower LayoutPolarRadialaxisExponentformat = "power"
	LayoutPolarRadialaxisExponentformatSI    LayoutPolarRadialaxisExponentformat = "SI"
	LayoutPolarRadialaxisExponentformatB     LayoutPolarRadialaxisExponentformat = "B"
)

// LayoutPolarRadialaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutPolarRadialaxisLayer string

const (
	LayoutPolarRadialaxisLayerAboveTraces LayoutPolarRadialaxisLayer = "above traces"
	LayoutPolarRadialaxisLayerBelowTraces LayoutPolarRadialaxisLayer = "below traces"
)

// LayoutPolarRadialaxisRangemode If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. If *normal*, the range is computed in relation to the extrema of the input data (same behavior as for cartesian axes).
type LayoutPolarRadialaxisRangemode string

const (
	LayoutPolarRadialaxisRangemodeTozero      LayoutPolarRadialaxisRangemode = "tozero"
	LayoutPolarRadialaxisRangemodeNonnegative LayoutPolarRadialaxisRangemode = "nonnegative"
	LayoutPolarRadialaxisRangemodeNormal      LayoutPolarRadialaxisRangemode = "normal"
)

// LayoutPolarRadialaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutPolarRadialaxisShowexponent string

const (
	LayoutPolarRadialaxisShowexponentAll   LayoutPolarRadialaxisShowexponent = "all"
	LayoutPolarRadialaxisShowexponentFirst LayoutPolarRadialaxisShowexponent = "first"
	LayoutPolarRadialaxisShowexponentLast  LayoutPolarRadialaxisShowexponent = "last"
	LayoutPolarRadialaxisShowexponentNone  LayoutPolarRadialaxisShowexponent = "none"
)

// LayoutPolarRadialaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutPolarRadialaxisShowtickprefix string

const (
	LayoutPolarRadialaxisShowtickprefixAll   LayoutPolarRadialaxisShowtickprefix = "all"
	LayoutPolarRadialaxisShowtickprefixFirst LayoutPolarRadialaxisShowtickprefix = "first"
	LayoutPolarRadialaxisShowtickprefixLast  LayoutPolarRadialaxisShowtickprefix = "last"
	LayoutPolarRadialaxisShowtickprefixNone  LayoutPolarRadialaxisShowtickprefix = "none"
)

// LayoutPolarRadialaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutPolarRadialaxisShowticksuffix string

const (
	LayoutPolarRadialaxisShowticksuffixAll   LayoutPolarRadialaxisShowticksuffix = "all"
	LayoutPolarRadialaxisShowticksuffixFirst LayoutPolarRadialaxisShowticksuffix = "first"
	LayoutPolarRadialaxisShowticksuffixLast  LayoutPolarRadialaxisShowticksuffix = "last"
	LayoutPolarRadialaxisShowticksuffixNone  LayoutPolarRadialaxisShowticksuffix = "none"
)

// LayoutPolarRadialaxisSide Determines on which side of radial axis line the tick and tick labels appear.
type LayoutPolarRadialaxisSide string

const (
	LayoutPolarRadialaxisSideClockwise        LayoutPolarRadialaxisSide = "clockwise"
	LayoutPolarRadialaxisSideCounterclockwise LayoutPolarRadialaxisSide = "counterclockwise"
)

// LayoutPolarRadialaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutPolarRadialaxisTickmode string

const (
	LayoutPolarRadialaxisTickmodeAuto   LayoutPolarRadialaxisTickmode = "auto"
	LayoutPolarRadialaxisTickmodeLinear LayoutPolarRadialaxisTickmode = "linear"
	LayoutPolarRadialaxisTickmodeArray  LayoutPolarRadialaxisTickmode = "array"
)

// LayoutPolarRadialaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutPolarRadialaxisTicks string

const (
	LayoutPolarRadialaxisTicksOutside LayoutPolarRadialaxisTicks = "outside"
	LayoutPolarRadialaxisTicksInside  LayoutPolarRadialaxisTicks = "inside"
	LayoutPolarRadialaxisTicksEmpty   LayoutPolarRadialaxisTicks = ""
)

// LayoutPolarRadialaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
type LayoutPolarRadialaxisType string

const (
	LayoutPolarRadialaxisTypeHyphenHyphen LayoutPolarRadialaxisType = "-"
	LayoutPolarRadialaxisTypeLinear       LayoutPolarRadialaxisType = "linear"
	LayoutPolarRadialaxisTypeLog          LayoutPolarRadialaxisType = "log"
	LayoutPolarRadialaxisTypeDate         LayoutPolarRadialaxisType = "date"
	LayoutPolarRadialaxisTypeCategory     LayoutPolarRadialaxisType = "category"
)

// LayoutScattermode Determines how scatter points at the same location coordinate are displayed on the graph. With *group*, the scatter points are plotted next to one another centered around the shared location. With *overlay*, the scatter points are plotted over one another, you might need to reduce *opacity* to see multiple scatter points.
type LayoutScattermode string

const (
	ScatterScattermodeGroup   LayoutScattermode = "group"
	ScatterScattermodeOverlay LayoutScattermode = "overlay"
)

// LayoutSceneAspectmode If *cube*, this scene's axes are drawn as a cube, regardless of the axes' ranges. If *data*, this scene's axes are drawn in proportion with the axes' ranges. If *manual*, this scene's axes are drawn in proportion with the input of *aspectratio* (the default behavior if *aspectratio* is provided). If *auto*, this scene's axes are drawn using the results of *data* except when one axis is more than four times the size of the two others, where in that case the results of *cube* are used.
type LayoutSceneAspectmode string

const (
	LayoutSceneAspectmodeAuto   LayoutSceneAspectmode = "auto"
	LayoutSceneAspectmodeCube   LayoutSceneAspectmode = "cube"
	LayoutSceneAspectmodeData   LayoutSceneAspectmode = "data"
	LayoutSceneAspectmodeManual LayoutSceneAspectmode = "manual"
)

// LayoutSceneCameraProjectionType Sets the projection type. The projection type could be either *perspective* or *orthographic*. The default is *perspective*.
type LayoutSceneCameraProjectionType string

const (
	LayoutSceneCameraProjectionTypePerspective  LayoutSceneCameraProjectionType = "perspective"
	LayoutSceneCameraProjectionTypeOrthographic LayoutSceneCameraProjectionType = "orthographic"
)

// LayoutSceneDragmode Determines the mode of drag interactions for this scene.
type LayoutSceneDragmode interface{}

var (
	LayoutSceneDragmodeOrbit     LayoutSceneDragmode = "orbit"
	LayoutSceneDragmodeTurntable LayoutSceneDragmode = "turntable"
	LayoutSceneDragmodeZoom      LayoutSceneDragmode = "zoom"
	LayoutSceneDragmodePan       LayoutSceneDragmode = "pan"
	LayoutSceneDragmodeFalse     LayoutSceneDragmode = false
)

// LayoutSceneHovermode Determines the mode of hover interactions for this scene.
type LayoutSceneHovermode interface{}

var (
	LayoutSceneHovermodeClosest LayoutSceneHovermode = "closest"
	LayoutSceneHovermodeFalse   LayoutSceneHovermode = false
)

// LayoutSceneXaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
type LayoutSceneXaxisAutorange interface{}

var (
	LayoutSceneXaxisAutorangeTrue        LayoutSceneXaxisAutorange = true
	LayoutSceneXaxisAutorangeFalse       LayoutSceneXaxisAutorange = false
	LayoutSceneXaxisAutorangeReversed    LayoutSceneXaxisAutorange = "reversed"
	LayoutSceneXaxisAutorangeMinReversed LayoutSceneXaxisAutorange = "min reversed"
	LayoutSceneXaxisAutorangeMaxReversed LayoutSceneXaxisAutorange = "max reversed"
	LayoutSceneXaxisAutorangeMin         LayoutSceneXaxisAutorange = "min"
	LayoutSceneXaxisAutorangeMax         LayoutSceneXaxisAutorange = "max"
)

// LayoutSceneXaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
type LayoutSceneXaxisAutotypenumbers string

const (
	LayoutSceneXaxisAutotypenumbersConvertTypes LayoutSceneXaxisAutotypenumbers = "convert types"
	LayoutSceneXaxisAutotypenumbersStrict       LayoutSceneXaxisAutotypenumbers = "strict"
)

// LayoutSceneXaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
type LayoutSceneXaxisCalendar string

const (
	LayoutSceneXaxisCalendarChinese    LayoutSceneXaxisCalendar = "chinese"
	LayoutSceneXaxisCalendarCoptic     LayoutSceneXaxisCalendar = "coptic"
	LayoutSceneXaxisCalendarDiscworld  LayoutSceneXaxisCalendar = "discworld"
	LayoutSceneXaxisCalendarEthiopian  LayoutSceneXaxisCalendar = "ethiopian"
	LayoutSceneXaxisCalendarGregorian  LayoutSceneXaxisCalendar = "gregorian"
	LayoutSceneXaxisCalendarHebrew     LayoutSceneXaxisCalendar = "hebrew"
	LayoutSceneXaxisCalendarIslamic    LayoutSceneXaxisCalendar = "islamic"
	LayoutSceneXaxisCalendarJalali     LayoutSceneXaxisCalendar = "jalali"
	LayoutSceneXaxisCalendarJulian     LayoutSceneXaxisCalendar = "julian"
	LayoutSceneXaxisCalendarMayan      LayoutSceneXaxisCalendar = "mayan"
	LayoutSceneXaxisCalendarNanakshahi LayoutSceneXaxisCalendar = "nanakshahi"
	LayoutSceneXaxisCalendarNepali     LayoutSceneXaxisCalendar = "nepali"
	LayoutSceneXaxisCalendarPersian    LayoutSceneXaxisCalendar = "persian"
	LayoutSceneXaxisCalendarTaiwan     LayoutSceneXaxisCalendar = "taiwan"
	LayoutSceneXaxisCalendarThai       LayoutSceneXaxisCalendar = "thai"
	LayoutSceneXaxisCalendarUmmalqura  LayoutSceneXaxisCalendar = "ummalqura"
)

// LayoutSceneXaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
type LayoutSceneXaxisCategoryorder string

const (
	LayoutSceneXaxisCategoryorderTrace              LayoutSceneXaxisCategoryorder = "trace"
	LayoutSceneXaxisCategoryorderCategoryAscending  LayoutSceneXaxisCategoryorder = "category ascending"
	LayoutSceneXaxisCategoryorderCategoryDescending LayoutSceneXaxisCategoryorder = "category descending"
	LayoutSceneXaxisCategoryorderArray              LayoutSceneXaxisCategoryorder = "array"
	LayoutSceneXaxisCategoryorderTotalAscending     LayoutSceneXaxisCategoryorder = "total ascending"
	LayoutSceneXaxisCategoryorderTotalDescending    LayoutSceneXaxisCategoryorder = "total descending"
	LayoutSceneXaxisCategoryorderMinAscending       LayoutSceneXaxisCategoryorder = "min ascending"
	LayoutSceneXaxisCategoryorderMinDescending      LayoutSceneXaxisCategoryorder = "min descending"
	LayoutSceneXaxisCategoryorderMaxAscending       LayoutSceneXaxisCategoryorder = "max ascending"
	LayoutSceneXaxisCategoryorderMaxDescending      LayoutSceneXaxisCategoryorder = "max descending"
	LayoutSceneXaxisCategoryorderSumAscending       LayoutSceneXaxisCategoryorder = "sum ascending"
	LayoutSceneXaxisCategoryorderSumDescending      LayoutSceneXaxisCategoryorder = "sum descending"
	LayoutSceneXaxisCategoryorderMeanAscending      LayoutSceneXaxisCategoryorder = "mean ascending"
	LayoutSceneXaxisCategoryorderMeanDescending     LayoutSceneXaxisCategoryorder = "mean descending"
	LayoutSceneXaxisCategoryorderMedianAscending    LayoutSceneXaxisCategoryorder = "median ascending"
	LayoutSceneXaxisCategoryorderMedianDescending   LayoutSceneXaxisCategoryorder = "median descending"
)

// LayoutSceneXaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutSceneXaxisExponentformat string

const (
	LayoutSceneXaxisExponentformatNone  LayoutSceneXaxisExponentformat = "none"
	LayoutSceneXaxisExponentformatE1    LayoutSceneXaxisExponentformat = "e"
	LayoutSceneXaxisExponentformatE2    LayoutSceneXaxisExponentformat = "E"
	LayoutSceneXaxisExponentformatPower LayoutSceneXaxisExponentformat = "power"
	LayoutSceneXaxisExponentformatSI    LayoutSceneXaxisExponentformat = "SI"
	LayoutSceneXaxisExponentformatB     LayoutSceneXaxisExponentformat = "B"
)

// LayoutSceneXaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
type LayoutSceneXaxisMirror interface{}

var (
	LayoutSceneXaxisMirrorTrue     LayoutSceneXaxisMirror = true
	LayoutSceneXaxisMirrorTicks    LayoutSceneXaxisMirror = "ticks"
	LayoutSceneXaxisMirrorFalse    LayoutSceneXaxisMirror = false
	LayoutSceneXaxisMirrorAll      LayoutSceneXaxisMirror = "all"
	LayoutSceneXaxisMirrorAllticks LayoutSceneXaxisMirror = "allticks"
)

// LayoutSceneXaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
type LayoutSceneXaxisRangemode string

const (
	LayoutSceneXaxisRangemodeNormal      LayoutSceneXaxisRangemode = "normal"
	LayoutSceneXaxisRangemodeTozero      LayoutSceneXaxisRangemode = "tozero"
	LayoutSceneXaxisRangemodeNonnegative LayoutSceneXaxisRangemode = "nonnegative"
)

// LayoutSceneXaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutSceneXaxisShowexponent string

const (
	LayoutSceneXaxisShowexponentAll   LayoutSceneXaxisShowexponent = "all"
	LayoutSceneXaxisShowexponentFirst LayoutSceneXaxisShowexponent = "first"
	LayoutSceneXaxisShowexponentLast  LayoutSceneXaxisShowexponent = "last"
	LayoutSceneXaxisShowexponentNone  LayoutSceneXaxisShowexponent = "none"
)

// LayoutSceneXaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutSceneXaxisShowtickprefix string

const (
	LayoutSceneXaxisShowtickprefixAll   LayoutSceneXaxisShowtickprefix = "all"
	LayoutSceneXaxisShowtickprefixFirst LayoutSceneXaxisShowtickprefix = "first"
	LayoutSceneXaxisShowtickprefixLast  LayoutSceneXaxisShowtickprefix = "last"
	LayoutSceneXaxisShowtickprefixNone  LayoutSceneXaxisShowtickprefix = "none"
)

// LayoutSceneXaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutSceneXaxisShowticksuffix string

const (
	LayoutSceneXaxisShowticksuffixAll   LayoutSceneXaxisShowticksuffix = "all"
	LayoutSceneXaxisShowticksuffixFirst LayoutSceneXaxisShowticksuffix = "first"
	LayoutSceneXaxisShowticksuffixLast  LayoutSceneXaxisShowticksuffix = "last"
	LayoutSceneXaxisShowticksuffixNone  LayoutSceneXaxisShowticksuffix = "none"
)

// LayoutSceneXaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutSceneXaxisTickmode string

const (
	LayoutSceneXaxisTickmodeAuto   LayoutSceneXaxisTickmode = "auto"
	LayoutSceneXaxisTickmodeLinear LayoutSceneXaxisTickmode = "linear"
	LayoutSceneXaxisTickmodeArray  LayoutSceneXaxisTickmode = "array"
)

// LayoutSceneXaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutSceneXaxisTicks string

const (
	LayoutSceneXaxisTicksOutside LayoutSceneXaxisTicks = "outside"
	LayoutSceneXaxisTicksInside  LayoutSceneXaxisTicks = "inside"
	LayoutSceneXaxisTicksEmpty   LayoutSceneXaxisTicks = ""
)

// LayoutSceneXaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
type LayoutSceneXaxisType string

const (
	LayoutSceneXaxisTypeHyphenHyphen LayoutSceneXaxisType = "-"
	LayoutSceneXaxisTypeLinear       LayoutSceneXaxisType = "linear"
	LayoutSceneXaxisTypeLog          LayoutSceneXaxisType = "log"
	LayoutSceneXaxisTypeDate         LayoutSceneXaxisType = "date"
	LayoutSceneXaxisTypeCategory     LayoutSceneXaxisType = "category"
)

// LayoutSceneYaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
type LayoutSceneYaxisAutorange interface{}

var (
	LayoutSceneYaxisAutorangeTrue        LayoutSceneYaxisAutorange = true
	LayoutSceneYaxisAutorangeFalse       LayoutSceneYaxisAutorange = false
	LayoutSceneYaxisAutorangeReversed    LayoutSceneYaxisAutorange = "reversed"
	LayoutSceneYaxisAutorangeMinReversed LayoutSceneYaxisAutorange = "min reversed"
	LayoutSceneYaxisAutorangeMaxReversed LayoutSceneYaxisAutorange = "max reversed"
	LayoutSceneYaxisAutorangeMin         LayoutSceneYaxisAutorange = "min"
	LayoutSceneYaxisAutorangeMax         LayoutSceneYaxisAutorange = "max"
)

// LayoutSceneYaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
type LayoutSceneYaxisAutotypenumbers string

const (
	LayoutSceneYaxisAutotypenumbersConvertTypes LayoutSceneYaxisAutotypenumbers = "convert types"
	LayoutSceneYaxisAutotypenumbersStrict       LayoutSceneYaxisAutotypenumbers = "strict"
)

// LayoutSceneYaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
type LayoutSceneYaxisCalendar string

const (
	LayoutSceneYaxisCalendarChinese    LayoutSceneYaxisCalendar = "chinese"
	LayoutSceneYaxisCalendarCoptic     LayoutSceneYaxisCalendar = "coptic"
	LayoutSceneYaxisCalendarDiscworld  LayoutSceneYaxisCalendar = "discworld"
	LayoutSceneYaxisCalendarEthiopian  LayoutSceneYaxisCalendar = "ethiopian"
	LayoutSceneYaxisCalendarGregorian  LayoutSceneYaxisCalendar = "gregorian"
	LayoutSceneYaxisCalendarHebrew     LayoutSceneYaxisCalendar = "hebrew"
	LayoutSceneYaxisCalendarIslamic    LayoutSceneYaxisCalendar = "islamic"
	LayoutSceneYaxisCalendarJalali     LayoutSceneYaxisCalendar = "jalali"
	LayoutSceneYaxisCalendarJulian     LayoutSceneYaxisCalendar = "julian"
	LayoutSceneYaxisCalendarMayan      LayoutSceneYaxisCalendar = "mayan"
	LayoutSceneYaxisCalendarNanakshahi LayoutSceneYaxisCalendar = "nanakshahi"
	LayoutSceneYaxisCalendarNepali     LayoutSceneYaxisCalendar = "nepali"
	LayoutSceneYaxisCalendarPersian    LayoutSceneYaxisCalendar = "persian"
	LayoutSceneYaxisCalendarTaiwan     LayoutSceneYaxisCalendar = "taiwan"
	LayoutSceneYaxisCalendarThai       LayoutSceneYaxisCalendar = "thai"
	LayoutSceneYaxisCalendarUmmalqura  LayoutSceneYaxisCalendar = "ummalqura"
)

// LayoutSceneYaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
type LayoutSceneYaxisCategoryorder string

const (
	LayoutSceneYaxisCategoryorderTrace              LayoutSceneYaxisCategoryorder = "trace"
	LayoutSceneYaxisCategoryorderCategoryAscending  LayoutSceneYaxisCategoryorder = "category ascending"
	LayoutSceneYaxisCategoryorderCategoryDescending LayoutSceneYaxisCategoryorder = "category descending"
	LayoutSceneYaxisCategoryorderArray              LayoutSceneYaxisCategoryorder = "array"
	LayoutSceneYaxisCategoryorderTotalAscending     LayoutSceneYaxisCategoryorder = "total ascending"
	LayoutSceneYaxisCategoryorderTotalDescending    LayoutSceneYaxisCategoryorder = "total descending"
	LayoutSceneYaxisCategoryorderMinAscending       LayoutSceneYaxisCategoryorder = "min ascending"
	LayoutSceneYaxisCategoryorderMinDescending      LayoutSceneYaxisCategoryorder = "min descending"
	LayoutSceneYaxisCategoryorderMaxAscending       LayoutSceneYaxisCategoryorder = "max ascending"
	LayoutSceneYaxisCategoryorderMaxDescending      LayoutSceneYaxisCategoryorder = "max descending"
	LayoutSceneYaxisCategoryorderSumAscending       LayoutSceneYaxisCategoryorder = "sum ascending"
	LayoutSceneYaxisCategoryorderSumDescending      LayoutSceneYaxisCategoryorder = "sum descending"
	LayoutSceneYaxisCategoryorderMeanAscending      LayoutSceneYaxisCategoryorder = "mean ascending"
	LayoutSceneYaxisCategoryorderMeanDescending     LayoutSceneYaxisCategoryorder = "mean descending"
	LayoutSceneYaxisCategoryorderMedianAscending    LayoutSceneYaxisCategoryorder = "median ascending"
	LayoutSceneYaxisCategoryorderMedianDescending   LayoutSceneYaxisCategoryorder = "median descending"
)

// LayoutSceneYaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutSceneYaxisExponentformat string

const (
	LayoutSceneYaxisExponentformatNone  LayoutSceneYaxisExponentformat = "none"
	LayoutSceneYaxisExponentformatE1    LayoutSceneYaxisExponentformat = "e"
	LayoutSceneYaxisExponentformatE2    LayoutSceneYaxisExponentformat = "E"
	LayoutSceneYaxisExponentformatPower LayoutSceneYaxisExponentformat = "power"
	LayoutSceneYaxisExponentformatSI    LayoutSceneYaxisExponentformat = "SI"
	LayoutSceneYaxisExponentformatB     LayoutSceneYaxisExponentformat = "B"
)

// LayoutSceneYaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
type LayoutSceneYaxisMirror interface{}

var (
	LayoutSceneYaxisMirrorTrue     LayoutSceneYaxisMirror = true
	LayoutSceneYaxisMirrorTicks    LayoutSceneYaxisMirror = "ticks"
	LayoutSceneYaxisMirrorFalse    LayoutSceneYaxisMirror = false
	LayoutSceneYaxisMirrorAll      LayoutSceneYaxisMirror = "all"
	LayoutSceneYaxisMirrorAllticks LayoutSceneYaxisMirror = "allticks"
)

// LayoutSceneYaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
type LayoutSceneYaxisRangemode string

const (
	LayoutSceneYaxisRangemodeNormal      LayoutSceneYaxisRangemode = "normal"
	LayoutSceneYaxisRangemodeTozero      LayoutSceneYaxisRangemode = "tozero"
	LayoutSceneYaxisRangemodeNonnegative LayoutSceneYaxisRangemode = "nonnegative"
)

// LayoutSceneYaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutSceneYaxisShowexponent string

const (
	LayoutSceneYaxisShowexponentAll   LayoutSceneYaxisShowexponent = "all"
	LayoutSceneYaxisShowexponentFirst LayoutSceneYaxisShowexponent = "first"
	LayoutSceneYaxisShowexponentLast  LayoutSceneYaxisShowexponent = "last"
	LayoutSceneYaxisShowexponentNone  LayoutSceneYaxisShowexponent = "none"
)

// LayoutSceneYaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutSceneYaxisShowtickprefix string

const (
	LayoutSceneYaxisShowtickprefixAll   LayoutSceneYaxisShowtickprefix = "all"
	LayoutSceneYaxisShowtickprefixFirst LayoutSceneYaxisShowtickprefix = "first"
	LayoutSceneYaxisShowtickprefixLast  LayoutSceneYaxisShowtickprefix = "last"
	LayoutSceneYaxisShowtickprefixNone  LayoutSceneYaxisShowtickprefix = "none"
)

// LayoutSceneYaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutSceneYaxisShowticksuffix string

const (
	LayoutSceneYaxisShowticksuffixAll   LayoutSceneYaxisShowticksuffix = "all"
	LayoutSceneYaxisShowticksuffixFirst LayoutSceneYaxisShowticksuffix = "first"
	LayoutSceneYaxisShowticksuffixLast  LayoutSceneYaxisShowticksuffix = "last"
	LayoutSceneYaxisShowticksuffixNone  LayoutSceneYaxisShowticksuffix = "none"
)

// LayoutSceneYaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutSceneYaxisTickmode string

const (
	LayoutSceneYaxisTickmodeAuto   LayoutSceneYaxisTickmode = "auto"
	LayoutSceneYaxisTickmodeLinear LayoutSceneYaxisTickmode = "linear"
	LayoutSceneYaxisTickmodeArray  LayoutSceneYaxisTickmode = "array"
)

// LayoutSceneYaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutSceneYaxisTicks string

const (
	LayoutSceneYaxisTicksOutside LayoutSceneYaxisTicks = "outside"
	LayoutSceneYaxisTicksInside  LayoutSceneYaxisTicks = "inside"
	LayoutSceneYaxisTicksEmpty   LayoutSceneYaxisTicks = ""
)

// LayoutSceneYaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
type LayoutSceneYaxisType string

const (
	LayoutSceneYaxisTypeHyphenHyphen LayoutSceneYaxisType = "-"
	LayoutSceneYaxisTypeLinear       LayoutSceneYaxisType = "linear"
	LayoutSceneYaxisTypeLog          LayoutSceneYaxisType = "log"
	LayoutSceneYaxisTypeDate         LayoutSceneYaxisType = "date"
	LayoutSceneYaxisTypeCategory     LayoutSceneYaxisType = "category"
)

// LayoutSceneZaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
type LayoutSceneZaxisAutorange interface{}

var (
	LayoutSceneZaxisAutorangeTrue        LayoutSceneZaxisAutorange = true
	LayoutSceneZaxisAutorangeFalse       LayoutSceneZaxisAutorange = false
	LayoutSceneZaxisAutorangeReversed    LayoutSceneZaxisAutorange = "reversed"
	LayoutSceneZaxisAutorangeMinReversed LayoutSceneZaxisAutorange = "min reversed"
	LayoutSceneZaxisAutorangeMaxReversed LayoutSceneZaxisAutorange = "max reversed"
	LayoutSceneZaxisAutorangeMin         LayoutSceneZaxisAutorange = "min"
	LayoutSceneZaxisAutorangeMax         LayoutSceneZaxisAutorange = "max"
)

// LayoutSceneZaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
type LayoutSceneZaxisAutotypenumbers string

const (
	LayoutSceneZaxisAutotypenumbersConvertTypes LayoutSceneZaxisAutotypenumbers = "convert types"
	LayoutSceneZaxisAutotypenumbersStrict       LayoutSceneZaxisAutotypenumbers = "strict"
)

// LayoutSceneZaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
type LayoutSceneZaxisCalendar string

const (
	LayoutSceneZaxisCalendarChinese    LayoutSceneZaxisCalendar = "chinese"
	LayoutSceneZaxisCalendarCoptic     LayoutSceneZaxisCalendar = "coptic"
	LayoutSceneZaxisCalendarDiscworld  LayoutSceneZaxisCalendar = "discworld"
	LayoutSceneZaxisCalendarEthiopian  LayoutSceneZaxisCalendar = "ethiopian"
	LayoutSceneZaxisCalendarGregorian  LayoutSceneZaxisCalendar = "gregorian"
	LayoutSceneZaxisCalendarHebrew     LayoutSceneZaxisCalendar = "hebrew"
	LayoutSceneZaxisCalendarIslamic    LayoutSceneZaxisCalendar = "islamic"
	LayoutSceneZaxisCalendarJalali     LayoutSceneZaxisCalendar = "jalali"
	LayoutSceneZaxisCalendarJulian     LayoutSceneZaxisCalendar = "julian"
	LayoutSceneZaxisCalendarMayan      LayoutSceneZaxisCalendar = "mayan"
	LayoutSceneZaxisCalendarNanakshahi LayoutSceneZaxisCalendar = "nanakshahi"
	LayoutSceneZaxisCalendarNepali     LayoutSceneZaxisCalendar = "nepali"
	LayoutSceneZaxisCalendarPersian    LayoutSceneZaxisCalendar = "persian"
	LayoutSceneZaxisCalendarTaiwan     LayoutSceneZaxisCalendar = "taiwan"
	LayoutSceneZaxisCalendarThai       LayoutSceneZaxisCalendar = "thai"
	LayoutSceneZaxisCalendarUmmalqura  LayoutSceneZaxisCalendar = "ummalqura"
)

// LayoutSceneZaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
type LayoutSceneZaxisCategoryorder string

const (
	LayoutSceneZaxisCategoryorderTrace              LayoutSceneZaxisCategoryorder = "trace"
	LayoutSceneZaxisCategoryorderCategoryAscending  LayoutSceneZaxisCategoryorder = "category ascending"
	LayoutSceneZaxisCategoryorderCategoryDescending LayoutSceneZaxisCategoryorder = "category descending"
	LayoutSceneZaxisCategoryorderArray              LayoutSceneZaxisCategoryorder = "array"
	LayoutSceneZaxisCategoryorderTotalAscending     LayoutSceneZaxisCategoryorder = "total ascending"
	LayoutSceneZaxisCategoryorderTotalDescending    LayoutSceneZaxisCategoryorder = "total descending"
	LayoutSceneZaxisCategoryorderMinAscending       LayoutSceneZaxisCategoryorder = "min ascending"
	LayoutSceneZaxisCategoryorderMinDescending      LayoutSceneZaxisCategoryorder = "min descending"
	LayoutSceneZaxisCategoryorderMaxAscending       LayoutSceneZaxisCategoryorder = "max ascending"
	LayoutSceneZaxisCategoryorderMaxDescending      LayoutSceneZaxisCategoryorder = "max descending"
	LayoutSceneZaxisCategoryorderSumAscending       LayoutSceneZaxisCategoryorder = "sum ascending"
	LayoutSceneZaxisCategoryorderSumDescending      LayoutSceneZaxisCategoryorder = "sum descending"
	LayoutSceneZaxisCategoryorderMeanAscending      LayoutSceneZaxisCategoryorder = "mean ascending"
	LayoutSceneZaxisCategoryorderMeanDescending     LayoutSceneZaxisCategoryorder = "mean descending"
	LayoutSceneZaxisCategoryorderMedianAscending    LayoutSceneZaxisCategoryorder = "median ascending"
	LayoutSceneZaxisCategoryorderMedianDescending   LayoutSceneZaxisCategoryorder = "median descending"
)

// LayoutSceneZaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutSceneZaxisExponentformat string

const (
	LayoutSceneZaxisExponentformatNone  LayoutSceneZaxisExponentformat = "none"
	LayoutSceneZaxisExponentformatE1    LayoutSceneZaxisExponentformat = "e"
	LayoutSceneZaxisExponentformatE2    LayoutSceneZaxisExponentformat = "E"
	LayoutSceneZaxisExponentformatPower LayoutSceneZaxisExponentformat = "power"
	LayoutSceneZaxisExponentformatSI    LayoutSceneZaxisExponentformat = "SI"
	LayoutSceneZaxisExponentformatB     LayoutSceneZaxisExponentformat = "B"
)

// LayoutSceneZaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
type LayoutSceneZaxisMirror interface{}

var (
	LayoutSceneZaxisMirrorTrue     LayoutSceneZaxisMirror = true
	LayoutSceneZaxisMirrorTicks    LayoutSceneZaxisMirror = "ticks"
	LayoutSceneZaxisMirrorFalse    LayoutSceneZaxisMirror = false
	LayoutSceneZaxisMirrorAll      LayoutSceneZaxisMirror = "all"
	LayoutSceneZaxisMirrorAllticks LayoutSceneZaxisMirror = "allticks"
)

// LayoutSceneZaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
type LayoutSceneZaxisRangemode string

const (
	LayoutSceneZaxisRangemodeNormal      LayoutSceneZaxisRangemode = "normal"
	LayoutSceneZaxisRangemodeTozero      LayoutSceneZaxisRangemode = "tozero"
	LayoutSceneZaxisRangemodeNonnegative LayoutSceneZaxisRangemode = "nonnegative"
)

// LayoutSceneZaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutSceneZaxisShowexponent string

const (
	LayoutSceneZaxisShowexponentAll   LayoutSceneZaxisShowexponent = "all"
	LayoutSceneZaxisShowexponentFirst LayoutSceneZaxisShowexponent = "first"
	LayoutSceneZaxisShowexponentLast  LayoutSceneZaxisShowexponent = "last"
	LayoutSceneZaxisShowexponentNone  LayoutSceneZaxisShowexponent = "none"
)

// LayoutSceneZaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutSceneZaxisShowtickprefix string

const (
	LayoutSceneZaxisShowtickprefixAll   LayoutSceneZaxisShowtickprefix = "all"
	LayoutSceneZaxisShowtickprefixFirst LayoutSceneZaxisShowtickprefix = "first"
	LayoutSceneZaxisShowtickprefixLast  LayoutSceneZaxisShowtickprefix = "last"
	LayoutSceneZaxisShowtickprefixNone  LayoutSceneZaxisShowtickprefix = "none"
)

// LayoutSceneZaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutSceneZaxisShowticksuffix string

const (
	LayoutSceneZaxisShowticksuffixAll   LayoutSceneZaxisShowticksuffix = "all"
	LayoutSceneZaxisShowticksuffixFirst LayoutSceneZaxisShowticksuffix = "first"
	LayoutSceneZaxisShowticksuffixLast  LayoutSceneZaxisShowticksuffix = "last"
	LayoutSceneZaxisShowticksuffixNone  LayoutSceneZaxisShowticksuffix = "none"
)

// LayoutSceneZaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutSceneZaxisTickmode string

const (
	LayoutSceneZaxisTickmodeAuto   LayoutSceneZaxisTickmode = "auto"
	LayoutSceneZaxisTickmodeLinear LayoutSceneZaxisTickmode = "linear"
	LayoutSceneZaxisTickmodeArray  LayoutSceneZaxisTickmode = "array"
)

// LayoutSceneZaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutSceneZaxisTicks string

const (
	LayoutSceneZaxisTicksOutside LayoutSceneZaxisTicks = "outside"
	LayoutSceneZaxisTicksInside  LayoutSceneZaxisTicks = "inside"
	LayoutSceneZaxisTicksEmpty   LayoutSceneZaxisTicks = ""
)

// LayoutSceneZaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
type LayoutSceneZaxisType string

const (
	LayoutSceneZaxisTypeHyphenHyphen LayoutSceneZaxisType = "-"
	LayoutSceneZaxisTypeLinear       LayoutSceneZaxisType = "linear"
	LayoutSceneZaxisTypeLog          LayoutSceneZaxisType = "log"
	LayoutSceneZaxisTypeDate         LayoutSceneZaxisType = "date"
	LayoutSceneZaxisTypeCategory     LayoutSceneZaxisType = "category"
)

// LayoutSelectdirection When `dragmode` is set to *select*, this limits the selection of the drag to horizontal, vertical or diagonal. *h* only allows horizontal selection, *v* only vertical, *d* only diagonal and *any* sets no limit.
type LayoutSelectdirection string

const (
	LayoutSelectdirectionH   LayoutSelectdirection = "h"
	LayoutSelectdirectionV   LayoutSelectdirection = "v"
	LayoutSelectdirectionD   LayoutSelectdirection = "d"
	LayoutSelectdirectionAny LayoutSelectdirection = "any"
)

// LayoutSmithImaginaryaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutSmithImaginaryaxisLayer string

const (
	LayoutSmithImaginaryaxisLayerAboveTraces LayoutSmithImaginaryaxisLayer = "above traces"
	LayoutSmithImaginaryaxisLayerBelowTraces LayoutSmithImaginaryaxisLayer = "below traces"
)

// LayoutSmithImaginaryaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutSmithImaginaryaxisShowtickprefix string

const (
	LayoutSmithImaginaryaxisShowtickprefixAll   LayoutSmithImaginaryaxisShowtickprefix = "all"
	LayoutSmithImaginaryaxisShowtickprefixFirst LayoutSmithImaginaryaxisShowtickprefix = "first"
	LayoutSmithImaginaryaxisShowtickprefixLast  LayoutSmithImaginaryaxisShowtickprefix = "last"
	LayoutSmithImaginaryaxisShowtickprefixNone  LayoutSmithImaginaryaxisShowtickprefix = "none"
)

// LayoutSmithImaginaryaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutSmithImaginaryaxisShowticksuffix string

const (
	LayoutSmithImaginaryaxisShowticksuffixAll   LayoutSmithImaginaryaxisShowticksuffix = "all"
	LayoutSmithImaginaryaxisShowticksuffixFirst LayoutSmithImaginaryaxisShowticksuffix = "first"
	LayoutSmithImaginaryaxisShowticksuffixLast  LayoutSmithImaginaryaxisShowticksuffix = "last"
	LayoutSmithImaginaryaxisShowticksuffixNone  LayoutSmithImaginaryaxisShowticksuffix = "none"
)

// LayoutSmithImaginaryaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutSmithImaginaryaxisTicks string

const (
	LayoutSmithImaginaryaxisTicksOutside LayoutSmithImaginaryaxisTicks = "outside"
	LayoutSmithImaginaryaxisTicksInside  LayoutSmithImaginaryaxisTicks = "inside"
	LayoutSmithImaginaryaxisTicksEmpty   LayoutSmithImaginaryaxisTicks = ""
)

// LayoutSmithRealaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutSmithRealaxisLayer string

const (
	LayoutSmithRealaxisLayerAboveTraces LayoutSmithRealaxisLayer = "above traces"
	LayoutSmithRealaxisLayerBelowTraces LayoutSmithRealaxisLayer = "below traces"
)

// LayoutSmithRealaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutSmithRealaxisShowtickprefix string

const (
	LayoutSmithRealaxisShowtickprefixAll   LayoutSmithRealaxisShowtickprefix = "all"
	LayoutSmithRealaxisShowtickprefixFirst LayoutSmithRealaxisShowtickprefix = "first"
	LayoutSmithRealaxisShowtickprefixLast  LayoutSmithRealaxisShowtickprefix = "last"
	LayoutSmithRealaxisShowtickprefixNone  LayoutSmithRealaxisShowtickprefix = "none"
)

// LayoutSmithRealaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutSmithRealaxisShowticksuffix string

const (
	LayoutSmithRealaxisShowticksuffixAll   LayoutSmithRealaxisShowticksuffix = "all"
	LayoutSmithRealaxisShowticksuffixFirst LayoutSmithRealaxisShowticksuffix = "first"
	LayoutSmithRealaxisShowticksuffixLast  LayoutSmithRealaxisShowticksuffix = "last"
	LayoutSmithRealaxisShowticksuffixNone  LayoutSmithRealaxisShowticksuffix = "none"
)

// LayoutSmithRealaxisSide Determines on which side of real axis line the tick and tick labels appear.
type LayoutSmithRealaxisSide string

const (
	LayoutSmithRealaxisSideTop    LayoutSmithRealaxisSide = "top"
	LayoutSmithRealaxisSideBottom LayoutSmithRealaxisSide = "bottom"
)

// LayoutSmithRealaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *top* (*bottom*), this axis' are drawn above (below) the axis line.
type LayoutSmithRealaxisTicks string

const (
	LayoutSmithRealaxisTicksTop    LayoutSmithRealaxisTicks = "top"
	LayoutSmithRealaxisTicksBottom LayoutSmithRealaxisTicks = "bottom"
	LayoutSmithRealaxisTicksEmpty  LayoutSmithRealaxisTicks = ""
)

// LayoutTernaryAaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutTernaryAaxisExponentformat string

const (
	LayoutTernaryAaxisExponentformatNone  LayoutTernaryAaxisExponentformat = "none"
	LayoutTernaryAaxisExponentformatE1    LayoutTernaryAaxisExponentformat = "e"
	LayoutTernaryAaxisExponentformatE2    LayoutTernaryAaxisExponentformat = "E"
	LayoutTernaryAaxisExponentformatPower LayoutTernaryAaxisExponentformat = "power"
	LayoutTernaryAaxisExponentformatSI    LayoutTernaryAaxisExponentformat = "SI"
	LayoutTernaryAaxisExponentformatB     LayoutTernaryAaxisExponentformat = "B"
)

// LayoutTernaryAaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutTernaryAaxisLayer string

const (
	LayoutTernaryAaxisLayerAboveTraces LayoutTernaryAaxisLayer = "above traces"
	LayoutTernaryAaxisLayerBelowTraces LayoutTernaryAaxisLayer = "below traces"
)

// LayoutTernaryAaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutTernaryAaxisShowexponent string

const (
	LayoutTernaryAaxisShowexponentAll   LayoutTernaryAaxisShowexponent = "all"
	LayoutTernaryAaxisShowexponentFirst LayoutTernaryAaxisShowexponent = "first"
	LayoutTernaryAaxisShowexponentLast  LayoutTernaryAaxisShowexponent = "last"
	LayoutTernaryAaxisShowexponentNone  LayoutTernaryAaxisShowexponent = "none"
)

// LayoutTernaryAaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutTernaryAaxisShowtickprefix string

const (
	LayoutTernaryAaxisShowtickprefixAll   LayoutTernaryAaxisShowtickprefix = "all"
	LayoutTernaryAaxisShowtickprefixFirst LayoutTernaryAaxisShowtickprefix = "first"
	LayoutTernaryAaxisShowtickprefixLast  LayoutTernaryAaxisShowtickprefix = "last"
	LayoutTernaryAaxisShowtickprefixNone  LayoutTernaryAaxisShowtickprefix = "none"
)

// LayoutTernaryAaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutTernaryAaxisShowticksuffix string

const (
	LayoutTernaryAaxisShowticksuffixAll   LayoutTernaryAaxisShowticksuffix = "all"
	LayoutTernaryAaxisShowticksuffixFirst LayoutTernaryAaxisShowticksuffix = "first"
	LayoutTernaryAaxisShowticksuffixLast  LayoutTernaryAaxisShowticksuffix = "last"
	LayoutTernaryAaxisShowticksuffixNone  LayoutTernaryAaxisShowticksuffix = "none"
)

// LayoutTernaryAaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutTernaryAaxisTickmode string

const (
	LayoutTernaryAaxisTickmodeAuto   LayoutTernaryAaxisTickmode = "auto"
	LayoutTernaryAaxisTickmodeLinear LayoutTernaryAaxisTickmode = "linear"
	LayoutTernaryAaxisTickmodeArray  LayoutTernaryAaxisTickmode = "array"
)

// LayoutTernaryAaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutTernaryAaxisTicks string

const (
	LayoutTernaryAaxisTicksOutside LayoutTernaryAaxisTicks = "outside"
	LayoutTernaryAaxisTicksInside  LayoutTernaryAaxisTicks = "inside"
	LayoutTernaryAaxisTicksEmpty   LayoutTernaryAaxisTicks = ""
)

// LayoutTernaryBaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutTernaryBaxisExponentformat string

const (
	LayoutTernaryBaxisExponentformatNone  LayoutTernaryBaxisExponentformat = "none"
	LayoutTernaryBaxisExponentformatE1    LayoutTernaryBaxisExponentformat = "e"
	LayoutTernaryBaxisExponentformatE2    LayoutTernaryBaxisExponentformat = "E"
	LayoutTernaryBaxisExponentformatPower LayoutTernaryBaxisExponentformat = "power"
	LayoutTernaryBaxisExponentformatSI    LayoutTernaryBaxisExponentformat = "SI"
	LayoutTernaryBaxisExponentformatB     LayoutTernaryBaxisExponentformat = "B"
)

// LayoutTernaryBaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutTernaryBaxisLayer string

const (
	LayoutTernaryBaxisLayerAboveTraces LayoutTernaryBaxisLayer = "above traces"
	LayoutTernaryBaxisLayerBelowTraces LayoutTernaryBaxisLayer = "below traces"
)

// LayoutTernaryBaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutTernaryBaxisShowexponent string

const (
	LayoutTernaryBaxisShowexponentAll   LayoutTernaryBaxisShowexponent = "all"
	LayoutTernaryBaxisShowexponentFirst LayoutTernaryBaxisShowexponent = "first"
	LayoutTernaryBaxisShowexponentLast  LayoutTernaryBaxisShowexponent = "last"
	LayoutTernaryBaxisShowexponentNone  LayoutTernaryBaxisShowexponent = "none"
)

// LayoutTernaryBaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutTernaryBaxisShowtickprefix string

const (
	LayoutTernaryBaxisShowtickprefixAll   LayoutTernaryBaxisShowtickprefix = "all"
	LayoutTernaryBaxisShowtickprefixFirst LayoutTernaryBaxisShowtickprefix = "first"
	LayoutTernaryBaxisShowtickprefixLast  LayoutTernaryBaxisShowtickprefix = "last"
	LayoutTernaryBaxisShowtickprefixNone  LayoutTernaryBaxisShowtickprefix = "none"
)

// LayoutTernaryBaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutTernaryBaxisShowticksuffix string

const (
	LayoutTernaryBaxisShowticksuffixAll   LayoutTernaryBaxisShowticksuffix = "all"
	LayoutTernaryBaxisShowticksuffixFirst LayoutTernaryBaxisShowticksuffix = "first"
	LayoutTernaryBaxisShowticksuffixLast  LayoutTernaryBaxisShowticksuffix = "last"
	LayoutTernaryBaxisShowticksuffixNone  LayoutTernaryBaxisShowticksuffix = "none"
)

// LayoutTernaryBaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutTernaryBaxisTickmode string

const (
	LayoutTernaryBaxisTickmodeAuto   LayoutTernaryBaxisTickmode = "auto"
	LayoutTernaryBaxisTickmodeLinear LayoutTernaryBaxisTickmode = "linear"
	LayoutTernaryBaxisTickmodeArray  LayoutTernaryBaxisTickmode = "array"
)

// LayoutTernaryBaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutTernaryBaxisTicks string

const (
	LayoutTernaryBaxisTicksOutside LayoutTernaryBaxisTicks = "outside"
	LayoutTernaryBaxisTicksInside  LayoutTernaryBaxisTicks = "inside"
	LayoutTernaryBaxisTicksEmpty   LayoutTernaryBaxisTicks = ""
)

// LayoutTernaryCaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutTernaryCaxisExponentformat string

const (
	LayoutTernaryCaxisExponentformatNone  LayoutTernaryCaxisExponentformat = "none"
	LayoutTernaryCaxisExponentformatE1    LayoutTernaryCaxisExponentformat = "e"
	LayoutTernaryCaxisExponentformatE2    LayoutTernaryCaxisExponentformat = "E"
	LayoutTernaryCaxisExponentformatPower LayoutTernaryCaxisExponentformat = "power"
	LayoutTernaryCaxisExponentformatSI    LayoutTernaryCaxisExponentformat = "SI"
	LayoutTernaryCaxisExponentformatB     LayoutTernaryCaxisExponentformat = "B"
)

// LayoutTernaryCaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutTernaryCaxisLayer string

const (
	LayoutTernaryCaxisLayerAboveTraces LayoutTernaryCaxisLayer = "above traces"
	LayoutTernaryCaxisLayerBelowTraces LayoutTernaryCaxisLayer = "below traces"
)

// LayoutTernaryCaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutTernaryCaxisShowexponent string

const (
	LayoutTernaryCaxisShowexponentAll   LayoutTernaryCaxisShowexponent = "all"
	LayoutTernaryCaxisShowexponentFirst LayoutTernaryCaxisShowexponent = "first"
	LayoutTernaryCaxisShowexponentLast  LayoutTernaryCaxisShowexponent = "last"
	LayoutTernaryCaxisShowexponentNone  LayoutTernaryCaxisShowexponent = "none"
)

// LayoutTernaryCaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutTernaryCaxisShowtickprefix string

const (
	LayoutTernaryCaxisShowtickprefixAll   LayoutTernaryCaxisShowtickprefix = "all"
	LayoutTernaryCaxisShowtickprefixFirst LayoutTernaryCaxisShowtickprefix = "first"
	LayoutTernaryCaxisShowtickprefixLast  LayoutTernaryCaxisShowtickprefix = "last"
	LayoutTernaryCaxisShowtickprefixNone  LayoutTernaryCaxisShowtickprefix = "none"
)

// LayoutTernaryCaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutTernaryCaxisShowticksuffix string

const (
	LayoutTernaryCaxisShowticksuffixAll   LayoutTernaryCaxisShowticksuffix = "all"
	LayoutTernaryCaxisShowticksuffixFirst LayoutTernaryCaxisShowticksuffix = "first"
	LayoutTernaryCaxisShowticksuffixLast  LayoutTernaryCaxisShowticksuffix = "last"
	LayoutTernaryCaxisShowticksuffixNone  LayoutTernaryCaxisShowticksuffix = "none"
)

// LayoutTernaryCaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutTernaryCaxisTickmode string

const (
	LayoutTernaryCaxisTickmodeAuto   LayoutTernaryCaxisTickmode = "auto"
	LayoutTernaryCaxisTickmodeLinear LayoutTernaryCaxisTickmode = "linear"
	LayoutTernaryCaxisTickmodeArray  LayoutTernaryCaxisTickmode = "array"
)

// LayoutTernaryCaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutTernaryCaxisTicks string

const (
	LayoutTernaryCaxisTicksOutside LayoutTernaryCaxisTicks = "outside"
	LayoutTernaryCaxisTicksInside  LayoutTernaryCaxisTicks = "inside"
	LayoutTernaryCaxisTicksEmpty   LayoutTernaryCaxisTicks = ""
)

// LayoutTitleXanchor Sets the title's horizontal alignment with respect to its x position. *left* means that the title starts at x, *right* means that the title ends at x and *center* means that the title's center is at x. *auto* divides `xref` by three and calculates the `xanchor` value automatically based on the value of `x`.
type LayoutTitleXanchor string

const (
	LayoutTitleXanchorAuto   LayoutTitleXanchor = "auto"
	LayoutTitleXanchorLeft   LayoutTitleXanchor = "left"
	LayoutTitleXanchorCenter LayoutTitleXanchor = "center"
	LayoutTitleXanchorRight  LayoutTitleXanchor = "right"
)

// LayoutTitleXref Sets the container `x` refers to. *container* spans the entire `width` of the plot. *paper* refers to the width of the plotting area only.
type LayoutTitleXref string

const (
	LayoutTitleXrefContainer LayoutTitleXref = "container"
	LayoutTitleXrefPaper     LayoutTitleXref = "paper"
)

// LayoutTitleYanchor Sets the title's vertical alignment with respect to its y position. *top* means that the title's cap line is at y, *bottom* means that the title's baseline is at y and *middle* means that the title's midline is at y. *auto* divides `yref` by three and calculates the `yanchor` value automatically based on the value of `y`.
type LayoutTitleYanchor string

const (
	LayoutTitleYanchorAuto   LayoutTitleYanchor = "auto"
	LayoutTitleYanchorTop    LayoutTitleYanchor = "top"
	LayoutTitleYanchorMiddle LayoutTitleYanchor = "middle"
	LayoutTitleYanchorBottom LayoutTitleYanchor = "bottom"
)

// LayoutTitleYref Sets the container `y` refers to. *container* spans the entire `height` of the plot. *paper* refers to the height of the plotting area only.
type LayoutTitleYref string

const (
	LayoutTitleYrefContainer LayoutTitleYref = "container"
	LayoutTitleYrefPaper     LayoutTitleYref = "paper"
)

// LayoutTransitionEasing The easing function used for the transition
type LayoutTransitionEasing string

const (
	LayoutTransitionEasingLinear       LayoutTransitionEasing = "linear"
	LayoutTransitionEasingQuad         LayoutTransitionEasing = "quad"
	LayoutTransitionEasingCubic        LayoutTransitionEasing = "cubic"
	LayoutTransitionEasingSin          LayoutTransitionEasing = "sin"
	LayoutTransitionEasingExp          LayoutTransitionEasing = "exp"
	LayoutTransitionEasingCircle       LayoutTransitionEasing = "circle"
	LayoutTransitionEasingElastic      LayoutTransitionEasing = "elastic"
	LayoutTransitionEasingBack         LayoutTransitionEasing = "back"
	LayoutTransitionEasingBounce       LayoutTransitionEasing = "bounce"
	LayoutTransitionEasingLinearIn     LayoutTransitionEasing = "linear-in"
	LayoutTransitionEasingQuadIn       LayoutTransitionEasing = "quad-in"
	LayoutTransitionEasingCubicIn      LayoutTransitionEasing = "cubic-in"
	LayoutTransitionEasingSinIn        LayoutTransitionEasing = "sin-in"
	LayoutTransitionEasingExpIn        LayoutTransitionEasing = "exp-in"
	LayoutTransitionEasingCircleIn     LayoutTransitionEasing = "circle-in"
	LayoutTransitionEasingElasticIn    LayoutTransitionEasing = "elastic-in"
	LayoutTransitionEasingBackIn       LayoutTransitionEasing = "back-in"
	LayoutTransitionEasingBounceIn     LayoutTransitionEasing = "bounce-in"
	LayoutTransitionEasingLinearOut    LayoutTransitionEasing = "linear-out"
	LayoutTransitionEasingQuadOut      LayoutTransitionEasing = "quad-out"
	LayoutTransitionEasingCubicOut     LayoutTransitionEasing = "cubic-out"
	LayoutTransitionEasingSinOut       LayoutTransitionEasing = "sin-out"
	LayoutTransitionEasingExpOut       LayoutTransitionEasing = "exp-out"
	LayoutTransitionEasingCircleOut    LayoutTransitionEasing = "circle-out"
	LayoutTransitionEasingElasticOut   LayoutTransitionEasing = "elastic-out"
	LayoutTransitionEasingBackOut      LayoutTransitionEasing = "back-out"
	LayoutTransitionEasingBounceOut    LayoutTransitionEasing = "bounce-out"
	LayoutTransitionEasingLinearInOut  LayoutTransitionEasing = "linear-in-out"
	LayoutTransitionEasingQuadInOut    LayoutTransitionEasing = "quad-in-out"
	LayoutTransitionEasingCubicInOut   LayoutTransitionEasing = "cubic-in-out"
	LayoutTransitionEasingSinInOut     LayoutTransitionEasing = "sin-in-out"
	LayoutTransitionEasingExpInOut     LayoutTransitionEasing = "exp-in-out"
	LayoutTransitionEasingCircleInOut  LayoutTransitionEasing = "circle-in-out"
	LayoutTransitionEasingElasticInOut LayoutTransitionEasing = "elastic-in-out"
	LayoutTransitionEasingBackInOut    LayoutTransitionEasing = "back-in-out"
	LayoutTransitionEasingBounceInOut  LayoutTransitionEasing = "bounce-in-out"
)

// LayoutTransitionOrdering Determines whether the figure's layout or traces smoothly transitions during updates that make both traces and layout change.
type LayoutTransitionOrdering string

const (
	LayoutTransitionOrderingLayoutFirst LayoutTransitionOrdering = "layout first"
	LayoutTransitionOrderingTracesFirst LayoutTransitionOrdering = "traces first"
)

// LayoutUniformtextMode Determines how the font size for various text elements are uniformed between each trace type. If the computed text sizes were smaller than the minimum size defined by `uniformtext.minsize` using *hide* option hides the text; and using *show* option shows the text without further downscaling. Please note that if the size defined by `minsize` is greater than the font size defined by trace, then the `minsize` is used.
type LayoutUniformtextMode interface{}

var (
	LayoutUniformtextModeFalse LayoutUniformtextMode = false
	LayoutUniformtextModeHide  LayoutUniformtextMode = "hide"
	LayoutUniformtextModeShow  LayoutUniformtextMode = "show"
)

// LayoutViolinmode Determines how violins at the same location coordinate are displayed on the graph. If *group*, the violins are plotted next to one another centered around the shared location. If *overlay*, the violins are plotted over one another, you might need to set *opacity* to see them multiple violins. Has no effect on traces that have *width* set.
type LayoutViolinmode string

const (
	ViolinViolinmodeGroup   LayoutViolinmode = "group"
	ViolinViolinmodeOverlay LayoutViolinmode = "overlay"
)

// LayoutWaterfallmode Determines how bars at the same location coordinate are displayed on the graph. With *group*, the bars are plotted next to one another centered around the shared location. With *overlay*, the bars are plotted over one another, you might need to reduce *opacity* to see multiple bars.
type LayoutWaterfallmode string

const (
	WaterfallWaterfallmodeGroup   LayoutWaterfallmode = "group"
	WaterfallWaterfallmodeOverlay LayoutWaterfallmode = "overlay"
)

// LayoutXaxisAnchor If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
type LayoutXaxisAnchor string

const (
	LayoutXaxisAnchorFree                                                                                                                    LayoutXaxisAnchor = "free"
	LayoutXaxisAnchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisAnchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisAnchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisAnchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutXaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
type LayoutXaxisAutorange interface{}

var (
	LayoutXaxisAutorangeTrue        LayoutXaxisAutorange = true
	LayoutXaxisAutorangeFalse       LayoutXaxisAutorange = false
	LayoutXaxisAutorangeReversed    LayoutXaxisAutorange = "reversed"
	LayoutXaxisAutorangeMinReversed LayoutXaxisAutorange = "min reversed"
	LayoutXaxisAutorangeMaxReversed LayoutXaxisAutorange = "max reversed"
	LayoutXaxisAutorangeMin         LayoutXaxisAutorange = "min"
	LayoutXaxisAutorangeMax         LayoutXaxisAutorange = "max"
)

// LayoutXaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
type LayoutXaxisAutotypenumbers string

const (
	LayoutXaxisAutotypenumbersConvertTypes LayoutXaxisAutotypenumbers = "convert types"
	LayoutXaxisAutotypenumbersStrict       LayoutXaxisAutotypenumbers = "strict"
)

// LayoutXaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
type LayoutXaxisCalendar string

const (
	LayoutXaxisCalendarChinese    LayoutXaxisCalendar = "chinese"
	LayoutXaxisCalendarCoptic     LayoutXaxisCalendar = "coptic"
	LayoutXaxisCalendarDiscworld  LayoutXaxisCalendar = "discworld"
	LayoutXaxisCalendarEthiopian  LayoutXaxisCalendar = "ethiopian"
	LayoutXaxisCalendarGregorian  LayoutXaxisCalendar = "gregorian"
	LayoutXaxisCalendarHebrew     LayoutXaxisCalendar = "hebrew"
	LayoutXaxisCalendarIslamic    LayoutXaxisCalendar = "islamic"
	LayoutXaxisCalendarJalali     LayoutXaxisCalendar = "jalali"
	LayoutXaxisCalendarJulian     LayoutXaxisCalendar = "julian"
	LayoutXaxisCalendarMayan      LayoutXaxisCalendar = "mayan"
	LayoutXaxisCalendarNanakshahi LayoutXaxisCalendar = "nanakshahi"
	LayoutXaxisCalendarNepali     LayoutXaxisCalendar = "nepali"
	LayoutXaxisCalendarPersian    LayoutXaxisCalendar = "persian"
	LayoutXaxisCalendarTaiwan     LayoutXaxisCalendar = "taiwan"
	LayoutXaxisCalendarThai       LayoutXaxisCalendar = "thai"
	LayoutXaxisCalendarUmmalqura  LayoutXaxisCalendar = "ummalqura"
)

// LayoutXaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
type LayoutXaxisCategoryorder string

const (
	LayoutXaxisCategoryorderTrace              LayoutXaxisCategoryorder = "trace"
	LayoutXaxisCategoryorderCategoryAscending  LayoutXaxisCategoryorder = "category ascending"
	LayoutXaxisCategoryorderCategoryDescending LayoutXaxisCategoryorder = "category descending"
	LayoutXaxisCategoryorderArray              LayoutXaxisCategoryorder = "array"
	LayoutXaxisCategoryorderTotalAscending     LayoutXaxisCategoryorder = "total ascending"
	LayoutXaxisCategoryorderTotalDescending    LayoutXaxisCategoryorder = "total descending"
	LayoutXaxisCategoryorderMinAscending       LayoutXaxisCategoryorder = "min ascending"
	LayoutXaxisCategoryorderMinDescending      LayoutXaxisCategoryorder = "min descending"
	LayoutXaxisCategoryorderMaxAscending       LayoutXaxisCategoryorder = "max ascending"
	LayoutXaxisCategoryorderMaxDescending      LayoutXaxisCategoryorder = "max descending"
	LayoutXaxisCategoryorderSumAscending       LayoutXaxisCategoryorder = "sum ascending"
	LayoutXaxisCategoryorderSumDescending      LayoutXaxisCategoryorder = "sum descending"
	LayoutXaxisCategoryorderMeanAscending      LayoutXaxisCategoryorder = "mean ascending"
	LayoutXaxisCategoryorderMeanDescending     LayoutXaxisCategoryorder = "mean descending"
	LayoutXaxisCategoryorderMedianAscending    LayoutXaxisCategoryorder = "median ascending"
	LayoutXaxisCategoryorderMedianDescending   LayoutXaxisCategoryorder = "median descending"
)

// LayoutXaxisConstrain If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
type LayoutXaxisConstrain string

const (
	LayoutXaxisConstrainRange  LayoutXaxisConstrain = "range"
	LayoutXaxisConstrainDomain LayoutXaxisConstrain = "domain"
)

// LayoutXaxisConstraintoward If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
type LayoutXaxisConstraintoward string

const (
	LayoutXaxisConstraintowardLeft   LayoutXaxisConstraintoward = "left"
	LayoutXaxisConstraintowardCenter LayoutXaxisConstraintoward = "center"
	LayoutXaxisConstraintowardRight  LayoutXaxisConstraintoward = "right"
	LayoutXaxisConstraintowardTop    LayoutXaxisConstraintoward = "top"
	LayoutXaxisConstraintowardMiddle LayoutXaxisConstraintoward = "middle"
	LayoutXaxisConstraintowardBottom LayoutXaxisConstraintoward = "bottom"
)

// LayoutXaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutXaxisExponentformat string

const (
	LayoutXaxisExponentformatNone  LayoutXaxisExponentformat = "none"
	LayoutXaxisExponentformatE1    LayoutXaxisExponentformat = "e"
	LayoutXaxisExponentformatE2    LayoutXaxisExponentformat = "E"
	LayoutXaxisExponentformatPower LayoutXaxisExponentformat = "power"
	LayoutXaxisExponentformatSI    LayoutXaxisExponentformat = "SI"
	LayoutXaxisExponentformatB     LayoutXaxisExponentformat = "B"
)

// LayoutXaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutXaxisLayer string

const (
	LayoutXaxisLayerAboveTraces LayoutXaxisLayer = "above traces"
	LayoutXaxisLayerBelowTraces LayoutXaxisLayer = "below traces"
)

// LayoutXaxisMatches If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
type LayoutXaxisMatches string

const (
	LayoutXaxisMatchesSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisMatches = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisMatchesSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisMatches = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutXaxisMinorTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutXaxisMinorTickmode string

const (
	LayoutXaxisMinorTickmodeAuto   LayoutXaxisMinorTickmode = "auto"
	LayoutXaxisMinorTickmodeLinear LayoutXaxisMinorTickmode = "linear"
	LayoutXaxisMinorTickmodeArray  LayoutXaxisMinorTickmode = "array"
)

// LayoutXaxisMinorTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutXaxisMinorTicks string

const (
	LayoutXaxisMinorTicksOutside LayoutXaxisMinorTicks = "outside"
	LayoutXaxisMinorTicksInside  LayoutXaxisMinorTicks = "inside"
	LayoutXaxisMinorTicksEmpty   LayoutXaxisMinorTicks = ""
)

// LayoutXaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
type LayoutXaxisMirror interface{}

var (
	LayoutXaxisMirrorTrue     LayoutXaxisMirror = true
	LayoutXaxisMirrorTicks    LayoutXaxisMirror = "ticks"
	LayoutXaxisMirrorFalse    LayoutXaxisMirror = false
	LayoutXaxisMirrorAll      LayoutXaxisMirror = "all"
	LayoutXaxisMirrorAllticks LayoutXaxisMirror = "allticks"
)

// LayoutXaxisOverlaying If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
type LayoutXaxisOverlaying string

const (
	LayoutXaxisOverlayingFree                                                                                                                    LayoutXaxisOverlaying = "free"
	LayoutXaxisOverlayingSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisOverlaying = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisOverlayingSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisOverlaying = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutXaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
type LayoutXaxisRangemode string

const (
	LayoutXaxisRangemodeNormal      LayoutXaxisRangemode = "normal"
	LayoutXaxisRangemodeTozero      LayoutXaxisRangemode = "tozero"
	LayoutXaxisRangemodeNonnegative LayoutXaxisRangemode = "nonnegative"
)

// LayoutXaxisRangeselectorXanchor Sets the range selector's horizontal position anchor. This anchor binds the `x` position to the *left*, *center* or *right* of the range selector.
type LayoutXaxisRangeselectorXanchor string

const (
	LayoutXaxisRangeselectorXanchorAuto   LayoutXaxisRangeselectorXanchor = "auto"
	LayoutXaxisRangeselectorXanchorLeft   LayoutXaxisRangeselectorXanchor = "left"
	LayoutXaxisRangeselectorXanchorCenter LayoutXaxisRangeselectorXanchor = "center"
	LayoutXaxisRangeselectorXanchorRight  LayoutXaxisRangeselectorXanchor = "right"
)

// LayoutXaxisRangeselectorYanchor Sets the range selector's vertical position anchor This anchor binds the `y` position to the *top*, *middle* or *bottom* of the range selector.
type LayoutXaxisRangeselectorYanchor string

const (
	LayoutXaxisRangeselectorYanchorAuto   LayoutXaxisRangeselectorYanchor = "auto"
	LayoutXaxisRangeselectorYanchorTop    LayoutXaxisRangeselectorYanchor = "top"
	LayoutXaxisRangeselectorYanchorMiddle LayoutXaxisRangeselectorYanchor = "middle"
	LayoutXaxisRangeselectorYanchorBottom LayoutXaxisRangeselectorYanchor = "bottom"
)

// LayoutXaxisRangesliderYaxisRangemode Determines whether or not the range of this axis in the rangeslider use the same value than in the main plot when zooming in/out. If *auto*, the autorange will be used. If *fixed*, the `range` is used. If *match*, the current range of the corresponding y-axis on the main subplot is used.
type LayoutXaxisRangesliderYaxisRangemode string

const (
	LayoutXaxisRangesliderYaxisRangemodeAuto  LayoutXaxisRangesliderYaxisRangemode = "auto"
	LayoutXaxisRangesliderYaxisRangemodeFixed LayoutXaxisRangesliderYaxisRangemode = "fixed"
	LayoutXaxisRangesliderYaxisRangemodeMatch LayoutXaxisRangesliderYaxisRangemode = "match"
)

// LayoutXaxisScaleanchor If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
type LayoutXaxisScaleanchor interface{}

var (
	LayoutXaxisScaleanchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisScaleanchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisScaleanchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutXaxisScaleanchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutXaxisScaleanchorFalse                                                                                                                   LayoutXaxisScaleanchor = false
)

// LayoutXaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutXaxisShowexponent string

const (
	LayoutXaxisShowexponentAll   LayoutXaxisShowexponent = "all"
	LayoutXaxisShowexponentFirst LayoutXaxisShowexponent = "first"
	LayoutXaxisShowexponentLast  LayoutXaxisShowexponent = "last"
	LayoutXaxisShowexponentNone  LayoutXaxisShowexponent = "none"
)

// LayoutXaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutXaxisShowtickprefix string

const (
	LayoutXaxisShowtickprefixAll   LayoutXaxisShowtickprefix = "all"
	LayoutXaxisShowtickprefixFirst LayoutXaxisShowtickprefix = "first"
	LayoutXaxisShowtickprefixLast  LayoutXaxisShowtickprefix = "last"
	LayoutXaxisShowtickprefixNone  LayoutXaxisShowtickprefix = "none"
)

// LayoutXaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutXaxisShowticksuffix string

const (
	LayoutXaxisShowticksuffixAll   LayoutXaxisShowticksuffix = "all"
	LayoutXaxisShowticksuffixFirst LayoutXaxisShowticksuffix = "first"
	LayoutXaxisShowticksuffixLast  LayoutXaxisShowticksuffix = "last"
	LayoutXaxisShowticksuffixNone  LayoutXaxisShowticksuffix = "none"
)

// LayoutXaxisSide Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
type LayoutXaxisSide string

const (
	LayoutXaxisSideTop    LayoutXaxisSide = "top"
	LayoutXaxisSideBottom LayoutXaxisSide = "bottom"
	LayoutXaxisSideLeft   LayoutXaxisSide = "left"
	LayoutXaxisSideRight  LayoutXaxisSide = "right"
)

// LayoutXaxisSpikesnap Determines whether spikelines are stuck to the cursor or to the closest datapoints.
type LayoutXaxisSpikesnap string

const (
	LayoutXaxisSpikesnapData        LayoutXaxisSpikesnap = "data"
	LayoutXaxisSpikesnapCursor      LayoutXaxisSpikesnap = "cursor"
	LayoutXaxisSpikesnapHoveredData LayoutXaxisSpikesnap = "hovered data"
)

// LayoutXaxisTicklabelmode Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
type LayoutXaxisTicklabelmode string

const (
	LayoutXaxisTicklabelmodeInstant LayoutXaxisTicklabelmode = "instant"
	LayoutXaxisTicklabelmodePeriod  LayoutXaxisTicklabelmode = "period"
)

// LayoutXaxisTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
type LayoutXaxisTicklabeloverflow string

const (
	LayoutXaxisTicklabeloverflowAllow          LayoutXaxisTicklabeloverflow = "allow"
	LayoutXaxisTicklabeloverflowHidePastDiv    LayoutXaxisTicklabeloverflow = "hide past div"
	LayoutXaxisTicklabeloverflowHidePastDomain LayoutXaxisTicklabeloverflow = "hide past domain"
)

// LayoutXaxisTicklabelposition Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
type LayoutXaxisTicklabelposition string

const (
	LayoutXaxisTicklabelpositionOutside       LayoutXaxisTicklabelposition = "outside"
	LayoutXaxisTicklabelpositionInside        LayoutXaxisTicklabelposition = "inside"
	LayoutXaxisTicklabelpositionOutsideTop    LayoutXaxisTicklabelposition = "outside top"
	LayoutXaxisTicklabelpositionInsideTop     LayoutXaxisTicklabelposition = "inside top"
	LayoutXaxisTicklabelpositionOutsideLeft   LayoutXaxisTicklabelposition = "outside left"
	LayoutXaxisTicklabelpositionInsideLeft    LayoutXaxisTicklabelposition = "inside left"
	LayoutXaxisTicklabelpositionOutsideRight  LayoutXaxisTicklabelposition = "outside right"
	LayoutXaxisTicklabelpositionInsideRight   LayoutXaxisTicklabelposition = "inside right"
	LayoutXaxisTicklabelpositionOutsideBottom LayoutXaxisTicklabelposition = "outside bottom"
	LayoutXaxisTicklabelpositionInsideBottom  LayoutXaxisTicklabelposition = "inside bottom"
)

// LayoutXaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
type LayoutXaxisTickmode string

const (
	LayoutXaxisTickmodeAuto   LayoutXaxisTickmode = "auto"
	LayoutXaxisTickmodeLinear LayoutXaxisTickmode = "linear"
	LayoutXaxisTickmodeArray  LayoutXaxisTickmode = "array"
	LayoutXaxisTickmodeSync   LayoutXaxisTickmode = "sync"
)

// LayoutXaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutXaxisTicks string

const (
	LayoutXaxisTicksOutside LayoutXaxisTicks = "outside"
	LayoutXaxisTicksInside  LayoutXaxisTicks = "inside"
	LayoutXaxisTicksEmpty   LayoutXaxisTicks = ""
)

// LayoutXaxisTickson Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
type LayoutXaxisTickson string

const (
	LayoutXaxisTicksonLabels     LayoutXaxisTickson = "labels"
	LayoutXaxisTicksonBoundaries LayoutXaxisTickson = "boundaries"
)

// LayoutXaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
type LayoutXaxisType string

const (
	LayoutXaxisTypeHyphenHyphen  LayoutXaxisType = "-"
	LayoutXaxisTypeLinear        LayoutXaxisType = "linear"
	LayoutXaxisTypeLog           LayoutXaxisType = "log"
	LayoutXaxisTypeDate          LayoutXaxisType = "date"
	LayoutXaxisTypeCategory      LayoutXaxisType = "category"
	LayoutXaxisTypeMulticategory LayoutXaxisType = "multicategory"
)

// LayoutYaxisAnchor If set to an opposite-letter axis id (e.g. `x2`, `y`), this axis is bound to the corresponding opposite-letter axis. If set to *free*, this axis' position is determined by `position`.
type LayoutYaxisAnchor string

const (
	LayoutYaxisAnchorFree                                                                                                                    LayoutYaxisAnchor = "free"
	LayoutYaxisAnchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisAnchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisAnchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisAnchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutYaxisAutorange Determines whether or not the range of this axis is computed in relation to the input data. See `rangemode` for more info. If `range` is provided and it has a value for both the lower and upper bound, `autorange` is set to *false*. Using *min* applies autorange only to set the minimum. Using *max* applies autorange only to set the maximum. Using *min reversed* applies autorange only to set the minimum on a reversed axis. Using *max reversed* applies autorange only to set the maximum on a reversed axis. Using *reversed* applies autorange on both ends and reverses the axis direction.
type LayoutYaxisAutorange interface{}

var (
	LayoutYaxisAutorangeTrue        LayoutYaxisAutorange = true
	LayoutYaxisAutorangeFalse       LayoutYaxisAutorange = false
	LayoutYaxisAutorangeReversed    LayoutYaxisAutorange = "reversed"
	LayoutYaxisAutorangeMinReversed LayoutYaxisAutorange = "min reversed"
	LayoutYaxisAutorangeMaxReversed LayoutYaxisAutorange = "max reversed"
	LayoutYaxisAutorangeMin         LayoutYaxisAutorange = "min"
	LayoutYaxisAutorangeMax         LayoutYaxisAutorange = "max"
)

// LayoutYaxisAutotypenumbers Using *strict* a numeric string in trace data is not converted to a number. Using *convert types* a numeric string in trace data may be treated as a number during automatic axis `type` detection. Defaults to layout.autotypenumbers.
type LayoutYaxisAutotypenumbers string

const (
	LayoutYaxisAutotypenumbersConvertTypes LayoutYaxisAutotypenumbers = "convert types"
	LayoutYaxisAutotypenumbersStrict       LayoutYaxisAutotypenumbers = "strict"
)

// LayoutYaxisCalendar Sets the calendar system to use for `range` and `tick0` if this is a date axis. This does not set the calendar for interpreting data on this axis, that's specified in the trace or via the global `layout.calendar`
type LayoutYaxisCalendar string

const (
	LayoutYaxisCalendarChinese    LayoutYaxisCalendar = "chinese"
	LayoutYaxisCalendarCoptic     LayoutYaxisCalendar = "coptic"
	LayoutYaxisCalendarDiscworld  LayoutYaxisCalendar = "discworld"
	LayoutYaxisCalendarEthiopian  LayoutYaxisCalendar = "ethiopian"
	LayoutYaxisCalendarGregorian  LayoutYaxisCalendar = "gregorian"
	LayoutYaxisCalendarHebrew     LayoutYaxisCalendar = "hebrew"
	LayoutYaxisCalendarIslamic    LayoutYaxisCalendar = "islamic"
	LayoutYaxisCalendarJalali     LayoutYaxisCalendar = "jalali"
	LayoutYaxisCalendarJulian     LayoutYaxisCalendar = "julian"
	LayoutYaxisCalendarMayan      LayoutYaxisCalendar = "mayan"
	LayoutYaxisCalendarNanakshahi LayoutYaxisCalendar = "nanakshahi"
	LayoutYaxisCalendarNepali     LayoutYaxisCalendar = "nepali"
	LayoutYaxisCalendarPersian    LayoutYaxisCalendar = "persian"
	LayoutYaxisCalendarTaiwan     LayoutYaxisCalendar = "taiwan"
	LayoutYaxisCalendarThai       LayoutYaxisCalendar = "thai"
	LayoutYaxisCalendarUmmalqura  LayoutYaxisCalendar = "ummalqura"
)

// LayoutYaxisCategoryorder Specifies the ordering logic for the case of categorical variables. By default, plotly uses *trace*, which specifies the order that is present in the data supplied. Set `categoryorder` to *category ascending* or *category descending* if order should be determined by the alphanumerical order of the category names. Set `categoryorder` to *array* to derive the ordering from the attribute `categoryarray`. If a category is not found in the `categoryarray` array, the sorting behavior for that attribute will be identical to the *trace* mode. The unspecified categories will follow the categories in `categoryarray`. Set `categoryorder` to *total ascending* or *total descending* if order should be determined by the numerical order of the values. Similarly, the order can be determined by the min, max, sum, mean or median of all the values.
type LayoutYaxisCategoryorder string

const (
	LayoutYaxisCategoryorderTrace              LayoutYaxisCategoryorder = "trace"
	LayoutYaxisCategoryorderCategoryAscending  LayoutYaxisCategoryorder = "category ascending"
	LayoutYaxisCategoryorderCategoryDescending LayoutYaxisCategoryorder = "category descending"
	LayoutYaxisCategoryorderArray              LayoutYaxisCategoryorder = "array"
	LayoutYaxisCategoryorderTotalAscending     LayoutYaxisCategoryorder = "total ascending"
	LayoutYaxisCategoryorderTotalDescending    LayoutYaxisCategoryorder = "total descending"
	LayoutYaxisCategoryorderMinAscending       LayoutYaxisCategoryorder = "min ascending"
	LayoutYaxisCategoryorderMinDescending      LayoutYaxisCategoryorder = "min descending"
	LayoutYaxisCategoryorderMaxAscending       LayoutYaxisCategoryorder = "max ascending"
	LayoutYaxisCategoryorderMaxDescending      LayoutYaxisCategoryorder = "max descending"
	LayoutYaxisCategoryorderSumAscending       LayoutYaxisCategoryorder = "sum ascending"
	LayoutYaxisCategoryorderSumDescending      LayoutYaxisCategoryorder = "sum descending"
	LayoutYaxisCategoryorderMeanAscending      LayoutYaxisCategoryorder = "mean ascending"
	LayoutYaxisCategoryorderMeanDescending     LayoutYaxisCategoryorder = "mean descending"
	LayoutYaxisCategoryorderMedianAscending    LayoutYaxisCategoryorder = "median ascending"
	LayoutYaxisCategoryorderMedianDescending   LayoutYaxisCategoryorder = "median descending"
)

// LayoutYaxisConstrain If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines how that happens: by increasing the *range*, or by decreasing the *domain*. Default is *domain* for axes containing image traces, *range* otherwise.
type LayoutYaxisConstrain string

const (
	LayoutYaxisConstrainRange  LayoutYaxisConstrain = "range"
	LayoutYaxisConstrainDomain LayoutYaxisConstrain = "domain"
)

// LayoutYaxisConstraintoward If this axis needs to be compressed (either due to its own `scaleanchor` and `scaleratio` or those of the other axis), determines which direction we push the originally specified plot area. Options are *left*, *center* (default), and *right* for x axes, and *top*, *middle* (default), and *bottom* for y axes.
type LayoutYaxisConstraintoward string

const (
	LayoutYaxisConstraintowardLeft   LayoutYaxisConstraintoward = "left"
	LayoutYaxisConstraintowardCenter LayoutYaxisConstraintoward = "center"
	LayoutYaxisConstraintowardRight  LayoutYaxisConstraintoward = "right"
	LayoutYaxisConstraintowardTop    LayoutYaxisConstraintoward = "top"
	LayoutYaxisConstraintowardMiddle LayoutYaxisConstraintoward = "middle"
	LayoutYaxisConstraintowardBottom LayoutYaxisConstraintoward = "bottom"
)

// LayoutYaxisExponentformat Determines a formatting rule for the tick exponents. For example, consider the number 1,000,000,000. If *none*, it appears as 1,000,000,000. If *e*, 1e+9. If *E*, 1E+9. If *power*, 1x10^9 (with 9 in a super script). If *SI*, 1G. If *B*, 1B.
type LayoutYaxisExponentformat string

const (
	LayoutYaxisExponentformatNone  LayoutYaxisExponentformat = "none"
	LayoutYaxisExponentformatE1    LayoutYaxisExponentformat = "e"
	LayoutYaxisExponentformatE2    LayoutYaxisExponentformat = "E"
	LayoutYaxisExponentformatPower LayoutYaxisExponentformat = "power"
	LayoutYaxisExponentformatSI    LayoutYaxisExponentformat = "SI"
	LayoutYaxisExponentformatB     LayoutYaxisExponentformat = "B"
)

// LayoutYaxisLayer Sets the layer on which this axis is displayed. If *above traces*, this axis is displayed above all the subplot's traces If *below traces*, this axis is displayed below all the subplot's traces, but above the grid lines. Useful when used together with scatter-like traces with `cliponaxis` set to *false* to show markers and/or text nodes above this axis.
type LayoutYaxisLayer string

const (
	LayoutYaxisLayerAboveTraces LayoutYaxisLayer = "above traces"
	LayoutYaxisLayerBelowTraces LayoutYaxisLayer = "below traces"
)

// LayoutYaxisMatches If set to another axis id (e.g. `x2`, `y`), the range of this axis will match the range of the corresponding axis in data-coordinates space. Moreover, matching axes share auto-range values, category lists and histogram auto-bins. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Moreover, note that matching axes must have the same `type`.
type LayoutYaxisMatches string

const (
	LayoutYaxisMatchesSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisMatches = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisMatchesSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisMatches = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutYaxisMinorTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided).
type LayoutYaxisMinorTickmode string

const (
	LayoutYaxisMinorTickmodeAuto   LayoutYaxisMinorTickmode = "auto"
	LayoutYaxisMinorTickmodeLinear LayoutYaxisMinorTickmode = "linear"
	LayoutYaxisMinorTickmodeArray  LayoutYaxisMinorTickmode = "array"
)

// LayoutYaxisMinorTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutYaxisMinorTicks string

const (
	LayoutYaxisMinorTicksOutside LayoutYaxisMinorTicks = "outside"
	LayoutYaxisMinorTicksInside  LayoutYaxisMinorTicks = "inside"
	LayoutYaxisMinorTicksEmpty   LayoutYaxisMinorTicks = ""
)

// LayoutYaxisMirror Determines if the axis lines or/and ticks are mirrored to the opposite side of the plotting area. If *true*, the axis lines are mirrored. If *ticks*, the axis lines and ticks are mirrored. If *false*, mirroring is disable. If *all*, axis lines are mirrored on all shared-axes subplots. If *allticks*, axis lines and ticks are mirrored on all shared-axes subplots.
type LayoutYaxisMirror interface{}

var (
	LayoutYaxisMirrorTrue     LayoutYaxisMirror = true
	LayoutYaxisMirrorTicks    LayoutYaxisMirror = "ticks"
	LayoutYaxisMirrorFalse    LayoutYaxisMirror = false
	LayoutYaxisMirrorAll      LayoutYaxisMirror = "all"
	LayoutYaxisMirrorAllticks LayoutYaxisMirror = "allticks"
)

// LayoutYaxisOverlaying If set a same-letter axis id, this axis is overlaid on top of the corresponding same-letter axis, with traces and axes visible for both axes. If *false*, this axis does not overlay any same-letter axes. In this case, for axes with overlapping domains only the highest-numbered axis will be visible.
type LayoutYaxisOverlaying string

const (
	LayoutYaxisOverlayingFree                                                                                                                    LayoutYaxisOverlaying = "free"
	LayoutYaxisOverlayingSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisOverlaying = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisOverlayingSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisOverlaying = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
)

// LayoutYaxisRangemode If *normal*, the range is computed in relation to the extrema of the input data. If *tozero*`, the range extends to 0, regardless of the input data If *nonnegative*, the range is non-negative, regardless of the input data. Applies only to linear axes.
type LayoutYaxisRangemode string

const (
	LayoutYaxisRangemodeNormal      LayoutYaxisRangemode = "normal"
	LayoutYaxisRangemodeTozero      LayoutYaxisRangemode = "tozero"
	LayoutYaxisRangemodeNonnegative LayoutYaxisRangemode = "nonnegative"
)

// LayoutYaxisScaleanchor If set to another axis id (e.g. `x2`, `y`), the range of this axis changes together with the range of the corresponding axis such that the scale of pixels per unit is in a constant ratio. Both axes are still zoomable, but when you zoom one, the other will zoom the same amount, keeping a fixed midpoint. `constrain` and `constraintoward` determine how we enforce the constraint. You can chain these, ie `yaxis: {scaleanchor: *x*}, xaxis2: {scaleanchor: *y*}` but you can only link axes of the same `type`. The linked axis can have the opposite letter (to constrain the aspect ratio) or the same letter (to match scales across subplots). Loops (`yaxis: {scaleanchor: *x*}, xaxis: {scaleanchor: *y*}` or longer) are redundant and the last constraint encountered will be ignored to avoid possible inconsistent constraints via `scaleratio`. Note that setting axes simultaneously in both a `scaleanchor` and a `matches` constraint is currently forbidden. Setting `false` allows to remove a default constraint (occasionally, you may need to prevent a default `scaleanchor` constraint from being applied, eg. when having an image trace `yaxis: {scaleanchor: "x"}` is set automatically in order for pixels to be rendered as squares, setting `yaxis: {scaleanchor: false}` allows to remove the constraint).
type LayoutYaxisScaleanchor interface{}

var (
	LayoutYaxisScaleanchorSlashCapexLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisScaleanchor = "/^x([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisScaleanchorSlashCapeyLparLbracket29RbracketOrLbracket19RbracketLbracket09RbracketPlusRparQuestionLparDomainRparQuestionDollarSlash LayoutYaxisScaleanchor = "/^y([2-9]|[1-9][0-9]+)?( domain)?$/"
	LayoutYaxisScaleanchorFalse                                                                                                                   LayoutYaxisScaleanchor = false
)

// LayoutYaxisShowexponent If *all*, all exponents are shown besides their significands. If *first*, only the exponent of the first tick is shown. If *last*, only the exponent of the last tick is shown. If *none*, no exponents appear.
type LayoutYaxisShowexponent string

const (
	LayoutYaxisShowexponentAll   LayoutYaxisShowexponent = "all"
	LayoutYaxisShowexponentFirst LayoutYaxisShowexponent = "first"
	LayoutYaxisShowexponentLast  LayoutYaxisShowexponent = "last"
	LayoutYaxisShowexponentNone  LayoutYaxisShowexponent = "none"
)

// LayoutYaxisShowtickprefix If *all*, all tick labels are displayed with a prefix. If *first*, only the first tick is displayed with a prefix. If *last*, only the last tick is displayed with a suffix. If *none*, tick prefixes are hidden.
type LayoutYaxisShowtickprefix string

const (
	LayoutYaxisShowtickprefixAll   LayoutYaxisShowtickprefix = "all"
	LayoutYaxisShowtickprefixFirst LayoutYaxisShowtickprefix = "first"
	LayoutYaxisShowtickprefixLast  LayoutYaxisShowtickprefix = "last"
	LayoutYaxisShowtickprefixNone  LayoutYaxisShowtickprefix = "none"
)

// LayoutYaxisShowticksuffix Same as `showtickprefix` but for tick suffixes.
type LayoutYaxisShowticksuffix string

const (
	LayoutYaxisShowticksuffixAll   LayoutYaxisShowticksuffix = "all"
	LayoutYaxisShowticksuffixFirst LayoutYaxisShowticksuffix = "first"
	LayoutYaxisShowticksuffixLast  LayoutYaxisShowticksuffix = "last"
	LayoutYaxisShowticksuffixNone  LayoutYaxisShowticksuffix = "none"
)

// LayoutYaxisSide Determines whether a x (y) axis is positioned at the *bottom* (*left*) or *top* (*right*) of the plotting area.
type LayoutYaxisSide string

const (
	LayoutYaxisSideTop    LayoutYaxisSide = "top"
	LayoutYaxisSideBottom LayoutYaxisSide = "bottom"
	LayoutYaxisSideLeft   LayoutYaxisSide = "left"
	LayoutYaxisSideRight  LayoutYaxisSide = "right"
)

// LayoutYaxisSpikesnap Determines whether spikelines are stuck to the cursor or to the closest datapoints.
type LayoutYaxisSpikesnap string

const (
	LayoutYaxisSpikesnapData        LayoutYaxisSpikesnap = "data"
	LayoutYaxisSpikesnapCursor      LayoutYaxisSpikesnap = "cursor"
	LayoutYaxisSpikesnapHoveredData LayoutYaxisSpikesnap = "hovered data"
)

// LayoutYaxisTicklabelmode Determines where tick labels are drawn with respect to their corresponding ticks and grid lines. Only has an effect for axes of `type` *date* When set to *period*, tick labels are drawn in the middle of the period between ticks.
type LayoutYaxisTicklabelmode string

const (
	LayoutYaxisTicklabelmodeInstant LayoutYaxisTicklabelmode = "instant"
	LayoutYaxisTicklabelmodePeriod  LayoutYaxisTicklabelmode = "period"
)

// LayoutYaxisTicklabeloverflow Determines how we handle tick labels that would overflow either the graph div or the domain of the axis. The default value for inside tick labels is *hide past domain*. Otherwise on *category* and *multicategory* axes the default is *allow*. In other cases the default is *hide past div*.
type LayoutYaxisTicklabeloverflow string

const (
	LayoutYaxisTicklabeloverflowAllow          LayoutYaxisTicklabeloverflow = "allow"
	LayoutYaxisTicklabeloverflowHidePastDiv    LayoutYaxisTicklabeloverflow = "hide past div"
	LayoutYaxisTicklabeloverflowHidePastDomain LayoutYaxisTicklabeloverflow = "hide past domain"
)

// LayoutYaxisTicklabelposition Determines where tick labels are drawn with respect to the axis Please note that top or bottom has no effect on x axes or when `ticklabelmode` is set to *period*. Similarly left or right has no effect on y axes or when `ticklabelmode` is set to *period*. Has no effect on *multicategory* axes or when `tickson` is set to *boundaries*. When used on axes linked by `matches` or `scaleanchor`, no extra padding for inside labels would be added by autorange, so that the scales could match.
type LayoutYaxisTicklabelposition string

const (
	LayoutYaxisTicklabelpositionOutside       LayoutYaxisTicklabelposition = "outside"
	LayoutYaxisTicklabelpositionInside        LayoutYaxisTicklabelposition = "inside"
	LayoutYaxisTicklabelpositionOutsideTop    LayoutYaxisTicklabelposition = "outside top"
	LayoutYaxisTicklabelpositionInsideTop     LayoutYaxisTicklabelposition = "inside top"
	LayoutYaxisTicklabelpositionOutsideLeft   LayoutYaxisTicklabelposition = "outside left"
	LayoutYaxisTicklabelpositionInsideLeft    LayoutYaxisTicklabelposition = "inside left"
	LayoutYaxisTicklabelpositionOutsideRight  LayoutYaxisTicklabelposition = "outside right"
	LayoutYaxisTicklabelpositionInsideRight   LayoutYaxisTicklabelposition = "inside right"
	LayoutYaxisTicklabelpositionOutsideBottom LayoutYaxisTicklabelposition = "outside bottom"
	LayoutYaxisTicklabelpositionInsideBottom  LayoutYaxisTicklabelposition = "inside bottom"
)

// LayoutYaxisTickmode Sets the tick mode for this axis. If *auto*, the number of ticks is set via `nticks`. If *linear*, the placement of the ticks is determined by a starting position `tick0` and a tick step `dtick` (*linear* is the default value if `tick0` and `dtick` are provided). If *array*, the placement of the ticks is set via `tickvals` and the tick text is `ticktext`. (*array* is the default value if `tickvals` is provided). If *sync*, the number of ticks will sync with the overlayed axis set by `overlaying` property.
type LayoutYaxisTickmode string

const (
	LayoutYaxisTickmodeAuto   LayoutYaxisTickmode = "auto"
	LayoutYaxisTickmodeLinear LayoutYaxisTickmode = "linear"
	LayoutYaxisTickmodeArray  LayoutYaxisTickmode = "array"
	LayoutYaxisTickmodeSync   LayoutYaxisTickmode = "sync"
)

// LayoutYaxisTicks Determines whether ticks are drawn or not. If **, this axis' ticks are not drawn. If *outside* (*inside*), this axis' are drawn outside (inside) the axis lines.
type LayoutYaxisTicks string

const (
	LayoutYaxisTicksOutside LayoutYaxisTicks = "outside"
	LayoutYaxisTicksInside  LayoutYaxisTicks = "inside"
	LayoutYaxisTicksEmpty   LayoutYaxisTicks = ""
)

// LayoutYaxisTickson Determines where ticks and grid lines are drawn with respect to their corresponding tick labels. Only has an effect for axes of `type` *category* or *multicategory*. When set to *boundaries*, ticks and grid lines are drawn half a category to the left/bottom of labels.
type LayoutYaxisTickson string

const (
	LayoutYaxisTicksonLabels     LayoutYaxisTickson = "labels"
	LayoutYaxisTicksonBoundaries LayoutYaxisTickson = "boundaries"
)

// LayoutYaxisType Sets the axis type. By default, plotly attempts to determined the axis type by looking into the data of the traces that referenced the axis in question.
type LayoutYaxisType string

const (
	LayoutYaxisTypeHyphenHyphen  LayoutYaxisType = "-"
	LayoutYaxisTypeLinear        LayoutYaxisType = "linear"
	LayoutYaxisTypeLog           LayoutYaxisType = "log"
	LayoutYaxisTypeDate          LayoutYaxisType = "date"
	LayoutYaxisTypeCategory      LayoutYaxisType = "category"
	LayoutYaxisTypeMulticategory LayoutYaxisType = "multicategory"
)

// LayoutClickmode Determines the mode of single click interactions. *event* is the default value and emits the `plotly_click` event. In addition this mode emits the `plotly_selected` event in drag modes *lasso* and *select*, but with no event data attached (kept for compatibility reasons). The *select* flag enables selecting single data points via click. This mode also supports persistent selections, meaning that pressing Shift while clicking, adds to / subtracts from an existing selection. *select* with `hovermode`: *x* can be confusing, consider explicitly setting `hovermode`: *closest* when using this feature. Selection events are sent accordingly as long as *event* flag is set as well. When the *event* flag is missing, `plotly_click` and `plotly_selected` events are not fired.
type LayoutClickmode string

const (
	// Flags
	LayoutClickmodeEvent  LayoutClickmode = "event"
	LayoutClickmodeSelect LayoutClickmode = "select"

	// Extra
	LayoutClickmodeNone LayoutClickmode = "none"
)

// LayoutLegendTraceorder Determines the order at which the legend items are displayed. If *normal*, the items are displayed top-to-bottom in the same order as the input data. If *reversed*, the items are displayed in the opposite order as *normal*. If *grouped*, the items are displayed in groups (when a trace `legendgroup` is provided). if *grouped+reversed*, the items are displayed in the opposite order as *grouped*.
type LayoutLegendTraceorder string

const (
	// Flags
	LayoutLegendTraceorderReversed LayoutLegendTraceorder = "reversed"
	LayoutLegendTraceorderGrouped  LayoutLegendTraceorder = "grouped"

	// Extra
	LayoutLegendTraceorderNormal LayoutLegendTraceorder = "normal"
)

// LayoutXaxisAutomargin Determines whether long tick labels automatically grow the figure margins.
type LayoutXaxisAutomargin interface{}

var (
	// Flags
	LayoutXaxisAutomarginHeight LayoutXaxisAutomargin = "height"
	LayoutXaxisAutomarginWidth  LayoutXaxisAutomargin = "width"
	LayoutXaxisAutomarginLeft   LayoutXaxisAutomargin = "left"
	LayoutXaxisAutomarginRight  LayoutXaxisAutomargin = "right"
	LayoutXaxisAutomarginTop    LayoutXaxisAutomargin = "top"
	LayoutXaxisAutomarginBottom LayoutXaxisAutomargin = "bottom"

	// Extra
	LayoutXaxisAutomarginTrue  LayoutXaxisAutomargin = true
	LayoutXaxisAutomarginFalse LayoutXaxisAutomargin = false
)

// LayoutXaxisSpikemode Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
type LayoutXaxisSpikemode string

const (
	// Flags
	LayoutXaxisSpikemodeToaxis LayoutXaxisSpikemode = "toaxis"
	LayoutXaxisSpikemodeAcross LayoutXaxisSpikemode = "across"
	LayoutXaxisSpikemodeMarker LayoutXaxisSpikemode = "marker"

	// Extra

)

// LayoutYaxisAutomargin Determines whether long tick labels automatically grow the figure margins.
type LayoutYaxisAutomargin interface{}

var (
	// Flags
	LayoutYaxisAutomarginHeight LayoutYaxisAutomargin = "height"
	LayoutYaxisAutomarginWidth  LayoutYaxisAutomargin = "width"
	LayoutYaxisAutomarginLeft   LayoutYaxisAutomargin = "left"
	LayoutYaxisAutomarginRight  LayoutYaxisAutomargin = "right"
	LayoutYaxisAutomarginTop    LayoutYaxisAutomargin = "top"
	LayoutYaxisAutomarginBottom LayoutYaxisAutomargin = "bottom"

	// Extra
	LayoutYaxisAutomarginTrue  LayoutYaxisAutomargin = true
	LayoutYaxisAutomarginFalse LayoutYaxisAutomargin = false
)

// LayoutYaxisSpikemode Determines the drawing mode for the spike line If *toaxis*, the line is drawn from the data point to the axis the  series is plotted on. If *across*, the line is drawn across the entire plot area, and supercedes *toaxis*. If *marker*, then a marker dot is drawn on the axis the series is plotted on
type LayoutYaxisSpikemode string

const (
	// Flags
	LayoutYaxisSpikemodeToaxis LayoutYaxisSpikemode = "toaxis"
	LayoutYaxisSpikemodeAcross LayoutYaxisSpikemode = "across"
	LayoutYaxisSpikemodeMarker LayoutYaxisSpikemode = "marker"

	// Extra

)
